
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "scorecardModelUtils"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('scorecardModelUtils')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cat_new_class")
> ### * cat_new_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cat_new_class
> ### Title: Clubbing class of categorical variables with low population
> ###   percentage with another class of similar event rate
> ### Aliases: cat_new_class
> 
> ### ** Examples
> 
> data <- iris[1:110,]
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data_newclass <- cat_new_class(base = data,target = "Y",cat_var_name = "Species",threshold = 0.1)
> 
> 
> 
> cleanEx()
> nameEx("categorical_iv")
> ### * categorical_iv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: categorical_iv
> ### Title: IV table for individual categorical variable
> ### Aliases: categorical_iv
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> cat_iv <- categorical_iv(base = data,target = "Y",variable = "Species",event = 1)
> 
> 
> 
> cleanEx()
> nameEx("club_cat_class")
> ### * club_cat_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: club_cat_class
> ### Title: Clubbing class of a categorical variable with low population
> ###   percentage with another class of similar event rate
> ### Aliases: club_cat_class
> 
> ### ** Examples
> 
> data <- iris[1:110,]
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data_clubclass <- club_cat_class(base = data,target = "Y",variable = "Species",threshold = 0.2)
> 
> 
> 
> cleanEx()
> nameEx("cv_filter")
> ### * cv_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cv_filter
> ### Title: Variable reduction based on Cramer's V filter
> ### Aliases: cv_filter
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> cv_tab_list <- cv_table(data, c("Species", "Sepal.Length"))
> cv_tab <- cv_tab_list$cv_val_tab
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> iv_tab <- iv_table_list$iv_table
> cv_filter_list <- cv_filter(cv_table = cv_tab,iv_table = iv_tab,threshold = 0.5)
> cv_filter_list$retain_var_list
[1] "Species"
> cv_filter_list$dropped_var_list
[1] "Sepal.Length"
> cv_filter_list$dropped_var_tab
   dropped_var   var_2  cv_value dropped_var_iv      iv_2
1 Sepal.Length Species 0.7217263      0.1078267 0.1208137
> cv_filter_list$threshold
[1] 0.5
> 
> 
> 
> cleanEx()
> nameEx("cv_table")
> ### * cv_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cv_table
> ### Title: Pairwise Cramer's V among a list of categorical variables
> ### Aliases: cv_table
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Sepal.Length <- as.character(floor(data$Sepal.Length))
> cv_tab_list <- cv_table(data, c("Species", "Sepal.Length"))
> cv_tab_list$cv_val_tab
         var_1   var_2  cv_value
1 Sepal.Length Species 0.5710458
> cv_tab_list$single_class_var_index
NULL
> 
> 
> 
> cleanEx()
> nameEx("cv_test")
> ### * cv_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cv_test
> ### Title: Cramer's V value between two categorical variables
> ### Aliases: cv_test
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Sepal.Length <- as.character(floor(data$Sepal.Length))
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> cv_result <- cv_test(base = data,var_1 = "Species",var_2 = "Sepal.Length")
> 
> 
> 
> cleanEx()
> nameEx("dtree_split_val")
> ### * dtree_split_val
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtree_split_val
> ### Title: Getting the split value for terminal nodes from decision tree
> ### Aliases: dtree_split_val
> 
> ### ** Examples
> 
> data <- iris
> data$Y <- ifelse(data$Species=="setosa",1,0)
> 
> 
> 
> cleanEx()
> nameEx("dtree_trend_iv")
> ### * dtree_trend_iv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dtree_trend_iv
> ### Title: Recursive Decision Tree partitioning with monotonic event rate
> ###   along with IV table for individual numerical variable
> ### Aliases: dtree_trend_iv
> 
> ### ** Examples
> 
> data <- iris
> data$Y <- ifelse(data$Species=="setosa",1,0)
> dtree_trend_tab <- dtree_trend_iv(base = data,target = "Y",variable = "Sepal.Length",event = 1)
> 
> 
> 
> cleanEx()
> nameEx("fn_conf_mat")
> ### * fn_conf_mat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fn_conf_mat
> ### Title: Creates confusion matrix and its related measures
> ### Aliases: fn_conf_mat
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data$Y_pred <- sample(0:1,size=nrow(data),replace=TRUE)
> fn_conf_mat_list <- fn_conf_mat(base = data,observed_col = "Y",predicted_col = "Y_pred",event = 1)
> fn_conf_mat_list$confusion_mat
           Predicted
Observed    Event Non_event
  Event        36        25
  Non_event    43        46
> fn_conf_mat_list$accuracy
[1] 0.5466667
> fn_conf_mat_list$precision
[1] 0.4556962
> fn_conf_mat_list$recall
[1] 0.5901639
> fn_conf_mat_list$sensitivity
[1] 0.5901639
> fn_conf_mat_list$specificity
[1] 0.5168539
> fn_conf_mat_list$f1_score
[1] 0.5142857
> 
> 
> 
> cleanEx()
> nameEx("fn_cross_index")
> ### * fn_cross_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fn_cross_index
> ### Title: Creates random index for k-fold cross validation
> ### Aliases: fn_cross_index
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data$Y_pred <- sample(0:1,size=nrow(data),replace=TRUE)
> data_k_list <- fn_cross_index(base = data,k = 5)
> data_k_list$index1
 [1]   9  57 111  78  98  54 109  44  23  69 113   2 132  62 129  38  30  11  52
[20] 112  66  28  37 127  91  18  68  64  12  19
> data_k_list$index2
 [1]  56  20  10 101  47  95  59  13  55  92  77 147 141  70  88  75  65  53  15
[20] 125  86  89  16  82  84 122 110  71  81  35
> data_k_list$index3
 [1]  42 117  41 118 104  14 119 120  97 128  32  24 136  48  34  46 142   5 105
[20]  80 126  36  22  49 145  83  76  74 106  85
> data_k_list$index4
 [1]  60  94 100 137   7 115  31  72 143 140 135 107 103  96  73  99 108  87  33
[20]   6  21 139  61   8 133 148 149 144   4  58
> data_k_list$index5
 [1]  79  63 124  43 123  90  67 131  40 116 130 121  93 114  50  17   3  45  26
[20] 146  29 102  27 150  51 138  39 134   1  25
> 
> 
> 
> cleanEx()
> nameEx("fn_error")
> ### * fn_error
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fn_error
> ### Title: Computes error measures between observed and predicted values
> ### Aliases: fn_error
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data$Y_pred <- sample(0:1,size=nrow(data),replace=TRUE)
> fn_error_list <- fn_error(base = data,observed_col = "Y",predicted_col = "Y_pred")
> fn_error_list$mean_abs_error
[1] 0.4533333
> fn_error_list$mean_sq_error
[1] 0.4533333
> fn_error_list$root_mean_sq_error
[1] 0.6733003
> 
> 
> 
> cleanEx()
> nameEx("fn_mode")
> ### * fn_mode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fn_mode
> ### Title: Calculating mode value of a vector
> ### Aliases: fn_mode
> 
> ### ** Examples
> 
> fn_mode(c(1,2,3,1,4,1,7))
[1] "1"
> 
> 
> 
> cleanEx()
> nameEx("fn_target")
> ### * fn_target
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fn_target
> ### Title: Redefines target value
> ### Aliases: fn_target
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> 
> data2 <- fn_target(base = data,target = "Y",event = 1)
> 
> 
> 
> cleanEx()
> nameEx("gini_table")
> ### * gini_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gini_table
> ### Title: Performance measure table with Gini coefficient, KS-statistics
> ###   and Gini lift curve
> ### Aliases: gini_table
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y_pred <- sample(300:900,size=nrow(data),replace=TRUE)
> gini_tab_list <- gini_table(base = data,target = "Y",col_pred = "Y_pred",quantile_pt = 10)
> gini_tab_list$prediction
    Target predicted      band
1        0       466 (452,499]
2        0       300 [300,373]
3        1       606 (602,658]
4        0       308 [300,373]
5        0       338 [300,373]
6        1       873 (789,896]
7        0       351 [300,373]
8        0       474 (452,499]
9        1       829 (789,896]
10       0       374 (373,420]
11       0       405 (373,420]
12       0       564 (560,602]
13       1       845 (789,896]
14       1       811 (789,896]
15       1       741 (717,789]
16       1       644 (602,658]
17       0       589 (560,602]
18       0       498 (452,499]
19       0       394 (373,420]
20       0       588 (560,602]
21       0       422 (420,452]
22       1       708 (658,717]
23       0       518 (499,560]
24       0       510 (499,560]
25       0       337 [300,373]
26       0       590 (560,602]
27       0       539 (499,560]
28       0       309 [300,373]
29       0       375 (373,420]
30       0       539 (499,560]
31       1       603 (602,658]
32       0       496 (452,499]
33       0       547 (499,560]
34       0       421 (420,452]
35       1       788 (717,789]
36       1       685 (658,717]
37       0       466 (452,499]
38       0       362 [300,373]
39       0       453 (452,499]
40       0       334 [300,373]
41       0       448 (420,452]
42       0       429 (420,452]
43       0       596 (560,602]
44       1       692 (658,717]
45       0       497 (452,499]
46       1       819 (789,896]
47       1       683 (658,717]
48       0       308 [300,373]
49       1       618 (602,658]
50       1       801 (789,896]
51       1       602 (560,602]
52       1       659 (658,717]
53       0       555 (499,560]
54       0       487 (452,499]
55       0       433 (420,452]
56       0       566 (560,602]
57       0       547 (499,560]
58       1       790 (789,896]
59       0       397 (373,420]
60       1       658 (602,658]
61       0       380 (373,420]
62       1       752 (717,789]
63       0       404 (373,420]
64       1       648 (602,658]
65       1       751 (717,789]
66       0       409 (373,420]
67       0       334 [300,373]
68       0       599 (560,602]
69       0       415 (373,420]
70       1       672 (658,717]
71       1       712 (658,717]
72       0       555 (499,560]
73       0       556 (499,560]
74       0       422 (420,452]
75       1       864 (789,896]
76       1       621 (602,658]
77       0       462 (452,499]
78       0       499 (499,560]
79       0       518 (499,560]
80       0       432 (420,452]
81       0       330 [300,373]
82       0       598 (560,602]
83       1       605 (602,658]
84       0       441 (420,452]
85       1       789 (717,789]
86       0       551 (499,560]
87       0       415 (373,420]
88       1       689 (658,717]
89       1       788 (717,789]
90       0       435 (420,452]
91       0       519 (499,560]
92       1       759 (717,789]
93       0       308 [300,373]
94       0       586 (560,602]
95       1       787 (717,789]
96       0       443 (420,452]
97       1       760 (717,789]
98       0       416 (373,420]
99       1       652 (602,658]
100      0       434 (420,452]
101      1       771 (717,789]
102      1       706 (658,717]
103      0       545 (499,560]
104      0       545 (499,560]
105      0       424 (420,452]
106      0       458 (452,499]
107      1       715 (658,717]
108      1       744 (717,789]
109      1       638 (602,658]
110      0       385 (373,420]
111      1       724 (717,789]
112      0       354 [300,373]
113      0       563 (560,602]
114      1       794 (789,896]
115      1       702 (658,717]
116      0       481 (452,499]
117      1       859 (789,896]
118      0       569 (560,602]
119      1       614 (602,658]
120      0       447 (420,452]
121      0       418 (373,420]
122      0       473 (452,499]
123      1       895 (789,896]
124      0       402 (373,420]
125      0       571 (560,602]
126      0       343 [300,373]
127      0       315 [300,373]
128      1       814 (789,896]
129      1       723 (717,789]
130      1       679 (658,717]
131      1       873 (789,896]
132      1       709 (658,717]
133      0       428 (420,452]
134      1       615 (602,658]
135      0       384 (373,420]
136      0       589 (560,602]
137      0       463 (452,499]
138      1       726 (717,789]
139      1       765 (717,789]
140      1       896 (789,896]
141      1       705 (658,717]
142      1       635 (602,658]
143      0       570 (560,602]
144      1       713 (658,717]
145      0       433 (420,452]
146      1       617 (602,658]
147      1       654 (602,658]
148      0       498 (452,499]
149      1       821 (789,896]
150      0       482 (452,499]
> gini_tab_list$gini_tab
   Lower_open_bound Upper_closed_bound      Band Total Non_event Event
11                0                  0      <NA>     0         0     0
1              [300                373 [300,373]    15        15     0
2               373                420 (373,420]    15        15     0
3               420                452 (420,452]    15        15     0
4               452                499 (452,499]    15        15     0
5               499                560 (499,560]    15        15     0
6               560                602 (560,602]    15        14     1
7               602                658 (602,658]    15         0    15
8               658                717 (658,717]    15         0    15
9               717                789 (717,789]    15         0    15
10              789                896 (789,896]    15         0    15
   Event_rate Cuml_non_event Cuml_event Pop_perc Cuml_non_event_perc
11 0.00000000              0          0      0.0           0.0000000
1  0.00000000             15          0      0.1           0.1685393
2  0.00000000             30          0      0.1           0.3370787
3  0.00000000             45          0      0.1           0.5056180
4  0.00000000             60          0      0.1           0.6741573
5  0.00000000             75          0      0.1           0.8426966
6  0.06666667             89          1      0.1           1.0000000
7  1.00000000             89         16      0.1           1.0000000
8  1.00000000             89         31      0.1           1.0000000
9  1.00000000             89         46      0.1           1.0000000
10 1.00000000             89         61      0.1           1.0000000
   Cuml_event_perc       Diff GINI_formula
11      0.00000000  0.0000000           NA
1       0.00000000 -0.1685393  0.000000000
2       0.00000000 -0.3370787  0.000000000
3       0.00000000 -0.5056180  0.000000000
4       0.00000000 -0.6741573  0.000000000
5       0.00000000 -0.8426966  0.000000000
6       0.01639344 -0.9836066  0.001289372
7       0.26229508 -0.7377049  0.000000000
8       0.50819672 -0.4918033  0.000000000
9       0.75409836 -0.2459016  0.000000000
10      1.00000000  0.0000000  0.000000000
> gini_tab_list$gini_value
[1] -0.9974213
> gini_tab_list$gini_plot
> gini_tab_list$ks_value
[1] 0
> gini_tab_list$breaks
 [1] 300.0 372.8 420.4 451.5 498.6 559.5 602.4 658.3 716.6 789.1 896.0
> 
> 
> 
> cleanEx()
> nameEx("gradient_boosting_parameters")
> ### * gradient_boosting_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gradient_boosting_parameters
> ### Title: Hyperparameter optimisation or parameter tuning for Gradient
> ###   Boosting Regression Modelling by grid search
> ### Aliases: gradient_boosting_parameters
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> gbm_params_list <- gradient_boosting_parameters(base = data,target = "Y",ntree = 2,depth = 2,
+                    shrinkage = 0.1,min_obs = 0.1,bag_fraction = 0.7)
Warning in fun(libname, pkgname) : couldn't connect to display ""
> gbm_params_list$error_tab_detailed
  ntree depth shrinkage min_obs bag_fraction mean_abs_error mean_sq_error
1     2     2       0.1     0.1          0.7      0.4776514     0.2366294
  root_mean_sq_error cv          runtime
1          0.4864456  1 0.007651091 secs
> gbm_params_list$error_tab_summary
  ntree depth shrinkage min_obs bag_fraction mean_abs_error mean_sq_error
1     2     2       0.1     0.1          0.7      0.4776514     0.2366294
  root_mean_sq_error runtime_sec
1          0.4864456 0.007651091
> gbm_params_list$best_ntree
[1] 2
> gbm_params_list$best_depth
[1] 2
> gbm_params_list$best_shrinkage
[1] 0.1
> gbm_params_list$best_min_obs
[1] 0.1
> gbm_params_list$best_bag_fraction
[1] 0.7
> gbm_params_list$runtime
[1] 0.007651091
> 
> 
> 
> cleanEx()

detaching ‘package:RSQLite’

> nameEx("iv_filter")
> ### * iv_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iv_filter
> ### Title: Variable reduction based on Information Value filter
> ### Aliases: iv_filter
> 
> ### ** Examples
> 
> data <- iris
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> ivf_list <- iv_filter(base = data,iv_table = iv_table_list$iv_table,threshold = 0.02)
> ivf_list$retain_var_tab
   Variable_name         iv
6    Sepal.Width 0.27840216
3   Sepal.Length 0.15570640
12   Petal.Width 0.11344234
9   Petal.Length 0.09232219
16       Species 0.02713100
> ivf_list$retain_var_name
[1] "Sepal.Width"  "Sepal.Length" "Petal.Width"  "Petal.Length" "Species"     
> ivf_list$dropped_var_tab
[1] Variable_name iv           
<0 rows> (or 0-length row.names)
> ivf_list$threshold
[1] 0.02
> 
> 
> 
> cleanEx()
> nameEx("iv_table")
> ### * iv_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iv_table
> ### Title: WOE and IV table for list of numerical and categorical variables
> ### Aliases: iv_table
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> iv_table_list$num_woe_table
   Variable_name Lower_open_bound Upper_closed_bound   Category Non_event Event
1   Sepal.Length             -Inf                7.1 (-Inf,7.1]        65    74
2   Sepal.Length              7.1                Inf  (7.1,Inf]         9     2
3   Sepal.Length               NA                 NA      Total        74    76
4    Sepal.Width             -Inf                2.6 (-Inf,2.6]         5    19
5    Sepal.Width              2.6                Inf  (2.6,Inf]        69    57
6    Sepal.Width               NA                 NA      Total        74    76
7   Petal.Length             -Inf                6.0   (-Inf,6]        67    74
8   Petal.Length              6.0                Inf    (6,Inf]         7     2
9   Petal.Length               NA                 NA      Total        74    76
10   Petal.Width             -Inf                0.2 (-Inf,0.2]        22    12
11   Petal.Width              0.2                Inf  (0.2,Inf]        52    64
12   Petal.Width               NA                 NA      Total        74    76
   Total Event_rate Non_event_perc Event_perc   Pop_perc         woe
1    139  0.5323741     0.87837838 0.97368421 0.92666667 -0.10300958
2     11  0.1818182     0.12162162 0.02631579 0.07333333  1.53074564
3    150  0.5066667     1.00000000 1.00000000 1.00000000  1.42773607
4     24  0.7916667     0.06756757 0.25000000 0.16000000 -1.30833282
5    126  0.4523810     0.93243243 0.75000000 0.84000000  0.21772348
6    150  0.5066667     1.00000000 1.00000000 1.00000000 -1.09060934
7    141  0.5248227     0.90540541 0.97368421 0.94000000 -0.07270423
8      9  0.2222222     0.09459459 0.02631579 0.06000000  1.27943122
9    150  0.5066667     1.00000000 1.00000000 1.00000000  1.20672699
10    34  0.3529412     0.29729730 0.15789474 0.22666667  0.63280405
11   116  0.5517241     0.70270270 0.84210526 0.77333333 -0.18097112
12   150  0.5066667     1.00000000 1.00000000 1.00000000  0.45183293
            iv
1  0.009817413
2  0.145888987
3  0.155706401
4  0.238682339
5  0.039719825
6  0.278402163
7  0.004964158
8  0.087358035
9  0.092322192
10 0.088214505
11 0.025227837
12 0.113442342
> iv_table_list$cat_woe_table
  Variable_name   Category Non_event Event Total Event_rate Non_event_perc
1       Species     setosa        27    23    50       0.46      0.3648649
2       Species versicolor        22    28    50       0.56      0.2972973
3       Species  virginica        25    25    50       0.50      0.3378378
4       Species      Total        74    76   150       1.52      1.0000000
  Event_perc  Pop_perc           woe           iv
1  0.3026316 0.3333333  0.1870108972 0.0116383026
2  0.3684211 0.3333333 -0.2144938097 0.0152556052
3  0.3289474 0.3333333  0.0266682471 0.0002370932
4  1.0000000 1.0000000 -0.0008146655 0.0271310011
> iv_table_list$woe_table
   Variable_name   Category Non_event Event Total Event_rate Non_event_perc
1   Sepal.Length (-Inf,7.1]        65    74   139  0.5323741     0.87837838
2   Sepal.Length  (7.1,Inf]         9     2    11  0.1818182     0.12162162
3   Sepal.Length      Total        74    76   150  0.5066667     1.00000000
4    Sepal.Width (-Inf,2.6]         5    19    24  0.7916667     0.06756757
5    Sepal.Width  (2.6,Inf]        69    57   126  0.4523810     0.93243243
6    Sepal.Width      Total        74    76   150  0.5066667     1.00000000
7   Petal.Length   (-Inf,6]        67    74   141  0.5248227     0.90540541
8   Petal.Length    (6,Inf]         7     2     9  0.2222222     0.09459459
9   Petal.Length      Total        74    76   150  0.5066667     1.00000000
10   Petal.Width (-Inf,0.2]        22    12    34  0.3529412     0.29729730
11   Petal.Width  (0.2,Inf]        52    64   116  0.5517241     0.70270270
12   Petal.Width      Total        74    76   150  0.5066667     1.00000000
13       Species     setosa        27    23    50  0.4600000     0.36486486
14       Species versicolor        22    28    50  0.5600000     0.29729730
15       Species  virginica        25    25    50  0.5000000     0.33783784
16       Species      Total        74    76   150  1.5200000     1.00000000
   Event_perc   Pop_perc           woe           iv
1  0.97368421 0.92666667 -0.1030095762 0.0098174134
2  0.02631579 0.07333333  1.5307456439 0.1458889874
3  1.00000000 1.00000000  1.4277360676 0.1557064008
4  0.25000000 0.16000000 -1.3083328197 0.2386823387
5  0.75000000 0.84000000  0.2177234838 0.0397198248
6  1.00000000 1.00000000 -1.0906093358 0.2784021635
7  0.97368421 0.94000000 -0.0727042267 0.0049641577
8  0.02631579 0.06000000  1.2794312156 0.0873580346
9  1.00000000 1.00000000  1.2067269888 0.0923221924
10 0.15789474 0.22666667  0.6328040507 0.0882145049
11 0.84210526 0.77333333 -0.1809711177 0.0252278372
12 1.00000000 1.00000000  0.4518329330 0.1134423421
13 0.30263158 0.33333333  0.1870108972 0.0116383026
14 0.36842105 0.33333333 -0.2144938097 0.0152556052
15 0.32894737 0.33333333  0.0266682471 0.0002370932
16 1.00000000 1.00000000 -0.0008146655 0.0271310011
> iv_table_list$iv_table
   Variable_name         iv
6    Sepal.Width 0.27840216
3   Sepal.Length 0.15570640
12   Petal.Width 0.11344234
9   Petal.Length 0.09232219
16       Species 0.02713100
> 
> 
> 
> cleanEx()
> nameEx("missing_val")
> ### * missing_val
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: missing_val
> ### Title: Missing value imputation
> ### Aliases: missing_val
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data[sample(1:nrow(data),size=25),"Sepal.Length"] <- NA
> data[sample(1:nrow(data),size=10),"Species"] <- NA
> 
> missing_list <- missing_val(base = data,target = "Y")
> missing_list$base
    Sepal.Length Sepal.Width Petal.Length Petal.Width       Species Y
1       -99999.0         3.5          1.4         0.2        setosa 0
2            4.9         3.0          1.4         0.2        setosa 1
3            4.7         3.2          1.3         0.2        setosa 0
4            4.6         3.1          1.5         0.2        setosa 0
5            5.0         3.6          1.4         0.2        setosa 1
6            5.4         3.9          1.7         0.4        setosa 0
7            4.6         3.4          1.4         0.3        setosa 0
8            5.0         3.4          1.5         0.2        setosa 0
9            4.4         2.9          1.4         0.2        setosa 1
10           4.9         3.1          1.5         0.1        setosa 1
11           5.4         3.7          1.5         0.2        setosa 0
12           4.8         3.4          1.6         0.2        setosa 0
13           4.8         3.0          1.4         0.1        setosa 0
14           4.3         3.0          1.1         0.1        setosa 0
15           5.8         4.0          1.2         0.2        setosa 0
16           5.7         4.4          1.5         0.4        setosa 1
17           5.4         3.9          1.3         0.4        setosa 1
18           5.1         3.5          1.4         0.3        setosa 1
19           5.7         3.8          1.7         0.3        setosa 1
20           5.1         3.8          1.5         0.3 missing_value 0
21           5.4         3.4          1.7         0.2        setosa 0
22           5.1         3.7          1.5         0.4        setosa 0
23           4.6         3.6          1.0         0.2        setosa 0
24           5.1         3.3          1.7         0.5        setosa 0
25           4.8         3.4          1.9         0.2        setosa 0
26           5.0         3.0          1.6         0.2        setosa 0
27           5.0         3.4          1.6         0.4        setosa 1
28      -99999.0         3.5          1.5         0.2        setosa 0
29      -99999.0         3.4          1.4         0.2        setosa 0
30           4.7         3.2          1.6         0.2        setosa 1
31           4.8         3.1          1.6         0.2        setosa 1
32           5.4         3.4          1.5         0.4        setosa 1
33           5.2         4.1          1.5         0.1        setosa 0
34           5.5         4.2          1.4         0.2        setosa 1
35           4.9         3.1          1.5         0.2        setosa 0
36           5.0         3.2          1.2         0.2        setosa 0
37      -99999.0         3.5          1.3         0.2        setosa 1
38           4.9         3.6          1.4         0.1        setosa 0
39           4.4         3.0          1.3         0.2        setosa 1
40           5.1         3.4          1.5         0.2        setosa 1
41           5.0         3.5          1.3         0.3        setosa 1
42           4.5         2.3          1.3         0.3        setosa 1
43      -99999.0         3.2          1.3         0.2        setosa 0
44      -99999.0         3.5          1.6         0.6        setosa 1
45           5.1         3.8          1.9         0.4        setosa 1
46           4.8         3.0          1.4         0.3        setosa 1
47           5.1         3.8          1.6         0.2        setosa 1
48           4.6         3.2          1.4         0.2 missing_value 1
49      -99999.0         3.7          1.5         0.2        setosa 0
50      -99999.0         3.3          1.4         0.2        setosa 0
51      -99999.0         3.2          4.7         1.4 missing_value 1
52           6.4         3.2          4.5         1.5    versicolor 0
53           6.9         3.1          4.9         1.5 missing_value 1
54           5.5         2.3          4.0         1.3    versicolor 1
55           6.5         2.8          4.6         1.5    versicolor 0
56           5.7         2.8          4.5         1.3    versicolor 0
57           6.3         3.3          4.7         1.6    versicolor 1
58           4.9         2.4          3.3         1.0    versicolor 1
59           6.6         2.9          4.6         1.3    versicolor 1
60      -99999.0         2.7          3.9         1.4    versicolor 0
61      -99999.0         2.0          3.5         1.0    versicolor 0
62           5.9         3.0          4.2         1.5    versicolor 1
63           6.0         2.2          4.0         1.0    versicolor 1
64           6.1         2.9          4.7         1.4    versicolor 1
65           5.6         2.9          3.6         1.3    versicolor 1
66           6.7         3.1          4.4         1.4    versicolor 1
67           5.6         3.0          4.5         1.5    versicolor 1
68           5.8         2.7          4.1         1.0    versicolor 0
69           6.2         2.2          4.5         1.5    versicolor 1
70      -99999.0         2.5          3.9         1.1    versicolor 1
71      -99999.0         3.2          4.8         1.8    versicolor 1
72           6.1         2.8          4.0         1.3    versicolor 1
73           6.3         2.5          4.9         1.5    versicolor 0
74           6.1         2.8          4.7         1.2    versicolor 0
75           6.4         2.9          4.3         1.3    versicolor 0
76           6.6         3.0          4.4         1.4    versicolor 1
77           6.8         2.8          4.8         1.4    versicolor 1
78      -99999.0         3.0          5.0         1.7    versicolor 0
79           6.0         2.9          4.5         1.5    versicolor 0
80           5.7         2.6          3.5         1.0    versicolor 1
81           5.5         2.4          3.8         1.1    versicolor 1
82           5.5         2.4          3.7         1.0    versicolor 1
83           5.8         2.7          3.9         1.2    versicolor 0
84           6.0         2.7          5.1         1.6    versicolor 0
85           5.4         3.0          4.5         1.5    versicolor 0
86      -99999.0         3.4          4.5         1.6    versicolor 1
87           6.7         3.1          4.7         1.5    versicolor 0
88           6.3         2.3          4.4         1.3    versicolor 1
89           5.6         3.0          4.1         1.3    versicolor 0
90      -99999.0         2.5          4.0         1.3    versicolor 1
91      -99999.0         2.6          4.4         1.2    versicolor 0
92           6.1         3.0          4.6         1.4    versicolor 0
93           5.8         2.6          4.0         1.2    versicolor 1
94           5.0         2.3          3.3         1.0    versicolor 1
95           5.6         2.7          4.2         1.3    versicolor 0
96           5.7         3.0          4.2         1.2    versicolor 0
97           5.7         2.9          4.2         1.3    versicolor 0
98           6.2         2.9          4.3         1.3    versicolor 1
99      -99999.0         2.5          3.0         1.1    versicolor 1
100          5.7         2.8          4.1         1.3 missing_value 0
101          6.3         3.3          6.0         2.5     virginica 1
102          5.8         2.7          5.1         1.9     virginica 1
103          7.1         3.0          5.9         2.1     virginica 1
104          6.3         2.9          5.6         1.8     virginica 0
105     -99999.0         3.0          5.8         2.2     virginica 0
106          7.6         3.0          6.6         2.1     virginica 0
107          4.9         2.5          4.5         1.7     virginica 0
108          7.3         2.9          6.3         1.8     virginica 1
109          6.7         2.5          5.8         1.8     virginica 0
110     -99999.0         3.6          6.1         2.5     virginica 0
111     -99999.0         3.2          5.1         2.0 missing_value 0
112          6.4         2.7          5.3         1.9     virginica 0
113     -99999.0         3.0          5.5         2.1     virginica 0
114          5.7         2.5          5.0         2.0     virginica 1
115          5.8         2.8          5.1         2.4     virginica 1
116     -99999.0         3.2          5.3         2.3     virginica 1
117          6.5         3.0          5.5         1.8     virginica 1
118          7.7         3.8          6.7         2.2     virginica 0
119     -99999.0         2.6          6.9         2.3     virginica 1
120          6.0         2.2          5.0         1.5     virginica 1
121          6.9         3.2          5.7         2.3 missing_value 1
122          5.6         2.8          4.9         2.0     virginica 1
123          7.7         2.8          6.7         2.0     virginica 0
124          6.3         2.7          4.9         1.8     virginica 0
125          6.7         3.3          5.7         2.1     virginica 1
126          7.2         3.2          6.0         1.8     virginica 0
127          6.2         2.8          4.8         1.8     virginica 0
128          6.1         3.0          4.9         1.8     virginica 1
129          6.4         2.8          5.6         2.1     virginica 1
130          7.2         3.0          5.8         1.6 missing_value 0
131          7.4         2.8          6.1         1.9     virginica 0
132          7.9         3.8          6.4         2.0     virginica 0
133     -99999.0         2.8          5.6         2.2     virginica 1
134          6.3         2.8          5.1         1.5     virginica 0
135          6.1         2.6          5.6         1.4 missing_value 1
136          7.7         3.0          6.1         2.3     virginica 0
137          6.3         3.4          5.6         2.4     virginica 1
138          6.4         3.1          5.5         1.8     virginica 1
139          6.0         3.0          4.8         1.8     virginica 1
140          6.9         3.1          5.4         2.1     virginica 0
141          6.7         3.1          5.6         2.4     virginica 1
142          6.9         3.1          5.1         2.3     virginica 0
143          5.8         2.7          5.1         1.9     virginica 0
144          6.8         3.2          5.9         2.3 missing_value 1
145          6.7         3.3          5.7         2.5     virginica 0
146          6.7         3.0          5.2         2.3     virginica 1
147          6.3         2.5          5.0         1.9     virginica 1
148          6.5         3.0          5.2         2.0     virginica 1
149          6.2         3.4          5.4         2.3     virginica 0
150          5.9         3.0          5.1         1.8     virginica 0
> missing_list$mapping_table
  Variable_name imputed_missing
1  Sepal.Length          -99999
2   Sepal.Width          -99999
3  Petal.Length          -99999
4   Petal.Width          -99999
5       Species   missing_value
> 
> 
> 
> cleanEx()
> nameEx("num_to_cat")
> ### * num_to_cat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: num_to_cat
> ### Title: Binning numerical variables based on cuts from IV table
> ### Aliases: num_to_cat
> 
> ### ** Examples
> 
> data <- iris
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> num_cat <- num_to_cat(base = data,num_woe_table = iv_table_list$num_woe_table)
> 
> 
> 
> cleanEx()
> nameEx("others_class")
> ### * others_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: others_class
> ### Title: Clubbing of classes of categorical variable with low population
> ###   percentage into one class
> ### Aliases: others_class
> 
> ### ** Examples
> 
> data <- iris[c(1:110),]
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> data$Species <- as.character(data$Species)
> data_otherclass <- others_class(base = data,target = "Y",column_name = "Species",threshold = 0.15)
> 
> 
> 
> cleanEx()
> nameEx("random_forest_parameters")
> ### * random_forest_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: random_forest_parameters
> ### Title: Hyperparameter optimisation or parameter tuning for Random
> ###   Forest by grid search
> ### Aliases: random_forest_parameters
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> rf_params_list <- random_forest_parameters(base = data,target = "Y",
+                   model_type = "classification",ntree = 2,mtry = 1,nodesize = 3)
> rf_params_list$error_tab_detailed
  ntree mtry  maxnodes nodesize mean_abs_error mean_sq_error root_mean_sq_error
1     2    1 max_depth        3           0.38          0.38  0.616441400296898
  cv          runtime
1  1 0.008748055 secs
> rf_params_list$error_tab_summary
  ntree mtry  maxnodes nodesize mean_abs_error mean_sq_error root_mean_sq_error
1     2    1 max_depth        3           0.38          0.38  0.616441400296898
  runtime_sec
1 0.008748055
> rf_params_list$best_ntree
[1] "2"
> rf_params_list$best_mtry
[1] "1"
> rf_params_list$maxnodes
NULL
> rf_params_list$best_nodesize
[1] "3"
> rf_params_list$runtime
[1] 0.008748055
> 
> 
> 
> cleanEx()

detaching ‘package:RSQLite’

> nameEx("sampling")
> ### * sampling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sampling
> ### Title: Random sampling of data into train and test
> ### Aliases: sampling
> 
> ### ** Examples
> 
> data <- iris
> sampling_list <- sampling(base = data,train_perc = 0.7,seed = 1234)
> sampling_list$train
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
28           5.2         3.5          1.5         0.2     setosa
80           5.7         2.6          3.5         1.0 versicolor
101          6.3         3.3          6.0         2.5  virginica
111          6.5         3.2          5.1         2.0  virginica
137          6.3         3.4          5.6         2.4  virginica
133          6.4         2.8          5.6         2.2  virginica
144          6.8         3.2          5.9         2.3  virginica
132          7.9         3.8          6.4         2.0  virginica
98           6.2         2.9          4.3         1.3 versicolor
103          7.1         3.0          5.9         2.1  virginica
90           5.5         2.5          4.0         1.3 versicolor
70           5.6         2.5          3.9         1.1 versicolor
79           6.0         2.9          4.5         1.5 versicolor
116          6.4         3.2          5.3         2.3  virginica
14           4.3         3.0          1.1         0.1     setosa
126          7.2         3.2          6.0         1.8  virginica
62           5.9         3.0          4.2         1.5 versicolor
4            4.6         3.1          1.5         0.2     setosa
143          5.8         2.7          5.1         1.9  virginica
40           5.1         3.4          1.5         0.2     setosa
93           5.8         2.6          4.0         1.2 versicolor
122          5.6         2.8          4.9         2.0  virginica
5            5.0         3.6          1.4         0.2     setosa
66           6.7         3.1          4.4         1.4 versicolor
135          6.1         2.6          5.6         1.4  virginica
47           5.1         3.8          1.6         0.2     setosa
131          7.4         2.8          6.1         1.9  virginica
123          7.7         2.8          6.7         2.0  virginica
84           6.0         2.7          5.1         1.6 versicolor
48           4.6         3.2          1.4         0.2     setosa
108          7.3         2.9          6.3         1.8  virginica
3            4.7         3.2          1.3         0.2     setosa
87           6.7         3.1          4.7         1.5 versicolor
41           5.0         3.5          1.3         0.3     setosa
115          5.8         2.8          5.1         2.4  virginica
100          5.7         2.8          4.1         1.3 versicolor
72           6.1         2.8          4.0         1.3 versicolor
32           5.4         3.4          1.5         0.4     setosa
42           4.5         2.3          1.3         0.3     setosa
43           4.4         3.2          1.3         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
138          6.4         3.1          5.5         1.8  virginica
54           5.5         2.3          4.0         1.3 versicolor
49           5.3         3.7          1.5         0.2     setosa
102          5.8         2.7          5.1         1.9  virginica
56           5.7         2.8          4.5         1.3 versicolor
51           7.0         3.2          4.7         1.4 versicolor
6            5.4         3.9          1.7         0.4     setosa
107          4.9         2.5          4.5         1.7  virginica
130          7.2         3.0          5.8         1.6  virginica
96           5.7         3.0          4.2         1.2 versicolor
106          7.6         3.0          6.6         2.1  virginica
57           6.3         3.3          4.7         1.6 versicolor
8            5.0         3.4          1.5         0.2     setosa
26           5.0         3.0          1.6         0.2     setosa
17           5.4         3.9          1.3         0.4     setosa
63           6.0         2.2          4.0         1.0 versicolor
97           5.7         2.9          4.2         1.3 versicolor
22           5.1         3.7          1.5         0.4     setosa
35           4.9         3.1          1.5         0.2     setosa
117          6.5         3.0          5.5         1.8  virginica
149          6.2         3.4          5.4         2.3  virginica
119          7.7         2.6          6.9         2.3  virginica
86           6.0         3.4          4.5         1.6 versicolor
142          6.9         3.1          5.1         2.3  virginica
10           4.9         3.1          1.5         0.1     setosa
55           6.5         2.8          4.6         1.5 versicolor
92           6.1         3.0          4.6         1.4 versicolor
25           4.8         3.4          1.9         0.2     setosa
88           6.3         2.3          4.4         1.3 versicolor
50           5.0         3.3          1.4         0.2     setosa
139          6.0         3.0          4.8         1.8  virginica
20           5.1         3.8          1.5         0.3     setosa
140          6.9         3.1          5.4         2.1  virginica
94           5.0         2.3          3.3         1.0 versicolor
71           5.9         3.2          4.8         1.8 versicolor
61           5.0         2.0          3.5         1.0 versicolor
104          6.3         2.9          5.6         1.8  virginica
109          6.7         2.5          5.8         1.8  virginica
27           5.0         3.4          1.6         0.4     setosa
121          6.9         3.2          5.7         2.3  virginica
60           5.2         2.7          3.9         1.4 versicolor
65           5.6         2.9          3.6         1.3 versicolor
36           5.0         3.2          1.2         0.2     setosa
150          5.9         3.0          5.1         1.8  virginica
19           5.7         3.8          1.7         0.3     setosa
9            4.4         2.9          1.4         0.2     setosa
134          6.3         2.8          5.1         1.5  virginica
30           4.7         3.2          1.6         0.2     setosa
52           6.4         3.2          4.5         1.5 versicolor
95           5.6         2.7          4.2         1.3 versicolor
38           4.9         3.6          1.4         0.1     setosa
83           5.8         2.7          3.9         1.2 versicolor
141          6.7         3.1          5.6         2.4  virginica
21           5.4         3.4          1.7         0.2     setosa
105          6.5         3.0          5.8         2.2  virginica
113          6.8         3.0          5.5         2.1  virginica
13           4.8         3.0          1.4         0.1     setosa
69           6.2         2.2          4.5         1.5 versicolor
110          7.2         3.6          6.1         2.5  virginica
118          7.7         3.8          6.7         2.2  virginica
73           6.3         2.5          4.9         1.5 versicolor
16           5.7         4.4          1.5         0.4     setosa
11           5.4         3.7          1.5         0.2     setosa
67           5.6         3.0          4.5         1.5 versicolor
> sampling_list$test
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            5.1         3.5          1.4         0.2     setosa
7            4.6         3.4          1.4         0.3     setosa
12           4.8         3.4          1.6         0.2     setosa
15           5.8         4.0          1.2         0.2     setosa
18           5.1         3.5          1.4         0.3     setosa
23           4.6         3.6          1.0         0.2     setosa
24           5.1         3.3          1.7         0.5     setosa
29           5.2         3.4          1.4         0.2     setosa
31           4.8         3.1          1.6         0.2     setosa
33           5.2         4.1          1.5         0.1     setosa
34           5.5         4.2          1.4         0.2     setosa
37           5.5         3.5          1.3         0.2     setosa
39           4.4         3.0          1.3         0.2     setosa
44           5.0         3.5          1.6         0.6     setosa
45           5.1         3.8          1.9         0.4     setosa
46           4.8         3.0          1.4         0.3     setosa
53           6.9         3.1          4.9         1.5 versicolor
58           4.9         2.4          3.3         1.0 versicolor
59           6.6         2.9          4.6         1.3 versicolor
64           6.1         2.9          4.7         1.4 versicolor
68           5.8         2.7          4.1         1.0 versicolor
74           6.1         2.8          4.7         1.2 versicolor
75           6.4         2.9          4.3         1.3 versicolor
76           6.6         3.0          4.4         1.4 versicolor
77           6.8         2.8          4.8         1.4 versicolor
78           6.7         3.0          5.0         1.7 versicolor
81           5.5         2.4          3.8         1.1 versicolor
82           5.5         2.4          3.7         1.0 versicolor
85           5.4         3.0          4.5         1.5 versicolor
89           5.6         3.0          4.1         1.3 versicolor
91           5.5         2.6          4.4         1.2 versicolor
99           5.1         2.5          3.0         1.1 versicolor
112          6.4         2.7          5.3         1.9  virginica
114          5.7         2.5          5.0         2.0  virginica
120          6.0         2.2          5.0         1.5  virginica
124          6.3         2.7          4.9         1.8  virginica
125          6.7         3.3          5.7         2.1  virginica
127          6.2         2.8          4.8         1.8  virginica
128          6.1         3.0          4.9         1.8  virginica
129          6.4         2.8          5.6         2.1  virginica
136          7.7         3.0          6.1         2.3  virginica
145          6.7         3.3          5.7         2.5  virginica
146          6.7         3.0          5.2         2.3  virginica
147          6.3         2.5          5.0         1.9  virginica
148          6.5         3.0          5.2         2.0  virginica
> sampling_list$seed
[1] 1234
> 
> 
> 
> cleanEx()
> nameEx("scalling")
> ### * scalling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scalling
> ### Title: Converting coefficients of logistic regression into scores for
> ###   scorecard building
> ### Aliases: scalling
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> num_cat <- num_to_cat(base = data,num_woe_table = iv_table_list$num_woe_table)
> log_model <- glm(Y ~ ., data = num_cat, family = "binomial")
> scaling_tab <- scalling(base = num_cat,target = "Y",model = log_model)
> 
> 
> 
> cleanEx()
> nameEx("scoring")
> ### * scoring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scoring
> ### Title: Scoring a dataset with class based on a scalling logic to arrive
> ###   at final score
> ### Aliases: scoring
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> x <- c("Sepal.Length","Sepal.Width","Petal.Length","Petal.Width")
> iv_table_list <- iv_table(base = data,target = "Y",num_var_name = x,cat_var_name = "Species")
> num_cat <- num_to_cat(base = data,num_woe_table = iv_table_list$num_woe_table)
> log_model <- glm(Y ~ ., data = num_cat, family = "binomial")
> scaling_tab <- scalling(base = num_cat,target = "Y",model = log_model)
> score_tab <- scoring(base = num_cat,target = "Y",scalling = scaling_tab)
> 
> 
> 
> cleanEx()
> nameEx("support_vector_parameters")
> ### * support_vector_parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: support_vector_parameters
> ### Title: Hyperparameter optimisation or parameter tuning for Suppert
> ###   Vector Machine by grid search
> ### Aliases: support_vector_parameters
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> svm_params_list <- support_vector_parameters(base = data,target = "Y",gamma = 0.1,
+                    cost = 0.1,kernel = "radial")
[1] 1
> svm_params_list$error_tab_detailed
  kernel degree gamma cost    mean_abs_error     mean_sq_error
1 radial      2   0.1  0.1 0.406666666666667 0.406666666666667
  root_mean_sq_error cv         runtime
1  0.637704215656966  1 0.01139712 secs
> svm_params_list$error_tab_summary
  kernel degree gamma cost    mean_abs_error     mean_sq_error
1 radial      2   0.1  0.1 0.406666666666667 0.406666666666667
  root_mean_sq_error runtime_sec
1  0.637704215656966  0.01139712
> svm_params_list$best_kernel
[1] "radial"
> svm_params_list$best_degree
[1] "2"
> svm_params_list$best_gamma
[1] "0.1"
> svm_params_list$best_cost
[1] "0.1"
> svm_params_list$runtime
[1] 0.01139712
> 
> 
> 
> cleanEx()

detaching ‘package:RSQLite’

> nameEx("univariate")
> ### * univariate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: univariate
> ### Title: Univariate analysis of variables
> ### Aliases: univariate
> 
> ### ** Examples
> 
> data <- iris
> data$Species <- as.character(data$Species)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> 
> univariate_list <- univariate(base = data,target = "Y",threshold = 0.95)
> univariate_list$univar_table
           var var_min var_max     mean median var_vals      type count_missing
1 Sepal.Length     4.3     7.9 5.843333   5.80       35   numeric             0
2  Sepal.Width     2.0     4.4 3.057333   3.00       23   numeric             0
3 Petal.Length     1.0     6.9 3.758000   4.35       43   numeric             0
4  Petal.Width     0.1     2.5 1.199333   1.30       22   numeric             0
5      Species      NA      NA       NA     NA        3 character             0
  perc_missing max_pop_conc        corr
1            0   0.06666667 -0.01766515
2            0   0.17333333 -0.12761197
3            0   0.08666667  0.01282366
4            0   0.19333333  0.05705739
5            0   0.33333333          NA
> univariate_list$num_var_name
[1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width" 
> univariate_list$char_var_name
[1] "Species"
> univariate_list$sparse_var_name
character(0)
> 
> 
> 
> cleanEx()
> nameEx("vif_filter")
> ### * vif_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vif_filter
> ### Title: Removing multicollinearity from a model using vif test
> ### Aliases: vif_filter
> 
> ### ** Examples
> 
> data <- iris
> suppressWarnings(RNGversion('3.5.0'))
> set.seed(11)
> data$Y <- sample(0:1,size=nrow(data),replace=TRUE)
> vif_data_list <- vif_filter(base = data,target = "Y")
> vif_data_list$vif_table
             vif.log_model.
Sepal.Length       3.332934
Sepal.Width        1.285032
Petal.Width        3.760406
> vif_data_list$model

Call:  glm(formula = as.formula(formula), family = "binomial", data = base2)

Coefficients:
 (Intercept)  Sepal.Length   Sepal.Width   Petal.Width  
     -0.2531       -0.2818        0.2126        0.7191  

Degrees of Freedom: 149 Total (i.e. Null);  146 Residual
Null Deviance:	    202.7 
Residual Deviance: 198.4 	AIC: 206.4
> vif_data_list$retain_var_list
[1] "Sepal.Length" "Sepal.Width"  "Petal.Width"  "Y"           
> vif_data_list$dropped_var_list
[1] "Petal.Length" "Species"     
> vif_data_list$threshold
[1] 2
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.389 0.542 4.043 0.009 0.019 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
