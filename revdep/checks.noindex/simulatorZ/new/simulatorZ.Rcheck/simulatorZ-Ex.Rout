
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simulatorZ"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('simulatorZ')
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians


Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum

Loading required package: survival
Loading required package: CoxBoost
Loading required package: Matrix

Attaching package: ‘Matrix’

The following object is masked from ‘package:S4Vectors’:

    expand

Loading required package: prodlim
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cvSubsets")
> ### * cvSubsets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cvSubsets
> ### Title: cvSubsets
> ### Aliases: cvSubsets
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> 
> 
> 
> id <- cvSubsets(E.MTAB.386_eset, 3)
> 
> 
> subsets <- lapply(1:3, function(i){E.MTAB.386_eset[1:10, id[[i]]]})
> 
> 
> sapply(subsets, dim)
         [,1] [,2] [,3]
Features   10   10   10
Samples    43   43   43
> 
> 
> rm(subsets)
> 
> 
> 
> 
> 
> ## Number of observations in the set does not need to be a multiple of
> 
> 
> ## the fold parameter
> 
> 
> id2 <- cvSubsets(E.MTAB.386_eset, 5)
> 
> 
> subsets <- lapply(1:5, function(j){E.MTAB.386_eset[1:10, id2[[j]]]})
> 
> 
> sapply(subsets, dim)
         [,1] [,2] [,3] [,4] [,5]
Features   10   10   10   10   10
Samples    26   26   26   26   25
> 
> 
> rm(subsets)
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("funCV")
> ### * funCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: funCV
> ### Title: funCV
> ### Aliases: funCV
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> library(GenomicRanges)
> 
> 
> set.seed(8)
> 
> 
> data( E.MTAB.386_eset )
> 
> 
> eset <- E.MTAB.386_eset[1:100, 1:30]
> 
> 
> rm(E.MTAB.386_eset)
> 
> 
> 
> 
> 
> time <- eset$days_to_death
> 
> 
> cens.chr <- eset$vital_status
> 
> 
> cens <- rep(0, length(cens.chr))
> 
> 
> cens[cens.chr=="living"] <- 1
> 
> 
> y <- Surv(time, cens)  
> 
> 
> y1 <- cbind(time, cens)
> 
> 
> 
> 
> 
> nrows <- 200; ncols <- 6
> 
> 
> counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
> 
> 
> rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
+ 
+ 
+                      IRanges(floor(runif(200, 1e5, 1e6)), width=100),
+ 
+ 
+                      strand=sample(c("+", "-"), 200, TRUE))
> 
> 
> colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
+ 
+ 
+                      row.names=LETTERS[1:6])
> 
> 
> sset <- SummarizedExperiment(assays=SimpleList(counts=counts),
+ 
+ 
+                              rowRanges=rowRanges, colData=colData)
> 
> 
> time <- c(1588,1929,1813,1542,1830,1775)  
> 
> 
> cens <- c(1,0,1,1,1,1)
> 
> 
> y.vars <- Surv(time, cens)
> 
> 
> 
> 
> 
> funCV(eset, 3, y)
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.7561728
> 
> 
> funCV(exprs(eset), 3, y1)
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.3652661
> 
> 
> funCV(sset, 3, y.vars)
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.6666667
> 
> 
> ## any training function will do as long as it takes the gene expression matrix X
> 
> 
> ## and response variable y(matrix, data.frame or Surv object) as parameters, and
> 
> 
> ## return the coefficients as its value
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("geneFilter")
> ### * geneFilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geneFilter
> ### Title: geneFilter
> ### Aliases: geneFilter
> 
> ### ** Examples
> 
> 
> 
> set.seed(8)
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> library(GenomicRanges)
> 
> 
> data(GSE17260_eset)
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> data(GSE14764_eset)
> 
> 
> ## to save time, we take a small subset from each dataset
> 
> 
> esets.list <- list(GSE17260=GSE17260_eset[1:50, 1:10], 
+ 
+ 
+                    E.MTAB.386=E.MTAB.386_eset[1:50, 1:10], 
+ 
+ 
+                    GSE14764=GSE14764_eset[1:50, 1:10])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset, GSE17260_eset)
> 
> 
> 
> 
> 
> result.set <- geneFilter(esets.list, 0.1)
[1] "1--2"
[1] "1--3"
[1] "2--1"
[1] "2--3"
[1] "3--1"
[1] "3--2"
> 
> 
> dim(result.set[[1]])
Features  Samples 
      20       10 
> 
> 
> 
> 
> 
> ## as we cannot calculate correlation with one set, this function just 
> 
> 
> ## delivers the same set if esets has length 1
> 
> 
> result.oneset <- geneFilter(esets.list[1])
> 
> 
> dim(result.oneset[[1]])
Features  Samples 
      50       10 
> 
> 
> 
> 
> 
> 
> 
> 
> ## Support matrices
> 
> 
> X.list <- lapply(esets.list, function(eset){
+ 
+ 
+   return(exprs(eset)) ## Columns represent samples!
+ 
+ 
+ })
> 
> 
> result.set <- geneFilter(X.list, 0.1)
[1] "1--2"
[1] "1--3"
[1] "2--1"
[1] "2--3"
[1] "3--1"
[1] "3--2"
> 
> 
> dim(result.set[[1]])
[1] 20 10
> 
> 
> 
> 
> 
> ## Support RangedSummarizedExperiment
> 
> 
> nrows <- 200; ncols <- 6
> 
> 
> counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
> 
> 
> rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
+ 
+ 
+                      IRanges(floor(runif(200, 1e5, 1e6)), width=100),
+ 
+ 
+                      strand=sample(c("+", "-"), 200, TRUE))
> 
> 
> colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
+ 
+ 
+                      row.names=LETTERS[1:6])
> 
> 
> sset <- SummarizedExperiment(assays=SimpleList(counts=counts),
+ 
+ 
+                              rowRanges=rowRanges, colData=colData)
> 
> 
> s.list <- list(sset, sset)
> 
> 
> result.set <- geneFilter(s.list, 0.9) 
[1] "1--2"
[1] "2--1"
> 
> 
> ## the same set should resemble each other, no genes filtered
> 
> 
> dim(assay(result.set[[1]]))
[1] 200   6
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("getTrueModel")
> ### * getTrueModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTrueModel
> ### Title: getTrueModel
> ### Aliases: getTrueModel
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> data(GSE14764_eset)
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> esets.list <- list(GSE14764=GSE14764_eset[1:500, 1:20], 
+ 
+ 
+                    E.MTAB.386=E.MTAB.386_eset[1:500, 1:20])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset)
> 
> 
> 
> 
> 
> ## simulate on multiple ExpressionSets
> 
> 
> set.seed(8) 
> 
> 
> 
> 
> 
> y.list <- lapply(esets.list, function(eset){
+ 
+ 
+   time <- eset$days_to_death
+ 
+ 
+   cens.chr <- eset$vital_status
+ 
+ 
+   cens <- rep(0, length(cens.chr))
+ 
+ 
+   cens[cens.chr=="living"] <- 1
+ 
+ 
+   return(Surv(time, cens))
+ 
+ 
+ })
> 
> 
>    
> 
> 
> res1 <- getTrueModel(esets.list, y.list, 100)
[1] 1
[1] 2
> 
> 
> ## Get true model from one set
> 
> 
> res2 <- getTrueModel(esets.list[1], y.list[1], 100)
[1] 1
> 
> 
> names(res2)
[1] "beta"  "grid"  "survH" "censH" "lp"   
> 
> 
> res2$lp
[[1]]
 [1]  -9.158554  -9.044381  -8.070647  -8.000457  -9.146482  -9.408688
 [7]  -8.171495  -8.411204 -11.877956  -8.149804 -10.263080 -10.675690
[13]  -9.272131  -9.091480 -10.705788  -9.295409  -9.226835  -9.902897
[19] -10.120790  -8.839664

> 
> 
> ## note that y.list[1] cannot be replaced by y.list[[1]]
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("masomenos")
> ### * masomenos
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: masomenos
> ### Title: masomenos
> ### Aliases: masomenos
> 
> ### ** Examples
> 
> 
> 
> set.seed(8)
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> data( E.MTAB.386_eset )
> 
> 
> eset <- E.MTAB.386_eset[1:100, 1:30]
> 
> 
> rm(E.MTAB.386_eset)
> 
> 
> 
> 
> 
> X <- t(exprs(eset))
> 
> 
> 
> 
> 
> time <- eset$days_to_death
> 
> 
> cens <- sample(0:1, 30, replace=TRUE)
> 
> 
> y <- Surv(time, cens)
> 
> 
> 
> 
> 
> beta <- masomenos(X=X, y=y)
> 
> 
> beta
  [1]  0.01 -0.01 -0.01 -0.01 -0.01 -0.01  0.01  0.01 -0.01  0.01 -0.01  0.01
 [13]  0.01  0.01 -0.01  0.01 -0.01  0.01 -0.01 -0.01  0.01  0.01 -0.01  0.01
 [25]  0.01  0.01 -0.01 -0.01  0.01 -0.01 -0.01 -0.01 -0.01  0.01  0.01  0.01
 [37] -0.01 -0.01  0.01  0.01 -0.01  0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01
 [49] -0.01 -0.01  0.01 -0.01 -0.01 -0.01 -0.01  0.01  0.01  0.01 -0.01 -0.01
 [61]  0.01  0.01  0.01  0.01 -0.01 -0.01 -0.01  0.01  0.01 -0.01 -0.01  0.01
 [73]  0.01  0.01  0.01  0.01  0.01 -0.01  0.01  0.01  0.01  0.01  0.01 -0.01
 [85]  0.01  0.01  0.01  0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01  0.01 -0.01
 [97] -0.01  0.01  0.01 -0.01
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("plusMinus")
> ### * plusMinus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plusMinus
> ### Title: plusMinus
> ### Aliases: plusMinus
> 
> ### ** Examples
> 
> 
> 
> set.seed(8)
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> data( E.MTAB.386_eset )
> 
> 
> eset <- E.MTAB.386_eset[1:100, 1:30]
> 
> 
> rm(E.MTAB.386_eset)
> 
> 
> 
> 
> 
> X <- t(exprs(eset))
> 
> 
> 
> 
> 
> time <- eset$days_to_death
> 
> 
> cens <- sample(0:1, 30, replace=TRUE)
> 
> 
> y <- Surv(time, cens)
> 
> 
> 
> 
> 
> beta <- plusMinus(X, y)
> 
> 
> beta
           A2M         A4GALT          A4GNT           AAAS           AACS 
          0.01          -0.01          -0.01          -0.01          -0.01 
         AADAC          AADAT           AAK1          AAMDC           AAMP 
         -0.01           0.01           0.01          -0.01           0.01 
         AANAT           AARS          AARS2          AASDH       AASDHPPT 
         -0.01           0.01           0.01           0.01          -0.01 
          AATF           ABAT          ABCA1         ABCA12          ABCA2 
          0.01          -0.01           0.01          -0.01          -0.01 
         ABCA3          ABCA4          ABCA5          ABCA8          ABCB1 
          0.01           0.01          -0.01           0.01           0.01 
        ABCB10          ABCB4  ABCB6///ATG9A          ABCB7          ABCB9 
          0.01          -0.01          -0.01           0.01          -0.01 
         ABCC1         ABCC10         ABCC12          ABCC4          ABCC5 
         -0.01          -0.01          -0.01           0.01           0.01 
         ABCC6          ABCC8          ABCD1          ABCD2          ABCD3 
          0.01          -0.01          -0.01           0.01           0.01 
         ABCE1          ABCF1          ABCF2          ABCF3          ABCG1 
         -0.01           0.01          -0.01          -0.01          -0.01 
         ABCG2          ABCG4         ABHD10         ABHD11        ABHD14A 
         -0.01          -0.01          -0.01          -0.01          -0.01 
       ABHD14B          ABHD2          ABHD3          ABHD4          ABHD5 
          0.01          -0.01          -0.01          -0.01          -0.01 
         ABHD6          ABHD8           ABI1           ABI2           ABI3 
          0.01           0.01           0.01          -0.01          -0.01 
        ABI3BP           ABL1           ABL2         ABLIM1         ABLIM2 
          0.01           0.01           0.01           0.01          -0.01 
        ABLIM3            ABO            ABR          ABTB1          ABTB2 
         -0.01          -0.01           0.01           0.01          -0.01 
         ACAA1          ACAA2          ACACA          ACACB         ACAD10 
         -0.01           0.01           0.01           0.01           0.01 
ACAD11///NPHP3          ACAD9          ACADL          ACADM         ACADSB 
          0.01           0.01          -0.01           0.01           0.01 
        ACADVL           ACAN          ACAP1          ACAP3          ACAT1 
          0.01           0.01           0.01          -0.01           0.01 
         ACBD3          ACBD6            ACD            ACE          ACER2 
          0.01           0.01           0.01          -0.01          -0.01 
         ACER3           ACHE          ACIN1          ACKR2          ACKR3 
         -0.01          -0.01          -0.01          -0.01           0.01 
         ACKR4           ACLY           ACO1           ACO2         ACOT11 
         -0.01          -0.01           0.01           0.01          -0.01 
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("rowCoxTests")
> ### * rowCoxTests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rowCoxTests
> ### Title: rowCoxTests
> ### Aliases: rowCoxTests
> 
> ### ** Examples
> 
> 
> 
> #test
> 
> 
> ##regressor-matrix (gene expressions)
> 
> 
> X<-matrix(rnorm(1e6),nrow=10000)
> 
> 
> #seed
> 
> 
> set.seed(123)
> 
> 
> #times
> 
> 
> time<-rnorm(n=ncol(X),mean=100)
> 
> 
> #censoring(1->death)
> 
> 
> status<-rbinom(n=ncol(X),size=1, prob=0.8)
> 
> 
> 
> 
> 
> ##survival object
> 
> 
> y<-Surv(time,status)
> 
> 
> 
> 
> 
> ## Do 10,000 Cox regressions:
> 
> 
> system.time(output <- rowCoxTests(X=X,y=y, option="fast"))
   user  system elapsed 
  0.193   0.003   0.196 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("simBootstrap")
> ### * simBootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simBootstrap
> ### Title: simBootstrap
> ### Aliases: simBootstrap
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> library(GenomicRanges)
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> data(GSE14764_eset)
> 
> 
> esets.list <- list(E.MTAB.386=E.MTAB.386_eset[1:200, 1:20], GSE14764=GSE14764_eset[1:200, 1:20])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset)
> 
> 
> 
> 
> 
> ## simulate on multiple ExpressionSets
> 
> 
> set.seed(8) 
> 
> 
> 
> 
> 
> y.list <- lapply(esets.list, function(eset){
+ 
+ 
+   time <- eset$days_to_death
+ 
+ 
+   cens.chr <- eset$vital_status
+ 
+ 
+   cens <- rep(0, length(cens.chr))
+ 
+ 
+   cens[cens.chr=="living"] <- 1
+ 
+ 
+   return(Surv(time, cens))
+ 
+ 
+ })
> 
> 
> 
> 
> 
> simmodels <- simBootstrap(obj=esets.list, y.vars=y.list, 10, 100)
[1] 1
[1] 2
[1] 2 2
[1] "covariate: NULL"
[1] 1
[1] 2
> 
> 
> simmodels$obj.list[[1]]
ExpressionSet (storageMode: lockedEnvironment)
assayData: 200 features, 10 samples 
  element names: exprs 
protocolData: none
phenoData
  sampleNames: GSM368662 GSM368675 ... GSM368666 (10 total)
  varLabels: alt_sample_name unique_patient_ID ...
    uncurated_author_metadata (31 total)
  varMetadata: labelDescription
featureData
  featureNames: A1CF A2M ... ADAMTS13 (200 total)
  fvarLabels: probeset gene
  fvarMetadata: labelDescription
experimentData: use 'experimentData(object)'
  pubMedIds: 19294737 
Annotation: hgu133a 
> 
> 
> 
> 
> 
> # balance covariates
> 
> 
> simmodels <- simBootstrap(obj=esets.list, y.vars=y.list, 10, 100,
+ 
+ 
+                           balance.variables="tumorstage")
[1] 1
[1] 2
[1] 1 2
[1] "covariate: tumorstage"
[1] 1
[1] 2
> 
> 
> rm(esets.list, simmodels)
> 
> 
> 
> 
> 
> ## Support RangedSummarizedExperiment
> 
> 
> nrows <- 200; ncols <- 10
> 
> 
> counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
> 
> 
> rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
+ 
+ 
+                      IRanges(floor(runif(200, 1e5, 1e6)), width=100),
+ 
+ 
+                      strand=sample(c("+", "-"), 200, TRUE))
> 
> 
> colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 5),
+ 
+ 
+                      row.names=LETTERS[1:10])
> 
> 
> sset <- SummarizedExperiment(assays=SimpleList(counts=counts),
+ 
+ 
+                              rowRanges=rowRanges, colData=colData)
> 
> 
> 
> 
> 
> s.list <- list(sset[,1:5], sset[,6:10])
> 
> 
> time <- c(540, 527, 668, 587, 620, 540, 527, 668, 587, 620)
> 
> 
> cens <- c(1, 0, 0, 1, 0, 1, 0, 0, 1, 0)
> 
> 
> y.vars <- Surv(time, cens)
> 
> 
> y.vars <- list(y.vars[1:5,],y.vars[1:5,])
> 
> 
> simmodels <- simBootstrap(obj=s.list, y.vars=y.vars, 20, 100) 
[1] 1
[1] 2
[1] 1 2
[1] "covariate: NULL"
[1] 1
[1] 2
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("simData")
> ### * simData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simData
> ### Title: simData
> ### Aliases: simData
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> library(GenomicRanges)
> 
> 
> 
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> data(GSE14764_eset)
> 
> 
> esets.list <- list(E.MTAB.386=E.MTAB.386_eset[1:100, 1:10], GSE14764=GSE14764_eset[1:100, 1:10])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset)
> 
> 
> 
> 
> 
> ## simulate on multiple ExpressionSets
> 
> 
> set.seed(8)
> 
> 
> # one-step bootstrap: skip resampling set labels
> 
> 
> simmodels <- simData(esets.list, 20, type="one-step")  
[1] 1 2
[1] "covariate: NULL"
> 
> 
> # two-step-non-parametric bootstrap
> 
> 
> simmodels <- simData(esets.list, 10, type="two-steps")
[1] 1 2
[1] "covariate: NULL"
> 
> 
> 
> 
> 
> ## simulate one set
> 
> 
> simmodels <- simData(list(esets.list[[1]]), 10, type="two-steps")
[1] 1
[1] "covariate: NULL"
> 
> 
> 
> 
> 
> ## balancing covariates
> 
> 
> # single covariate
> 
> 
> simmodels <- simData(list(esets.list[[1]]), 5, balance.variables="tumorstage")
[1] 1
[1] "covariate: tumorstage"
> 
> 
> 
> 
> 
> # multiple covariates
> 
> 
> simmodels <- simData(list(esets.list[[1]]), 5, 
+ 
+ 
+                      balance.variables=c("tumorstage", "age_at_initial_pathologic_diagnosis"))  
[1] 1
[1] "covariate: tumorstage"                         
[2] "covariate: age_at_initial_pathologic_diagnosis"
> 
> 
> 
> 
> 
> ## Support matrices
> 
> 
> X.list <- lapply(esets.list, function(eset){
+ 
+ 
+   return(exprs(eset))
+ 
+ 
+ })
> 
> 
> simmodels <- simData(X.list, 20, type="two-steps")
[1] 1 2
[1] "covariate: NULL"
> 
> 
> 
> 
> 
> ## Support RangedSummarizedExperiment
> 
> 
> nrows <- 200; ncols <- 6
> 
> 
> counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
> 
> 
> rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
+ 
+ 
+                      IRanges(floor(runif(200, 1e5, 1e6)), width=100),
+ 
+ 
+                      strand=sample(c("+", "-"), 200, TRUE))
> 
> 
> colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
+ 
+ 
+                      row.names=LETTERS[1:6])
> 
> 
> sset <- SummarizedExperiment(assays=SimpleList(counts=counts),
+ 
+ 
+                              rowRanges=rowRanges, colData=colData)
> 
> 
> 
> 
> 
> s.list <- list(sset[,1:3], sset[,4:6])
> 
> 
> simmodels <- simData(s.list, 20, type="two-steps")
[1] 1 2
[1] "covariate: NULL"
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("simTime")
> ### * simTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simTime
> ### Title: simTime
> ### Aliases: simTime
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> data(GSE14764_eset)
> 
> 
> esets.list <- list(E.MTAB.386=E.MTAB.386_eset[1:100, 1:20], GSE14764=GSE14764_eset[1:100, 1:20])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset)
> 
> 
> 
> 
> 
> ## simulate on multiple ExpressionSets
> 
> 
> set.seed(8) 
> 
> 
> 
> 
> 
> y.list <- lapply(esets.list, function(eset){
+ 
+ 
+   time <- eset$days_to_death
+ 
+ 
+   cens.chr <- eset$vital_status
+ 
+ 
+   cens <- rep(0, length(cens.chr))
+ 
+ 
+   cens[cens.chr=="living"] <- 1
+ 
+ 
+   return(Surv(time, cens))
+ 
+ 
+ })
> 
> 
> 
> 
> 
> # To perform both parametric and non-parametric bootstrap, you can call simBootstrap()
> 
> 
> # or, you can divide the steps into:
> 
> 
> res <- getTrueModel(esets.list, y.list, 100)
[1] 1
[1] 2
> 
> 
> simmodels <- simData(obj=esets.list, y.vars=y.list, n.samples=10)
[1] 2 2
[1] "covariate: NULL"
> 
> 
> 
> 
> 
> # Then, use this function
> 
> 
> simmodels <- simTime(simmodels=simmodels, original.yvars=y.list, result=res) 
[1] 1
[1] 2
> 
> 
> 
> 
> 
> # it also supports performing only the parametrc bootstrap step on a list of expressionsets
> 
> 
> # but you need to construct the parameter by scratch
> 
> 
> res <- getTrueModel(esets.list, y.list, 100)
[1] 1
[1] 2
> 
> 
> setsID <- seq_along(esets.list)
> 
> 
> indices <- list()
> 
> 
> for(i in setsID){
+ 
+ 
+   indices[[i]] <- seq_along(sampleNames(esets.list[[i]])) 
+ 
+ 
+ }
> 
> 
> simmodels <- list(obj=esets.list, y.vars=y.list, indices=indices, setsID=setsID)
> 
> 
> 
> 
> 
> new.simmodels <- simTime(simmodels=simmodels, original.yvars=y.list, result=res)  
[1] 1
[1] 2
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> nameEx("zmatrix")
> ### * zmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zmatrix
> ### Title: zmatrix
> ### Aliases: zmatrix
> 
> ### ** Examples
> 
> 
> 
> library(curatedOvarianData)
Loading required package: affy
> 
> 
> library(GenomicRanges)
> 
> 
> data(E.MTAB.386_eset)
> 
> 
> data(GSE14764_eset)
> 
> 
> esets.list <- list(E.MTAB.386=E.MTAB.386_eset[1:100, 1:30], GSE14764=GSE14764_eset[1:100, 1:30])
> 
> 
> rm(E.MTAB.386_eset, GSE14764_eset)
> 
> 
> 
> 
> 
> ## simulate on multiple ExpressionSets
> 
> 
> set.seed(8) 
> 
> 
> 
> 
> 
> y.list <- lapply(esets.list, function(eset){
+ 
+ 
+   time <- eset$days_to_death
+ 
+ 
+   cens.chr <- eset$vital_status
+ 
+ 
+   cens <- rep(0, length(cens.chr))
+ 
+ 
+   cens[cens.chr=="living"] <- 1
+ 
+ 
+   return(Surv(time, cens))
+ 
+ 
+ })
> 
> 
> 
> 
> 
> # generate on original ExpressionSets
> 
> 
> z <- zmatrix(esets.list, y.list, 3)
[1] "CV: 1"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.7738095
[1] "train: 1 test: 2"
[1] 0.3522013
[1] "train: 2 test: 1"
[1] 0.2868217
[1] "CV: 2"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.6147994
> 
> 
> 
> 
> 
> # generate on simulated ExpressionSets
> 
> 
> simmodels <- simBootstrap(esets.list, y.list, 100, 100)
[1] 1
[1] 2
[1] 1 2
[1] "covariate: NULL"
[1] 1
[1] 2
> 
> 
> z <- zmatrix(simmodels$obj.list, simmodels$y.vars.list, 3)
[1] "CV: 1"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.7651666
[1] "train: 1 test: 2"
[1] 0.5114658
[1] "train: 2 test: 1"
[1] 0.5761452
[1] "CV: 2"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.5047911
> 
> 
> 
> 
> 
> # support matrix
> 
> 
> X.list <- lapply(esets.list, function(eset){
+ 
+ 
+   return(exprs(eset)) ### columns represent samples !!
+ 
+ 
+ }) 
> 
> 
> z <- zmatrix(X.list, y.list, 3)
[1] "CV: 1"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.825
[1] "train: 1 test: 2"
[1] 0.3522013
[1] "train: 2 test: 1"
[1] 0.2868217
[1] "CV: 2"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] 0.5767936
> 
> 
> 
> 
> 
> # support RangedSummarizedExperiment
> 
> 
> nrows <- 200; ncols <- 6
> 
> 
> counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
> 
> 
> rowRanges <- GRanges(rep(c("chr1", "chr2"), c(50, 150)),
+ 
+ 
+                      IRanges(floor(runif(200, 1e5, 1e6)), width=100),
+ 
+ 
+                      strand=sample(c("+", "-"), 200, TRUE))
> 
> 
> colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
+ 
+ 
+                      row.names=LETTERS[1:6])
> 
> 
> sset <- SummarizedExperiment(assays=SimpleList(counts=counts),
+ 
+ 
+                              rowRanges=rowRanges, colData=colData)
> 
> 
> 
> 
> 
> time <- sample(4500:4700, 6, replace=TRUE)
> 
> 
> cens <- sample(0:1, 6, replace=TRUE)
> 
> 
> y.vars <- Surv(time, cens)
> 
> 
> 
> 
> 
> z <- zmatrix(list(sset[,1:3], sset[,4:6]), list(y.vars[1:3,],y.vars[4:6,]), 3)
[1] "CV: 1"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] NaN
[1] "train: 1 test: 2"
[1] 1
[1] "train: 2 test: 1"
[1] 0.5
[1] "CV: 2"
[1] "fold = 1"
[1] "fold = 2"
[1] "fold = 3"
[1] NaN
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:curatedOvarianData’, ‘package:affy’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.955 0.79 18.948 0.002 0.006 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
