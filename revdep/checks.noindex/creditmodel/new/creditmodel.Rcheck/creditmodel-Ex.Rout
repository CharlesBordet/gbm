
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "creditmodel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('creditmodel')
Package 'creditmodel' version 1.2.2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PCA_reduce")
> ### * PCA_reduce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PCA_reduce
> ### Title: PCA Dimension Reduction
> ### Aliases: PCA_reduce
> 
> ### ** Examples
> 
> ## Not run: 
> ##D num_x_list = get_names(dat = UCICreditCard, types = c('numeric'),
> ##D ex_cols = "ID$|date$|default.payment.next.month$", get_ex = FALSE)
> ##D  PCA_dat = PCA_reduce(train = UCICreditCard[num_x_list])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("as_percent")
> ### * as_percent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_percent
> ### Title: Percent Format
> ### Aliases: as_percent
> 
> ### ** Examples
> 
> as_percent(0.2363, digits = 2)
[1] "24%"
> as_percent(1)
[1] "100%"
> 
> 
> 
> cleanEx()
> nameEx("char_cor_vars")
> ### * char_cor_vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: char_cor_vars
> ### Title: Cramer's V matrix between categorical variables.
> ### Aliases: char_cor_vars char_cor
> 
> ### ** Examples
> 
> ## Not run: 
> ##D char_x_list = get_names(dat = UCICreditCard,
> ##D types = c('factor', 'character'),
> ##D ex_cols = "ID$|date$|default.payment.next.month$", get_ex = FALSE)
> ##D  char_cor(dat = UCICreditCard[char_x_list])
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("char_to_num")
> ### * char_to_num
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: char_to_num
> ### Title: character to number
> ### Aliases: char_to_num
> 
> ### ** Examples
> 
> dat_sub = lendingclub[c('dti_joint',	'emp_length')]
> str(dat_sub)
'data.frame':	31766 obs. of  2 variables:
 $ dti_joint : chr  "Missing" "Missing" "9.02" "Missing" ...
 $ emp_length: chr  "3 years" "2 years" "2 years" "10+ years" ...
> #variables that are converted to numbers containing strings
> dat_sub = char_to_num(dat_sub)
[30m-- Transfering character variables which are actually numerical to numeric[39m
> str(dat_sub)
'data.frame':	31766 obs. of  2 variables:
 $ dti_joint : num  NA NA 9.02 NA NA NA NA NA NA NA ...
 $ emp_length: chr  "3 years" "2 years" "2 years" "10+ years" ...
> 
> 
> 
> cleanEx()
> nameEx("check_rules")
> ### * check_rules
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_rules
> ### Title: check rules
> ### Aliases: check_rules
> 
> ### ** Examples
> 
> train_test = train_test_split(UCICreditCard, split_type = "Random", prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> dat_train$default.payment.next.month = as.numeric(dat_train$default.payment.next.month)
> rules_list = get_ctree_rules(tree_fit = NULL, train_dat = dat_train[, 8:26],
+                              target ="default.payment.next.month", test_dat = dat_test)[1:3,2]
> check_rules(rules_list = rules_list, target = "default.payment.next.month",
+ test_dat = dat_test, value = NULL)
  rules_no
1        1
2        2
3        3
4    Total
                                                                                                                                                                      rules
1                                                                                                       PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 15550.5 & PAY_AMT3 >= 631.5
2 BILL_AMT1 < 135411 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT1 >= 4462.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 >= 1881
3  BILL_AMT1 < 135411 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT1 < 4462.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 >= 1881
4                                                                                                                                                                        --
  #total total_1 %total_1 #hit   %hit  FN TP   TN   FP Recall Accuracy
1   6000    1301   21.68%  154  2.57% 141 13 4558 1288  8.44%   76.18%
2   6000    1301   21.68%  303  5.05% 277 26 4422 1275  8.58%   74.13%
3   6000    1301   21.68%  540     9% 494 46 4205 1255  8.52%   70.85%
4   6000    1301   21.68%  997 16.62% 912 85 3787 1216  8.53%   64.53%
  Precision Specificity %residue F1_score Lift
1        1%      22.03%   97.43%   0.0179 0.39
2        2%      22.38%   94.95%   0.0324  0.4
3     3.54%      22.99%      91%     0.05 0.39
4     6.53%      24.31%   83.38%    0.074 0.39
> 
> 
> 
> 
> cleanEx()
> nameEx("checking_data")
> ### * checking_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checking_data
> ### Title: Checking Data
> ### Aliases: checking_data
> 
> ### ** Examples
> 
> dat = checking_data(dat = UCICreditCard, target = "default.payment.next.month")
> 
> 
> 
> cleanEx()
> nameEx("cor_heat_plot")
> ### * cor_heat_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cor_heat_plot
> ### Title: Correlation Heat Plot
> ### Aliases: cor_heat_plot
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard,
+ split_type = "Random", prop = 0.8,save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> cor_mat = cor(dat_train[,8:12],use = "complete.obs")
> cor_heat_plot(cor_mat)
Warning: Continuous limits supplied to discrete scale.
Did you mean `limits = factor(...)` or `scale_*_continuous()`?
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
> 
> 
> 
> cleanEx()
> nameEx("cor_plot")
> ### * cor_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cor_plot
> ### Title: Correlation Plot
> ### Aliases: cor_plot
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard,
+ split_type = "Random", prop = 0.8,save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> cor_plot(dat_train[,8:12],plot_show = TRUE)
Warning: Continuous limits supplied to discrete scale.
Did you mean `limits = factor(...)` or `scale_*_continuous()`?
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars2` is discouraged. Use `Vars2` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$Vars1` is discouraged. Use `Vars1` instead.
Warning: Use of `cor_list$cor` is discouraged. Use `cor` instead.
> 
> 
> 
> cleanEx()
> nameEx("cross_table")
> ### * cross_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cross_table
> ### Title: cross_table
> ### Aliases: cross_table
> 
> ### ** Examples
> 
> cross_table(dat = UCICreditCard, cross_x = "SEX",cross_y = "AGE",
+  target = "default.payment.next.month", cross_type = "bad_pct",value = "LIMIT_BAL")
     SEX 01.(-Inf,27] 02.(27,31] 03.(31,37] 04.(37,43] 05.(43, Inf]  sum_x
1 female          19%     15.63%     17.42%     20.29%       20.65% 18.61%
2   male       18.29%     14.77%     15.46%     15.71%       18.15% 16.29%
3  sum_y       18.48%     15.08%     16.22%     17.61%       19.31% 17.18%
> cross_table(dat = UCICreditCard, cross_x = c("SEX", "MARRIAGE"), cross_y = "AGE",
+ target = "default.payment.next.month", cross_type = "bad_pct",value = "LIMIT_BAL")
     SEX MARRIAGE/AGE 01.(-Inf,27] 02.(27,31] 03.(31,37] 04.(37,43]
1 female            D       26.25%      1.41%     10.29%        32%
2 female            M       18.33%     14.84%     16.43%     18.76%
3 female            N       25.75%     19.39%     18.77%     20.77%
4 female      missing       67.57%         0%         0%         0%
5   male            D       21.05%     26.83%      7.67%     10.78%
6   male            M       17.51%     14.27%     14.55%     15.39%
7   male            N       22.81%     16.15%     16.35%     15.86%
8   male      missing           0%         0%         0%     47.17%
9  sum_y        sum_y       18.48%     15.08%     16.22%     17.61%
  05.(43, Inf]  sum_x
1       38.05%  28.1%
2       17.22% 16.58%
3       21.12% 20.42%
4           0% 13.74%
5       14.94% 13.99%
6       16.91% 15.52%
7       18.64% 17.14%
8         5.7%  6.72%
9       19.31% 17.18%
> 
> 
> 
> cleanEx()
> nameEx("customer_segmentation")
> ### * customer_segmentation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: customer_segmentation
> ### Title: Customer Segmentation
> ### Aliases: customer_segmentation
> 
> ### ** Examples
> 
> clust <- customer_segmentation(dat = lendingclub[1:10000,20:30],
+                               x_list = NULL, ex_cols = "id$|loan_status",
+                               cluster_control = list(meth = "FCM", kc = 2),  save_data = FALSE,
+                               tree_control = list(minbucket = round(nrow(lendingclub) / 10)),
+                               file_name = NULL, dir_path = tempdir())
> 
> 
> 
> cleanEx()
> nameEx("cut_equal")
> ### * cut_equal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cut_equal
> ### Title: Generating Initial Equal Size Sample Bins
> ### Aliases: cut_equal
> 
> ### ** Examples
> 
> #equal sample size breaks
> equ_breaks = cut_equal(dat = UCICreditCard[, "PAY_AMT2"], g = 10)
> 
> 
> 
> 
> cleanEx()
> nameEx("cv_split")
> ### * cv_split
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cv_split
> ### Title: Stratified Folds
> ### Aliases: cv_split
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> 
> 
> 
> cleanEx()
> nameEx("data_cleansing")
> ### * data_cleansing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data_cleansing
> ### Title: Data Cleaning
> ### Aliases: data_cleansing
> 
> ### ** Examples
> 
> #data cleaning
> dat_cl = data_cleansing(dat = UCICreditCard[1:2000,],
+                        target = "default.payment.next.month",
+                        x_list = NULL,
+                        obs_id = "ID",
+                        occur_time = "apply_date",
+                        ex_cols = c("PAY_6|BILL_"),
+                        outlier_proc = TRUE,
+                        missing_proc = TRUE,
+                        low_var = TRUE,
+                        save_data = FALSE)
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> 
> 
> 
> cleanEx()
> nameEx("data_exploration")
> ### * data_exploration
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data_exploration
> ### Title: Data Exploration
> ### Aliases: data_exploration
> 
> ### ** Examples
> 
> data_ex = data_exploration(dat = UCICreditCard[1:1000,])
[30m--Data summary[39m
● [90mObservations      : 1000[39m
● [90mNumeric_variables : 22[39m
● [90mCategory_variables: 4[39m
● [90mDate_variables    : 0[39m
> 
> 
> 
> cleanEx()
> nameEx("date_cut")
> ### * date_cut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: date_cut
> ### Title: Date Time Cut Point
> ### Aliases: date_cut
> 
> ### ** Examples
> 
> date_cut(dat_time = lendingclub$issue_d, pct = 0.8)
[1] "2018-08-01"
> #"2018-08-01"
> 
> 
> 
> cleanEx()
> nameEx("de_one_hot_encoding")
> ### * de_one_hot_encoding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: de_one_hot_encoding
> ### Title: Recovery One-Hot Encoding
> ### Aliases: de_one_hot_encoding
> 
> ### ** Examples
> 
> #one hot encoding
> dat1 = one_hot_encoding(dat = UCICreditCard,
+ cat_vars = c("SEX", "MARRIAGE"),
+ merge_cat = TRUE, na_act = TRUE)
> #de one hot encoding
> dat2 = de_one_hot_encoding(dat_one_hot = dat1,
+ cat_vars = c("SEX","MARRIAGE"),
+ na_act = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("de_percent")
> ### * de_percent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: de_percent
> ### Title: Recovery Percent Format
> ### Aliases: de_percent
> 
> ### ** Examples
> 
> de_percent("24%")
[1] 0.24
> 
> 
> 
> cleanEx()
> nameEx("digits_num")
> ### * digits_num
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: digits_num
> ### Title: Number of digits
> ### Aliases: digits_num
> 
> ### ** Examples
> 
> ## Not run: 
> ##D digits_num(lendingclub[,"dti"])
> ##D # 7
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("entropy_weight")
> ### * entropy_weight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: entropy_weight
> ### Title: Entropy Weight Method
> ### Aliases: entropy_weight
> 
> ### ** Examples
> 
> entropy_weight(dat = ewm_data,ID = "ID",
+               pos_vars = -c(7,11),
+               neg_vars = c(7,11))
   Feature Weight
1       X1  0.026
2       X2  0.030
3       X3  0.084
4       X4  0.093
5       X5  0.067
6       X6  0.051
7       X8  0.075
8       X9  0.085
9      X10  0.133
10     X12  0.252
11     X13  0.052
12      X7  0.027
13     X11  0.025
> 
> 
> 
> cleanEx()
> nameEx("entry_rate_na")
> ### * entry_rate_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: entry_rate_na
> ### Title: Max Percent of missing Value
> ### Aliases: entry_rate_na
> 
> ### ** Examples
> 
> datss = entry_rate_na(dat = lendingclub[1:1000, ], nr = 0.98)
> 
> 
> 
> cleanEx()
> nameEx("fast_high_cor_filter")
> ### * fast_high_cor_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fast_high_cor_filter
> ### Title: high_cor_filter
> ### Aliases: fast_high_cor_filter high_cor_filter
> 
> ### ** Examples
> 
> # calculate iv for each variable.
> iv_list = feature_selector(dat_train = UCICreditCard[1:1000,], dat_test = NULL,
+ target = "default.payment.next.month",
+ occur_time = "apply_date",
+ filter = c("IV"), cv_folds = 1, iv_cp = 0.01,
+ ex_cols = "ID$|date$|default.payment.next.month$",
+ save_data = FALSE, vars_name = FALSE)
[31m-- Feature filtering by IV[39m
> fast_high_cor_filter(dat = UCICreditCard[1:1000,],
+ com_list = iv_list, save_data = FALSE,
+ ex_cols = "ID$|date$|default.payment.next.month$",
+ p = 0.9, cor_class = FALSE ,var_name = FALSE)
 [1] "SEX"       "EDUCATION" "MARRIAGE"  "LIMIT_BAL" "AGE"       "PAY_0"    
 [7] "PAY_2"     "PAY_3"     "PAY_4"     "PAY_5"     "PAY_6"     "BILL_AMT1"
[13] "BILL_AMT4" "BILL_AMT6" "PAY_AMT1"  "PAY_AMT2"  "PAY_AMT3"  "PAY_AMT4" 
[19] "PAY_AMT5"  "PAY_AMT6" 
> 
> 
> 
> cleanEx()
> nameEx("feature_selector")
> ### * feature_selector
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: feature_selector
> ### Title: Feature Selection Wrapper
> ### Aliases: feature_selector
> 
> ### ** Examples
> 
> feature_selector(dat_train = UCICreditCard[1:1000,c(2,8:12,26)],
+                       dat_test = NULL, target = "default.payment.next.month",
+                       occur_time = "apply_date", filter = c("IV", "PSI"),
+                       cv_folds = 1, iv_cp = 0.01, psi_cp = 0.1, xgb_cp = 0, cor_cp = 0.98,
+                       vars_name = FALSE,note = FALSE)
Warning in train_test_split(dat = dat_train, split_type = "OOT", prop = 0.7,  :
  apply_date is  not date or time, unable to use OOT , split random.

  Feature   IV   PSI
1   PAY_0 1.02 0.032
2   PAY_2 0.47 0.022
3   PAY_3 0.42 0.017
4   PAY_4 0.26 0.014
5   PAY_5 0.33 0.018
> 
> 
> 
> cleanEx()
> nameEx("gather_data")
> ### * gather_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gather_data
> ### Title: gather or aggregate data
> ### Aliases: gather_data
> 
> ### ** Examples
> 
> dat = data.frame(id = c(1,1,1,2,2,3,3,3,4,4,4,4,4,5,5,6,7,7,
+                             8,8,8,9,9,9,10,10,11,11,11,11,11,11),
+                      terms = c('a','b','c','a','c','d','d','a',
+                                'b','c','a','c','d','a','c',
+                                   'd','a','e','f','b','c','f','b',
+                                'c','h','h','i','c','d','g','k','k'),
+                      time = c(8,3,1,9,6,1,4,9,1,3,4,8,2,7,1,
+                               3,4,1,8,7,2,5,7,8,8,2,1,5,7,2,7,3))
> 
> gather_data(dat = dat, x_list = "time", ID = 'id', FUN = sum_x)
   id  x
1   1 12
2  10 10
3  11 25
4   2 15
5   3 14
6   4 18
7   5  8
8   6  3
9   7  5
10  8 17
11  9 20
> 
> 
> 
> cleanEx()
> nameEx("gbm_filter")
> ### * gbm_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gbm_filter
> ### Title: Select Features using GBM
> ### Aliases: gbm_filter
> 
> ### ** Examples
> 
> GBM.params = gbm_params(n.trees = 2, interaction.depth = 2, shrinkage = 0.1,
+                        bag.fraction = 1, train.fraction = 1,
+                        n.minobsinnode = 30,
+                      cv.folds = 2)
> ## Not run: 
> ##D  features <- gbm_filter(dat = UCICreditCard[1:1000, c(8:12, 26)],
> ##D          target = "default.payment.next.month",
> ##D       occur_time = "apply_date",
> ##D      GBM.params = GBM.params
> ##D        , vars_name = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_bins_table_all")
> ### * get_bins_table_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_bins_table_all
> ### Title: Table of Binning
> ### Aliases: get_bins_table_all get_bins_table
> 
> ### ** Examples
> 
> breaks_list = get_breaks_all(dat = UCICreditCard, x_list = names(UCICreditCard)[3:4],
+ target = "default.payment.next.month", equal_bins =TRUE,best = FALSE,g=5,
+ ex_cols = "ID|apply_date", save_data = FALSE)
> get_bins_table_all(dat = UCICreditCard, breaks_list = breaks_list,
+ target = "default.payment.next.month")
    Feature               bins   cuts total  good  bad %total %good %bad
1 LIMIT_BAL    01.(-Inf,50000]  50000  7676  5236 2440  25.6%   22%  37%
2 LIMIT_BAL  02.(50000,100000] 100000  4822  3578 1244  16.1%   15%  19%
3 LIMIT_BAL 03.(100000,180000] 180000  6123  4907 1216  20.4%   21%  18%
4 LIMIT_BAL 04.(180000,270000] 270000  5421  4507  914  18.1%   19%  14%
5 LIMIT_BAL   05.(270000, Inf]    Inf  5958  5136  822  19.9%   22%  12%
6     Total                 --     -- 30000 23364 6636   100%  100% 100%
7       SEX          01.female female 11888  9015 2873  39.6%   39%  43%
8       SEX            02.male   male 18112 14349 3763  60.4%   61%  57%
9     Total                 --     -- 30000 23364 6636   100%  100% 100%
  bad_rate     woe GB_index     iv psi
1    31.8% -0.4951       61 0.0711  -1
2    25.8% -0.2022       82 0.0069  -1
3    19.9%  0.1364      115 0.0037  -1
4    16.9%  0.3369      140 0.0186  -1
5    13.8%  0.5736      177  0.055  -1
6      22%       0      100  0.155  -1
7    24.2% -0.1152       89 0.0054  -1
8    20.8%  0.0798      108 0.0038  -1
9      22%       0      100  0.009  -1
> 
> 
> 
> cleanEx()
> nameEx("get_breaks_all")
> ### * get_breaks_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_breaks_all
> ### Title: Generates Best Breaks for Binning
> ### Aliases: get_breaks_all get_breaks
> 
> ### ** Examples
> 
> #controls
> tree_control = list(p = 0.02, cp = 0.000001, xval = 5, maxdepth = 10)
> bins_control = list(bins_num = 10, bins_pct = 0.02, b_chi = 0.02, b_odds = 0.1,
+                    b_psi = 0.05, b_or = 15, mono = 0.2, odds_psi = 0.1, kc = 5)
> # get categrory variable breaks
> b <-  get_breaks(dat = UCICreditCard[1:1000,], x = "MARRIAGE",
+                 target = "default.payment.next.month",
+                 occur_time = "apply_date",
+                 sp_values = list(-1, "missing"),
+                 tree_control = tree_control, bins_control = bins_control)
Warning in checking_data(dat = dat, target = target, pos_flag = pos_flag,  :
  occur_time:	apply_date	is not time or date.

> # get numeric variable breaks
> b2 <-  get_breaks(dat = UCICreditCard[1:1000,], x = "PAY_2",
+                  target = "default.payment.next.month",
+                  occur_time = "apply_date",
+                  sp_values = list(-1, "missing"),
+                  tree_control = tree_control, bins_control = bins_control)
Warning in checking_data(dat = dat, target = target, pos_flag = pos_flag,  :
  occur_time:	apply_date	is not time or date.

> # get breaks of all predictive variables
> b3 <-  get_breaks_all(dat = UCICreditCard[1:1000,], target = "default.payment.next.month",
+                      x_list = c("MARRIAGE","PAY_2"),
+                      occur_time = "apply_date", ex_cols = "ID",
+                      sp_values = list(-1, "missing"),
+                     tree_control = tree_control, bins_control = bins_control,
+                      save_data = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_correlation_group")
> ### * get_correlation_group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_correlation_group
> ### Title: get_correlation_group
> ### Aliases: get_correlation_group select_cor_group select_cor_list
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cor_mat = cor(UCICreditCard[8:20],
> ##D use = "complete.obs", method = "spearman")
> ##D get_correlation_group(cor_mat, p = 0.6 )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_ctree_rules")
> ### * get_ctree_rules
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_ctree_rules
> ### Title: Parse desision tree rules
> ### Aliases: get_ctree_rules
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard, split_type = "Random", prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> dat_train$default.payment.next.month = as.numeric(dat_train$default.payment.next.month)
> get_ctree_rules(tree_fit = NULL, train_dat = dat_train[, 8:26],
+ target ="default.payment.next.month", test_dat = dat_test)
   tree_nodes
1           6
2          11
3          12
4          13
5          14
6          15
7          19
8          16
9          20
10         21
11         22
12         23
                                                                                                                                                                  tree_rules
1                                                                                                        PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 15550.5 & PAY_AMT3 >= 631.5
2  BILL_AMT1 < 135411 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT1 >= 4462.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 >= 1881
3   BILL_AMT1 < 135411 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT1 < 4462.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 >= 1881
4                      BILL_AMT1 >= 135411 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 >= 1881
5                                             PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 >= 1205.5 & PAY_AMT5 < 1881
6                                                                PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 1500.5 & PAY_AMT2 < 15550.5 & PAY_AMT3 >= 631.5 & PAY_AMT4 < 1205.5
7                                                                                      BILL_AMT1 >= 393 & BILL_AMT3 < 1169.5 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 < 1500.5
8                                                                                                          PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 >= 1500.5 & PAY_AMT3 < 631.5
9                                                                                     BILL_AMT1 >= 393 & BILL_AMT3 >= 1169.5 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 < 1500.5
10                                                                                                           BILL_AMT1 < 393 & PAY_0 < 1.5 & PAY_2 < 1.5 & PAY_AMT2 < 1500.5
11                                                                                                                                                PAY_0 < 1.5 & PAY_2 >= 1.5
12                                                                                                                                                              PAY_0 >= 1.5
   #total %total #train %train %train_cumsum train_0 train_1 %train_1
1    1359   4.8%   1205     5%         5.02%    1147      58     4.8%
2    2072   7.3%   1769   7.4%        12.39%    1667     102     5.8%
3    2918  10.2%   2378   9.9%         22.3%    2169     209     8.8%
4    2008     7%   1632   6.8%         29.1%    1435     197    12.1%
5    1935   6.8%   1616   6.7%        35.83%    1416     200    12.4%
6    2839   9.9%   2363   9.8%        45.68%    2042     321    13.6%
7    2434   8.5%   2213   9.2%         54.9%    1892     321    14.5%
8    1759   6.2%   1517   6.3%        61.22%    1244     273      18%
9    3338  11.7%   2779  11.6%         72.8%    2213     566    20.4%
10   2595   9.1%   2201   9.2%        81.97%    1624     577    26.2%
11   2166   7.6%   1794   7.5%        89.45%    1046     748    41.7%
12   3130    11%   2533  10.6%          100%     770    1763    69.6%
   %train_cum_1_rate %train_cum_0 %train_cum_1 train_KS train_Lift #test %test
1              4.81%        6.15%        1.09%     0.05       0.22   154  3.4%
2              5.38%       15.08%           3%     0.12       0.26   303  6.7%
3              6.89%        26.7%        6.92%     0.20       0.40   540 11.9%
4               8.1%       34.39%       10.61%     0.24       0.54   376  8.3%
5              8.91%       41.97%       14.36%     0.28       0.56   319    7%
6              9.92%       52.91%       20.37%     0.33       0.61   476 10.5%
7             10.69%       63.05%       26.39%     0.37       0.65   221  4.9%
8             11.44%       69.71%       31.51%     0.38       0.81   242  5.3%
9             12.86%       81.57%       42.12%     0.39       0.92   559 12.3%
10            14.35%       90.27%       52.93%     0.37       1.18   394  8.7%
11            16.64%       95.87%       66.95%     0.29       1.88   372  8.2%
12            22.23%         100%         100%     0.00       3.13   597 13.1%
   %test_cumsum test_0 test_1 %test_1 %test_cum_1_rate %test_cum_0 %test_cum_1
1         3.38%    141     13    8.4%            8.44%       4.03%       1.23%
2        10.04%    277     26    8.6%            8.53%      11.95%       3.69%
3         21.9%    494     46    8.5%            8.53%      26.08%       8.05%
4        30.16%    339     37    9.8%            8.89%      35.77%      11.55%
5        37.16%    277     42   13.2%            9.69%      43.69%      15.53%
6        47.62%    415     61   12.8%           10.38%      55.56%      21.31%
7        52.47%    199     22     10%           10.34%      61.25%      23.39%
8        57.79%    194     48   19.8%           11.21%       66.8%      27.94%
9        70.06%    468     91   16.3%            12.1%      80.18%      36.55%
10       78.72%    295     99   25.1%           13.53%      88.62%      45.93%
11       86.89%    215    157   42.2%           16.23%      94.77%       60.8%
12         100%    183    414   69.3%           23.19%        100%        100%
   test_KS test_Lift   PSI
1     0.03      0.36 0.006
2     0.08      0.37 0.000
3     0.18      0.37 0.003
4     0.24      0.42 0.002
5     0.28      0.57 0.000
6     0.34      0.55 0.000
7     0.38      0.43 0.025
8     0.39      0.85 0.001
9     0.44      0.70 0.000
10    0.43      1.08 0.000
11    0.34      1.82 0.002
12    0.00      2.99 0.004
> 
> 
> 
> 
> cleanEx()
> nameEx("get_iv_all")
> ### * get_iv_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_iv_all
> ### Title: Calculate Information Value (IV) 'get_iv' is used to calculate
> ###   Information Value (IV) of an independent variable. 'get_iv_all' can
> ###   loop through IV for all specified independent variables.
> ### Aliases: get_iv_all get_iv
> 
> ### ** Examples
> 
> get_iv_all(dat = UCICreditCard,
+  x_list = names(UCICreditCard)[3:10],
+  equal_bins = TRUE, best = FALSE,
+  target = "default.payment.next.month",
+  ex_cols = "ID|apply_date")
    Feature    IV     strength
1 LIMIT_BAL 0.178       Strong
2       SEX 0.009 Unpredictive
3 EDUCATION 0.038         Weak
4  MARRIAGE 0.008 Unpredictive
5       AGE 0.021         Weak
6     PAY_0 0.874  Very Strong
7     PAY_2 0.545  Very Strong
8     PAY_3 0.413  Very Strong
> get_iv(UCICreditCard, x = "PAY_3",
+        equal_bins = TRUE, best = FALSE,
+  target = "default.payment.next.month")
  Feature    IV    strength
1   PAY_3 0.413 Very Strong
> 
> 
> 
> cleanEx()
> nameEx("get_logistic_coef")
> ### * get_logistic_coef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_logistic_coef
> ### Title: get logistic coef
> ### Aliases: get_logistic_coef
> 
> ### ** Examples
> 
> # dataset spliting
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> #rename the target variable
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values =  list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> #train_ test pliting
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> #get breaks of all predictive variables
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
> breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                               x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+ save_data = FALSE, note = FALSE)
> #woe transforming
> train_woe = woe_trans_all(dat = dat_train,
+                           target = "target",
+                           breaks_list = breaks_list,
+                           woe_name = FALSE)
> test_woe = woe_trans_all(dat = dat_test,
+                        target = "target",
+                          breaks_list = breaks_list,
+                          note = FALSE)
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = train_woe[, c("target", x_list)], family = binomial(logit))
> #get LR coefficient
> dt_imp_LR = get_logistic_coef(lg_model = lr_model, save_data = FALSE)
> bins_table = get_bins_table_all(dat = dat_train, target = "target",
+                                 x_list = x_list,dat_test = dat_test,
+                                breaks_list = breaks_list, note = FALSE)
> #score card
> LR_score_card <- get_score_card(lg_model = lr_model, bins_table, target = "target")
> #scoring
> train_pred = dat_train[, c("ID", "apply_date", "target")]
> test_pred = dat_test[, c("ID", "apply_date", "target")]
> train_pred$pred_LR = score_transfer(model = lr_model,
+                                                     tbl_woe = train_woe,
+                                                     save_data = TRUE)[, "score"]
> 
> test_pred$pred_LR = score_transfer(model = lr_model,
+ tbl_woe = test_woe, save_data = FALSE)[, "score"]
> 
> 
> 
> cleanEx()
> nameEx("get_names")
> ### * get_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_names
> ### Title: Get Variable Names
> ### Aliases: get_names
> 
> ### ** Examples
> 
> x_list = get_names(dat = UCICreditCard, types = c('factor', 'character'),
+ ex_cols = c("default.payment.next.month","ID$|_date$"), get_ex = FALSE)
> x_list = get_names(dat = UCICreditCard, types = c('numeric', 'character', "integer"),
+ ex_cols = c("default.payment.next.month", "ID$|SEX "), get_ex = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("get_plots")
> ### * get_plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_plots
> ### Title: Plot Independent Variables Distribution
> ### Aliases: get_plots plot_vars
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard[1:1000,], split_type = "Random",
+  prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> get_plots(dat_train[, c(8, 26)], dat_test = dat_test[, c(8, 26)],
+ target = "default.payment.next.month")
  Feature        bins cuts #total #expected expected_0 expected_1 #actual
1   PAY_0       00.NA    1    214       171        142         29      43
2   PAY_0 01.(-Inf,1]  Inf    688       552        452        100     136
3   PAY_0 02.(1, Inf]   NA     98        77         28         49      21
  actual_0 actual_1 %total %expected %actual %total_1 %expected_1 %actual_1
1       37        6   0.21      0.21    0.22     0.16        0.17      0.14
2      118       18   0.69      0.69    0.68     0.17        0.18      0.13
3        9       12   0.10      0.10    0.10     0.62        0.64      0.57
  odds_ratio odds_ratio_s  PSIi   IVi
1      1.392        0.002 0.000 0.021
2      1.315        0.016 0.000 0.048
3      0.165        0.000 0.001 0.429
> 
> 
> 
> cleanEx()
> nameEx("get_psi_all")
> ### * get_psi_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_psi_all
> ### Title: Calculate Population Stability Index (PSI) 'get_psi' is used to
> ###   calculate Population Stability Index (PSI) of an independent
> ###   variable. 'get_psi_all' can loop through PSI for all specified
> ###   independent variables.
> ### Aliases: get_psi_all get_psi
> 
> ### ** Examples
> 
> #  dat_test is null
> get_psi(dat = UCICreditCard, x = "PAY_3", occur_time = "apply_date")
Warning in train_test_split(dat = dat, prop = oot_pct, split_type = "OOT",  :
  apply_date is  not date or time, unable to use OOT , split random.

  Feature         Bins actual expected Ac_pct Ex_pct PSI_i   PSI
1   PAY_3        00.NA   1849     4089  20.5%  19.5% 0.001 0.002
2   PAY_3 01.(-Inf,-2]   1226     2859  13.6%  13.6% 0.000 0.002
3   PAY_3    02.(-2,0]   4690    11074  52.1%  52.7% 0.000 0.002
4   PAY_3     03.(0,2]   1135     2688  12.6%  12.8% 0.000 0.002
5   PAY_3  04.(2, Inf]    100      290   1.1%   1.4% 0.001 0.002
> # dat_test is not all
> # train_test split
> train_test = train_test_split(dat = UCICreditCard, prop = 0.7, split_type = "OOT",
+                              occur_time = "apply_date", start_date = NULL, cut_date = NULL,
+                             save_data = FALSE, note = FALSE)
Warning in train_test_split(dat = UCICreditCard, prop = 0.7, split_type = "OOT",  :
  apply_date is  not date or time, unable to use OOT , split random.

> dat_ex = train_test$train
> dat_ac = train_test$test
> # generate psi table
> get_psi(dat = dat_ex, dat_test = dat_ac, x = "PAY_3",
+        occur_time = "apply_date", bins_no = TRUE)
  Feature         Bins actual expected Ac_pct Ex_pct PSI_i   PSI
1   PAY_3        00.NA   1849     4089  20.5%  19.5% 0.001 0.002
2   PAY_3 01.(-Inf,-2]   1226     2859  13.6%  13.6% 0.000 0.002
3   PAY_3    02.(-2,0]   4690    11074  52.1%  52.7% 0.000 0.002
4   PAY_3     03.(0,2]   1135     2688  12.6%  12.8% 0.000 0.002
5   PAY_3  04.(2, Inf]    100      290   1.1%   1.4% 0.001 0.002
> 
> 
> 
> cleanEx()
> nameEx("get_psi_iv_all")
> ### * get_psi_iv_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_psi_iv_all
> ### Title: Calculate IV & PSI
> ### Aliases: get_psi_iv_all get_psi_iv
> 
> ### ** Examples
> 
> iv_list = get_psi_iv_all(dat = UCICreditCard[1:1000, ],
+ x_list = names(UCICreditCard)[3:5], equal_bins = TRUE,
+ target = "default.payment.next.month", ex_cols = "ID|apply_date")
> get_psi_iv(UCICreditCard, x = "PAY_3",
+ target = "default.payment.next.month",bins_total = TRUE)
  Feature         bins cuts #total #expected expected_0 expected_1 #actual
1   PAY_3        00.NA   -1   5938      4089       3449        640    1849
2   PAY_3 01.(-Inf,-1]    1   4085      2859       2324        535    1226
3   PAY_3    02.(-1,1]  Inf  15768     11077       9167       1910    4691
4   PAY_3  03.(1, Inf] <NA>   4209      2975       1410       1565    1234
5   Total           --   --  30000     21000      16350       4650    9000
  actual_0 actual_1 %total %expected %actual %total_1 %expected_1 %actual_1
1     1563      286    0.2      0.19    0.21     0.16        0.16      0.15
2     1004      222   0.14      0.14    0.14     0.19        0.19      0.18
3     3849      842   0.53      0.53    0.52     0.17        0.17      0.18
4      598      636   0.14      0.14    0.14     0.52        0.53      0.52
5     7014     1986      1         1       1     0.22        0.22      0.22
  odds_ratio odds_ratio_s  PSIi   IVi
1      1.537            0 0.001 0.032
2      1.249        0.002     0 0.006
3      1.343        0.004     0 0.042
4      0.259            0     0 0.332
5          1        0.006 0.001 0.412
> 
> 
> 
> cleanEx()
> nameEx("get_psi_plots")
> ### * get_psi_plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_psi_plots
> ### Title: Plot PSI(Population Stability Index)
> ### Aliases: get_psi_plots psi_plot
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard[1:1000,], split_type = "Random",
+  prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> get_psi_plots(dat_train[, c(8, 9)], dat_test = dat_test[, c(8, 9)])
   Feature         Bins actual expected Ac_pct Ex_pct PSI_i   PSI
1    PAY_0        00.NA     43      171  21.5%  21.4% 0.000 0.007
2    PAY_0  01.(-Inf,0]    112      440    56%    55% 0.000 0.007
3    PAY_0     02.(0,1]     24      112    12%    14% 0.003 0.007
4    PAY_0     03.(1,2]     19       65   9.5%   8.1% 0.002 0.007
5    PAY_0  04.(2, Inf]      2       12     1%   1.5% 0.002 0.007
6    PAY_2        00.NA     44      161    22%  20.1% 0.002 0.006
7    PAY_2 01.(-Inf,-2]     27      103  13.5%  12.9% 0.000 0.006
8    PAY_2    02.(-2,0]    104      421    52%  52.6% 0.000 0.006
9    PAY_2     03.(0,2]     23      103  11.5%  12.9% 0.002 0.006
10   PAY_2  04.(2, Inf]      2       12     1%   1.5% 0.002 0.006
> 
> 
> 
> cleanEx()
> nameEx("get_score_card")
> ### * get_score_card
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_score_card
> ### Title: Score Card
> ### Aliases: get_score_card
> 
> ### ** Examples
> 
> # dataset spliting
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> #rename the target variable
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values =  list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> #train_ test pliting
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> #get breaks of all predictive variables
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
> breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                               x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+ save_data = FALSE, note = FALSE)
> #woe transforming
> train_woe = woe_trans_all(dat = dat_train,
+                           target = "target",
+                           breaks_list = breaks_list,
+                           woe_name = FALSE)
> test_woe = woe_trans_all(dat = dat_test,
+                        target = "target",
+                          breaks_list = breaks_list,
+                          note = FALSE)
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = train_woe[, c("target", x_list)], family = binomial(logit))
> #get LR coefficient
> dt_imp_LR = get_logistic_coef(lg_model = lr_model, save_data = FALSE)
> bins_table = get_bins_table_all(dat = dat_train, target = "target",
+                                  dat_test = dat_test,
+                                 x_list = x_list,
+                                breaks_list = breaks_list, note = FALSE)
> #score card
> LR_score_card <- get_score_card(lg_model = lr_model, bins_table, target = "target")
> #scoring
> train_pred = dat_train[, c("ID", "apply_date", "target")]
> test_pred = dat_test[, c("ID", "apply_date", "target")]
> train_pred$pred_LR = score_transfer(model = lr_model,
+                                                     tbl_woe = train_woe,
+                                                     save_data = FALSE)[, "score"]
> 
> test_pred$pred_LR = score_transfer(model = lr_model,
+ tbl_woe = test_woe, save_data = FALSE)[, "score"]
> 
> 
> 
> cleanEx()
> nameEx("get_tree_breaks")
> ### * get_tree_breaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_tree_breaks
> ### Title: Getting the breaks for terminal nodes from decision tree
> ### Aliases: get_tree_breaks
> 
> ### ** Examples
> 
> #tree breaks
> tree_control = list(p = 0.02, cp = 0.000001, xval = 5, maxdepth = 10)
> tree_breaks = get_tree_breaks(dat = UCICreditCard, x = "MARRIAGE",
+ target = "default.payment.next.month", tree_control = tree_control)
> 
> 
> 
> cleanEx()
> nameEx("get_x_list")
> ### * get_x_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_x_list
> ### Title: Get X List.
> ### Aliases: get_x_list
> 
> ### ** Examples
> 
> x_list = get_x_list(x_list = NULL,dat_train = UCICreditCard,
+ ex_cols = c("default.payment.next.month","ID$|_date$"))
> 
> 
> 
> cleanEx()
> nameEx("grapes-alike-grapes")
> ### * grapes-alike-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %alike%
> ### Title: Fuzzy String matching
> ### Aliases: %alike%
> 
> ### ** Examples
> 
> "xyz"  %alike% "xy"
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("grapes-islike-grapes")
> ### * grapes-islike-grapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %islike%
> ### Title: Fuzzy String matching
> ### Aliases: %islike%
> 
> ### ** Examples
> 
>  "xyz"  %islike% "yz$"
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_date")
> ### * is_date
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_date
> ### Title: is_date
> ### Aliases: is_date
> 
> ### ** Examples
> 
> is_date(lendingclub$issue_d)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("ks_table")
> ### * ks_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ks_table
> ### Title: ks_table & plot
> ### Aliases: ks_table ks_table_plot ks_psi_plot model_key_index
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> 
> dat_train$pred_LR = round(predict(lr_model, dat_train[, x_list], type = "response"), 5)
> dat_test$pred_LR = round(predict(lr_model, dat_test[, x_list], type = "response"), 5)
> # model evaluation
> ks_psi_plot(train_pred = dat_train, test_pred = dat_test,
+                             score = "pred_LR", target = "target",
+                             plot_show = TRUE)
> tb_pred <- ks_table_plot(train_pred = dat_train, test_pred = dat_test,
+                                         score = "pred_LR", target = "target",
+                                      g = 10, g_width = 13, plot_show = FALSE)
> key_index = model_key_index(tb_pred)
> 
> 
> 
> cleanEx()
> nameEx("lasso_filter")
> ### * lasso_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lasso_filter
> ### Title: Variable selection by LASSO
> ### Aliases: lasso_filter
> 
> ### ** Examples
> 
>  sub = cv_split(UCICreditCard, k = 40)[[1]]
>  dat = UCICreditCard[sub,]
>  dat = re_name(dat, "default.payment.next.month", "target")
>  dat_train = data_cleansing(dat, target = "target", obs_id = "ID", occur_time = "apply_date",
+   miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
>  dat_train = process_nas(dat_train)
>  #get breaks of all predictive variables
>  x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
>  breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                                 x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+   save_data = FALSE, note = FALSE)
>  #woe transform
>  train_woe = woe_trans_all(dat = dat_train,
+                             target = "target",
+                             breaks_list = breaks_list,
+                             woe_name = FALSE)
>  lasso_filter(dat_train = train_woe, 
+          target = "target", x_list = x_list,
+        save_data = FALSE, plot.it = FALSE)
[1] "PAY_0" "PAY_3" "PAY_2"
> 
> 
> 
> cleanEx()
> nameEx("log_trans")
> ### * log_trans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: log_trans
> ### Title: Logarithmic transformation
> ### Aliases: log_trans log_vars
> 
> ### ** Examples
> 
> dat = log_trans(dat = UCICreditCard, target = "default.payment.next.month",
+ x_list =NULL,cor_dif = 0.01,ex_cols = "ID", note = TRUE)
[36m-- Logarithmic transformation[39m
[30m-- Following variables are log transformed:[39m
● [90mLIMIT_BAL -> LIMIT_BAL_log[39m
● [90mPAY_0     -> PAY_0_log[39m
● [90mPAY_2     -> PAY_2_log[39m
● [90mPAY_AMT1  -> PAY_AMT1_log[39m
● [90mPAY_AMT2  -> PAY_AMT2_log[39m
● [90mPAY_AMT3  -> PAY_AMT3_log[39m
● [90mPAY_AMT4  -> PAY_AMT4_log[39m
● [90mPAY_AMT5  -> PAY_AMT5_log[39m
● [90mPAY_AMT6  -> PAY_AMT6_log[39m
> 
> 
> 
> cleanEx()
> nameEx("loop_function")
> ### * loop_function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loop_function
> ### Title: Loop Function. #' 'loop_function' is an iterator to loop through
> ### Aliases: loop_function
> 
> ### ** Examples
> 
> dat = UCICreditCard[24:26]
> num_x_list = get_names(dat = dat, types = c('numeric', 'integer', 'double'),
+                       ex_cols = NULL, get_ex = FALSE)
> dat[ ,num_x_list] = loop_function(func = outliers_kmeans_lof, x_list = num_x_list,
+                                    args = list(dat = dat),
+                                    bind = "cbind", as_list = FALSE,
+                                  parallel = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("love_color")
> ### * love_color
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: love_color
> ### Title: love_color
> ### Aliases: love_color
> 
> ### ** Examples
> 
> love_color(color="dark_cyan")
[1] "#144E64"
> 
> 
> 
> cleanEx()
> nameEx("low_variance_filter")
> ### * low_variance_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: low_variance_filter
> ### Title: Filtering Low Variance Variables
> ### Aliases: low_variance_filter
> 
> ### ** Examples
> 
> dat = low_variance_filter(lendingclub[1:1000, ], lvp = 0.9)
> 
> 
> 
> 
> cleanEx()
> nameEx("lr_vif")
> ### * lr_vif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lr_vif
> ### Title: Variance-Inflation Factors
> ### Aliases: lr_vif
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> dat = re_name(UCICreditCard[sub,], "default.payment.next.month", "target")
> dat = dat[,c("target",x_list)]
> 
> dat = data_cleansing(dat, miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> train_test <- train_test_split(dat,  prop = 0.7)
> dat_train = train_test$train
> dat_test = train_test$test
> 
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> lr_vif(lr_model)
      PAY_0   LIMIT_BAL    PAY_AMT5       PAY_3       PAY_2 
1.448530112 1.206575895 1.124930729 2.424344281 2.668635760 
> get_logistic_coef(lr_model)
                Feature            estimate          std.error      Z_value
(Intercept) (Intercept) -1.1069876176613822 0.1622597839899380 -6.822316599
PAY_0             PAY_0  0.5270671036447749 0.1099673190198518  4.792943107
LIMIT_BAL     LIMIT_BAL -0.0000007905460278 0.0000009040222149 -0.874476329
PAY_AMT5       PAY_AMT5 -0.0000293334975092 0.0000201968293130 -1.452381315
PAY_3             PAY_3 -0.1001243768646279 0.1228343862229024 -0.815116841
PAY_2             PAY_2  0.1751234554929443 0.1257043611283719  1.393137469
            P_value         vif
(Intercept) 0.00000          NA
PAY_0       0.00000 1.448530112
LIMIT_BAL   0.38186 1.206575895
PAY_AMT5    0.14640 1.124930729
PAY_3       0.41501 2.424344281
PAY_2       0.16358 2.668635760
> class(dat)
[1] "data.frame"
> mod = lr_model
> lr_vif(lr_model)
      PAY_0   LIMIT_BAL    PAY_AMT5       PAY_3       PAY_2 
1.448530112 1.206575895 1.124930729 2.424344281 2.668635760 
> 
> 
> 
> cleanEx()
> nameEx("max_min_norm")
> ### * max_min_norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: max_min_norm
> ### Title: Max Min Normalization
> ### Aliases: max_min_norm
> 
> ### ** Examples
> 
> dat_s = apply(UCICreditCard[,12:14], 2, max_min_norm)
> 
> 
> 
> cleanEx()
> nameEx("merge_category")
> ### * merge_category
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_category
> ### Title: Merge Category
> ### Aliases: merge_category
> 
> ### ** Examples
> 
> #merge_catagory
> dat =  merge_category(lendingclub,ex_cols = "id$|_d$")
[30m-- Merging categories...[39m
> char_list = get_names(dat = dat,types = c('factor', 'character'),
+ ex_cols = "id$|_d$", get_ex = FALSE)
> str(dat[,char_list])
'data.frame':	31766 obs. of  10 variables:
 $ grade                    : chr  "B" "A" "D" "D" ...
 $ sub_grade                : chr  "B2" "A3" "D2" "D5" ...
 $ addr_state               : chr  "CO" "other" "CA" "MN" ...
 $ emp_length               : chr  "3 years" "2 years" "2 years" "10+ years" ...
 $ emp_title                : chr  "other" "other" "other" "other" ...
 $ grade.1                  : chr  "B" "A" "D" "D" ...
 $ purpose                  : chr  "credit_card" "debt_consolidation" "home_improvement" "credit_card" ...
 $ term                     : chr  "60 months" "36 months" "36 months" "60 months" ...
 $ verification_status_joint: chr  "" "" "Source Verified" "" ...
 $ zip_code                 : chr  "other" "other" "921xx" "other" ...
> 
> 
> 
> cleanEx()
> nameEx("min_max_norm")
> ### * min_max_norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min_max_norm
> ### Title: Min Max Normalization
> ### Aliases: min_max_norm
> 
> ### ** Examples
> 
> dat_s = apply(UCICreditCard[,12:14], 2, min_max_norm)
> 
> 
> 
> cleanEx()
> nameEx("model_result_plot")
> ### * model_result_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model_result_plot
> ### Title: model result plots 'model_result_plot' is a wrapper of
> ###   following: 'perf_table' is for generating a model performance table.
> ###   'ks_plot' is for K-S. 'roc_plot' is for ROC. 'lift_plot' is for Lift
> ###   Chart. 'score_distribution_plot' is for ploting the score
> ###   distribution.
> ### Aliases: model_result_plot perf_table ks_plot lift_plot roc_plot
> ###   score_distribution_plot
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",x_list = x_list,
+ occur_time = "apply_date", miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> dat = process_nas(dat,default_miss = TRUE)
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> 
> dat_train$pred_LR = round(predict(lr_model, dat_train[, x_list], type = "response"), 5)
> dat_test$pred_LR = round(predict(lr_model, dat_test[, x_list], type = "response"), 5)
> # model evaluation
> perf_table(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
                   bins #total #train #test %train %test %train_B %test_B
1     01.(-Inf,0.05283]     68     50    18    0.1  0.08     0.16   0.056
2  02.(0.05283,0.14123]     71     50    21    0.1  0.10     0.16   0.143
3  03.(0.14123,0.16658]     67     50    17    0.1  0.08     0.00   0.118
4  04.(0.16658,0.18034]     70     50    20    0.1  0.09     0.10   0.150
5  05.(0.18034,0.19533]     80     50    30    0.1  0.14     0.06   0.200
6  06.(0.19533,0.20714]     72     50    22    0.1  0.10     0.20   0.045
7  07.(0.20714,0.21389]     62     50    12    0.1  0.06     0.14   0.083
8  08.(0.21389,0.33209]     85     50    35    0.1  0.16     0.30   0.371
9  09.(0.33209,0.49065]     68     51    17    0.1  0.08     0.51   0.294
10    10.(0.49065, Inf]     73     50    23    0.1  0.11     0.72   0.870
   %train_cumG %train_cumB %test_cumG %test_cumB train_K-S test_K-S train_Lift
1         0.11        0.07       0.11       0.02      0.04     0.09       1.00
2         0.22        0.14       0.22       0.07      0.08     0.15       1.04
3         0.35        0.14       0.31       0.11      0.21     0.20       1.08
4         0.47        0.18       0.42       0.16      0.29     0.26       1.23
5         0.59        0.20       0.57       0.27      0.39     0.30       1.37
6         0.69        0.29       0.70       0.29      0.41     0.41       1.59
7         0.81        0.35       0.77       0.31      0.46     0.46       1.77
8         0.90        0.47       0.91       0.55      0.42     0.36       2.17
9         0.96        0.69       0.98       0.64      0.27     0.34       2.61
10        1.00        1.00       1.00       1.00      0.00     0.00       3.06
   test_Lift   PSI
1       1.00 0.004
2       1.07 0.000
3       1.13 0.004
4       1.20 0.001
5       1.29 0.013
6       1.43 0.000
7       1.75 0.020
8       1.98 0.028
9       2.44 0.004
10      3.40 0.001
> ks_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> roc_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> #lift_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> #score_distribution_plot(train_pred = dat_train, test_pred = dat_test,
> #target = "target", score = "pred_LR")
> #model_result_plot(train_pred = dat_train, test_pred = dat_test,
> #target = "target", score = "pred_LR")
> 
> 
> 
> cleanEx()
> nameEx("multi_grid")
> ### * multi_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multi_grid
> ### Title: Arrange list of plots into a grid
> ### Aliases: multi_grid
> 
> ### ** Examples
> 
> library(ggplot2)
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> dat = process_nas(dat)
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> 
> dat_train$pred_LR = round(predict(lr_model, dat_train[, x_list], type = "response"), 5)
> dat_test$pred_LR = round(predict(lr_model, dat_test[, x_list], type = "response"), 5)
> # model evaluation
> p1 =  ks_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> p2 =  roc_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> p3 =  lift_plot(train_pred = dat_train, test_pred = dat_test, target = "target", score = "pred_LR")
> p4 = score_distribution_plot(train_pred = dat_train, test_pred = dat_test,
+ target = "target", score = "pred_LR")
> p_plots= multi_grid(p1,p2,p3,p4)
> plot(p_plots)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("multi_left_join")
> ### * multi_left_join
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multi_left_join
> ### Title: multi_left_join
> ### Aliases: multi_left_join
> 
> ### ** Examples
> 
> multi_left_join(UCICreditCard[1:10, 1:10], UCICreditCard[1:10, c(1,8:14)],
+ UCICreditCard[1:10, c(1,20:25)], by = "ID")
   ID       apply_date LIMIT_BAL    SEX EDUCATION MARRIAGE AGE PAY_0 PAY_2
1   1  2016/7/10 02:30     20000   male         C        N  24     2     2
2   2  2016/10/5 16:21    120000   male         C        M  26    NA     2
3   3 2016/11/19 08:53     90000   male         C        M  34     0     0
4   4 2016/11/18 15:11     50000   male         C        N  37     0     0
5   5  2016/10/4 23:15     50000 female         C        N  57    NA     0
6   6  2016/11/6 05:56     50000 female         B        M  37     0     0
7   7 2016/10/16 11:41    500000 female         B        M  29     0     0
8   8 2016/11/17 09:25    100000   male         C        M  23     0    NA
9   9 2016/10/14 22:57    140000   male         D        N  28     0     0
10 10 2016/11/23 21:34     20000 female         D        M  35    -2    -2
   PAY_3 PAY_0_1 PAY_2_1 PAY_3_1 PAY_4 PAY_5 PAY_6 BILL_AMT1 PAY_AMT1 PAY_AMT2
1     NA       2       2      NA    NA    -2    -2      3913        0      689
2      0      NA       2       0     0     0     2      2682        0     1000
3      0       0       0       0     0     0     0     29239     1518     1500
4      0       0       0       0     0     0     0     46990     2000     2019
5     NA      NA       0      NA     0     0     0      8617     2000    36681
6      0       0       0       0     0     0     0     64400     2500     1815
7      0       0       0       0     0     0     0    367965    55000    40000
8     NA       0      NA      NA     0     0    NA     11876      380      601
9      2       0       0       2     0     0     0     11285     3329        0
10    -2      -2      -2      -2    -2    NA    NA         0        0        0
   PAY_AMT3 PAY_AMT4 PAY_AMT5 PAY_AMT6
1         0        0        0        0
2      1000     1000        0     2000
3      1000     1000     1000     5000
4      1200     1100     1069     1000
5     10000     9000      689      679
6       657     1000     1000      800
7     38000    20239    13750    13770
8         0      581     1687     1542
9       432     1000     1000     1000
10        0    13007     1122        0
> 
> 
> 
> cleanEx()
> nameEx("null_blank_na")
> ### * null_blank_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: null_blank_na
> ### Title: Encode NAs
> ### Aliases: null_blank_na
> 
> ### ** Examples
> 
> datss = null_blank_na(dat = UCICreditCard[1:1000, ], miss_values =list(-1,-2))
> 
> 
> 
> cleanEx()
> nameEx("one_hot_encoding")
> ### * one_hot_encoding
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: one_hot_encoding
> ### Title: One-Hot Encoding
> ### Aliases: one_hot_encoding
> 
> ### ** Examples
> 
> dat1 = one_hot_encoding(dat = UCICreditCard,
+ cat_vars = c("SEX", "MARRIAGE"),
+ merge_cat = TRUE, na_act = TRUE)
> dat2 = de_one_hot_encoding(dat_one_hot = dat1,
+ cat_vars = c("SEX","MARRIAGE"), na_act = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("partial_dependence_plot")
> ### * partial_dependence_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: partial_dependence_plot
> ### Title: partial_dependence_plot
> ### Aliases: partial_dependence_plot get_partial_dependence_plots
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> #plot partial dependency of one variable
> partial_dependence_plot(model = lr_model, x ="LIMIT_BAL", x_train = dat_train)
> #plot partial dependency of all variables
> pd_list = get_partial_dependence_plots(model = lr_model, x_list = x_list[1:2],
+  x_train = dat_train, save_data = FALSE,plot_show = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("plot_bar")
> ### * plot_bar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_bar
> ### Title: Plot Bar
> ### Aliases: plot_bar
> 
> ### ** Examples
> 
> plot_bar(dat = lendingclub, x = "grade")
> 
> 
> 
> cleanEx()
> nameEx("plot_box")
> ### * plot_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_box
> ### Title: Plot Box
> ### Aliases: plot_box
> 
> ### ** Examples
> 
> plot_box(lendingclub, x = "grade", y = "installment", g = 7)
> 
> 
> 
> cleanEx()
> nameEx("plot_density")
> ### * plot_density
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_density
> ### Title: Plot Density
> ### Aliases: plot_density
> 
> ### ** Examples
> 
> plot_density(dat = lendingclub, x = "annual_inc",y = "emp_length", m =0, hist = FALSE)
> plot_density(dat = lendingclub, x = "annual_inc", m = 2,
+ colors_y = love_color(type = "line")[c(1,3)])
> 
> 
> 
> cleanEx()
> nameEx("plot_distribution")
> ### * plot_distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_distribution
> ### Title: Plot Distribution
> ### Aliases: plot_distribution plot_distribution_x
> 
> ### ** Examples
> 
> plot_distribution_x(dat = lendingclub, x = "max_bal_bc", g = 10,
+ 	cut_bin = 'equal_width')
> plot_distribution(dat = lendingclub, x_list = c("max_bal_bc", "installment"), 
+      g = 10,dir_path = tempdir(),
+ 	cut_bin = 'equal_width')
> 
> 
> 
> cleanEx()
> nameEx("plot_oot_perf")
> ### * plot_oot_perf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_oot_perf
> ### Title: plot_oot_perf 'plot_oot_perf' is for ploting performance of
> ###   cross time samples in the future
> ### Aliases: plot_oot_perf
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "PAY_3", "PAY_2")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",x_list = x_list,
+ occur_time = "apply_date", miss_values = list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> dat = process_nas(dat)
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = dat_train[, c("target", x_list)], family = binomial(logit))
> 
> dat_train$pred_LR = round(predict(lr_model, dat_train[, x_list], type = "response"), 5)
> dat_test$pred_LR = round(predict(lr_model, dat_test[, x_list], type = "response"), 5)
> plot_oot_perf(dat_test = dat_test, occur_time = "apply_date", target = "target", x = "pred_LR")
> 
> 
> 
> cleanEx()
> nameEx("plot_relative_freq_histogram")
> ### * plot_relative_freq_histogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_relative_freq_histogram
> ### Title: Plot Relative Frequency Histogram
> ### Aliases: plot_relative_freq_histogram
> 
> ### ** Examples
> 
> plot_relative_freq_histogram(dat = lendingclub, x = "grade", y = "dti_joint", g = 7,
+ 	cut_bin = 'equal_width')
> 
> 
> 
> cleanEx()
> nameEx("plot_table")
> ### * plot_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_table
> ### Title: plot_table
> ### Aliases: plot_table
> 
> ### ** Examples
> 
> iv_list = get_psi_iv_all(dat = UCICreditCard[1:1000, ],
+                          x_list = names(UCICreditCard)[3:5], equal_bins = TRUE,
+                          target = "default.payment.next.month", ex_cols = "ID|apply_date")
> iv_dt =get_psi_iv(UCICreditCard, x = "PAY_3",
+                   target = "default.payment.next.month", bins_total = TRUE)
> 
> plot_table(iv_dt)
> 
> 
> 
> cleanEx()
> nameEx("process_nas")
> ### * process_nas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: process_nas
> ### Title: missing Treatment
> ### Aliases: process_nas process_nas_var
> 
> ### ** Examples
> 
> dat_na = process_nas(dat = UCICreditCard[1:1000,],
+ parallel = FALSE,ex_cols = "ID$", method = "median")
> 
> 
> 
> 
> cleanEx()
> nameEx("process_outliers")
> ### * process_outliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: process_outliers
> ### Title: Outliers Treatment
> ### Aliases: process_outliers outliers_kmeans_lof
> 
> ### ** Examples
> 
> dat_out = process_outliers(UCICreditCard[1:10000,c(18:21,26)],
+                         target = "default.payment.next.month",
+                        ex_cols = "date$", kc = 3, kn = 10, 
+                        parallel = FALSE,note = TRUE)
[30m-- Processing outliers using Kmeans and LOF[39m
● [90mBILL_AMT5	0%	no_outlier[39m
● [90mBILL_AMT6	0%	no_outlier[39m
● [90mPAY_AMT1	0.17%	top[39m
● [90mPAY_AMT2	0.27%	top[39m
> 
> 
> 
> cleanEx()
> nameEx("psi_iv_filter")
> ### * psi_iv_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: psi_iv_filter
> ### Title: Variable reduction based on Information Value & Population
> ###   Stability Index filter
> ### Aliases: psi_iv_filter
> 
> ### ** Examples
> 
> psi_iv_filter(dat= UCICreditCard[1:1000,c(2,4,8:9,26)],
+              target = "default.payment.next.month",
+              occur_time = "apply_date",
+              parallel = FALSE)
[31m-- Selecting variables by PSI & IV[39m
Warning in checking_data(dat = dat, target = target, occur_time = occur_time,  :
  occur_time:	apply_date	is not time or date.

Warning in train_test_split(dat, split_type = "OOT", prop = oot_pct, occur_time = occur_time,  :
  apply_date is  not date or time, unable to use OOT , split random.

[30m-- Calculating PSI[39m
[90m--SEX[39m
● [90mPSI: 0.002  -->  Very stable[39m
[90m--PAY_0[39m
● [90mPSI: 0.008  -->  Very stable[39m
[90m--PAY_2[39m
● [90mPSI: 0.012  -->  Very stable[39m
[30m-- Calculating IV[39m
[90m--SEX[39m
● [90mIV: 0.013  -->  Very Weak[39m
[90m--PAY_0[39m
● [90mIV: 0.715  -->  Very Strong[39m
[90m--PAY_2[39m
● [90mIV: 0.341  -->  Very Strong[39m
  Feature    IV   PSI   COS
1   PAY_0 0.715 0.008 0.992
2   PAY_2 0.341 0.012 0.943
3     SEX 0.013 0.002 1.000
> 
> 
> 
> cleanEx()
> nameEx("quick_as_df")
> ### * quick_as_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quick_as_df
> ### Title: List as data.frame quickly
> ### Aliases: quick_as_df
> 
> ### ** Examples
> 
> 
> UCICreditCard = quick_as_df(UCICreditCard)
> 
> 
> 
> 
> cleanEx()
> nameEx("ranking_percent_proc")
> ### * ranking_percent_proc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranking_percent_proc
> ### Title: Ranking Percent Process
> ### Aliases: ranking_percent_proc ranking_percent_proc_x
> ###   ranking_percent_dict ranking_percent_dict_x
> 
> ### ** Examples
> 
> rank_dict = ranking_percent_dict(dat = UCICreditCard[1:1000,],
+ x_list = c("LIMIT_BAL","BILL_AMT2","PAY_AMT3"), ex_cols = NULL )
> UCICreditCard_new = ranking_percent_proc(dat = UCICreditCard[1:1000,],
+ x_list = c("LIMIT_BAL", "BILL_AMT2", "PAY_AMT3"), rank_dict = rank_dict, parallel = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("re_code")
> ### * re_code
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_code
> ### Title: re_code 're_code' search for matches to argument pattern within
> ###   each element of a character vector:
> ### Aliases: re_code
> 
> ### ** Examples
> 
> SEX  = sample(c("F","M"),1000,replace = TRUE)
> codes= data.frame(ori_value = c('F','M'), code = c(0,1) )
> SEX_re = re_code(SEX,codes)
> 
> 
> 
> cleanEx()
> nameEx("re_name")
> ### * re_name
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_name
> ### Title: Rename
> ### Aliases: re_name
> 
> ### ** Examples
> 
> dt = re_name(dat = UCICreditCard, "default.payment.next.month" , "target")
> names(dt['target'])
[1] "target"
> 
> 
> 
> cleanEx()
> nameEx("remove_duplicated")
> ### * remove_duplicated
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_duplicated
> ### Title: Remove Duplicated Observations
> ### Aliases: remove_duplicated
> 
> ### ** Examples
> 
> datss = remove_duplicated(dat = UCICreditCard,
+ target = "default.payment.next.month",
+ obs_id = "ID", occur_time =  "apply_date")
> 
> 
> 
> cleanEx()
> nameEx("require_packages")
> ### * require_packages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: require_packages
> ### Title: Packages required and intallment
> ### Aliases: require_packages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D require_packages(data.table, ggplot2, dplyr)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rowAny")
> ### * rowAny
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rowAny
> ### Title: Functions for vector operation.
> ### Aliases: rowAny rowAllnas colAllnas colAllzeros rowAll rowCVs rowSds
> ###   colSds rowMaxs rowMins rowMaxMins colMaxMins cnt_x sum_x max_x min_x
> ###   avg_x
> 
> ### ** Examples
> 
> #any row has missing values
> row_amy =  rowAny(UCICreditCard[8:10])
> #rows which is all missing values
> row_na =  rowAllnas(UCICreditCard[8:10])
> #cols which is all missing values
> col_na =  colAllnas(UCICreditCard[8:10])
> #cols which is all zeros
> row_zero =  colAllzeros(UCICreditCard[8:10])
> #sum all numbers of a row
> row_all =  rowAll(UCICreditCard[8:10])
> #caculate cv of a row
> row_cv =  rowCVs(UCICreditCard[8:10])
> #caculate sd of a row
> row_sd =  rowSds(UCICreditCard[8:10])
> #caculate sd of a column
> col_sd =  colSds(UCICreditCard[8:10])
> 
> 
> 
> cleanEx()
> nameEx("rules_filter")
> ### * rules_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rules_filter
> ### Title: rules_filter
> ### Aliases: rules_filter
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard, split_type = "Random", prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> dat_train$default.payment.next.month = as.numeric(dat_train$default.payment.next.month)
> rules_list = get_ctree_rules(tree_fit = NULL, train_dat = dat_train[, 8:26],
+                              target ="default.payment.next.month", test_dat = dat_test)[1:3,2]
>  new_dat = rules_filter(rules_list = rules_list[3], dat = dat_test)
> 
> 
> 
> 
> cleanEx()
> nameEx("rules_result")
> ### * rules_result
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rules_result
> ### Title: rules_result
> ### Aliases: rules_result
> 
> ### ** Examples
> 
> train_test <- train_test_split(UCICreditCard, split_type = "Random", prop = 0.8, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> dat_train$default.payment.next.month = as.numeric(dat_train$default.payment.next.month)
> rules_list = get_ctree_rules(tree_fit = NULL, train_dat = dat_train[, 8:26],
+                              target ="default.payment.next.month", test_dat = dat_test)[1:3,2]
> dat_test$rules_result = rules_result(rules_list = rules_list[3], dat = dat_test)
> 
> 
> 
> 
> cleanEx()
> nameEx("save_data")
> ### * save_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_data
> ### Title: Save data
> ### Aliases: save_data
> 
> ### ** Examples
> 
> save_data(UCICreditCard,"UCICreditCard", tempdir())
> 
> 
> 
> cleanEx()
> nameEx("score_transfer")
> ### * score_transfer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: score_transfer
> ### Title: Score Transformation
> ### Aliases: score_transfer
> 
> ### ** Examples
> 
> # dataset spliting
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> #rename the target variable
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID",
+ occur_time = "apply_date", miss_values =  list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> #train_ test pliting
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> #get breaks of all predictive variables
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
> breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                               x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+ save_data = FALSE, note = FALSE)
> #woe transforming
> train_woe = woe_trans_all(dat = dat_train,
+                           target = "target",
+                           breaks_list = breaks_list,
+                           woe_name = FALSE)
> test_woe = woe_trans_all(dat = dat_test,
+                        target = "target",
+                          breaks_list = breaks_list,
+                          note = FALSE)
> Formula = as.formula(paste("target", paste(x_list, collapse = ' + '), sep = ' ~ '))
> set.seed(46)
> lr_model = glm(Formula, data = train_woe[, c("target", x_list)], family = binomial(logit))
> #get LR coefficient
> dt_imp_LR = get_logistic_coef(lg_model = lr_model, save_data = FALSE)
> bins_table = get_bins_table_all(dat = dat_train, target = "target",
+                                 x_list = x_list,dat_test = dat_test,
+                                breaks_list = breaks_list, note = FALSE)
> #score card
> LR_score_card <- get_score_card(lg_model = lr_model, bins_table, target = "target")
> #scoring
> train_pred = dat_train[, c("ID", "apply_date", "target")]
> test_pred = dat_test[, c("ID", "apply_date", "target")]
> train_pred$pred_LR = score_transfer(model = lr_model,
+                                                     tbl_woe = train_woe,
+                                                     save_data = FALSE)[, "score"]
> 
> test_pred$pred_LR = score_transfer(model = lr_model,
+ tbl_woe = test_woe, save_data = FALSE)[, "score"]
> 
> 
> 
> cleanEx()
> nameEx("select_best_class")
> ### * select_best_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: select_best_class
> ### Title: Generates Best Binning Breaks
> ### Aliases: select_best_class select_best_breaks
> 
> ### ** Examples
> 
> #equal sample size breaks
> equ_breaks = cut_equal(dat = UCICreditCard[, "PAY_AMT2"], g = 10)
> 
> # select best bins
> bins_control = list(bins_num = 10, bins_pct = 0.02, b_chi = 0.02,
+ b_odds = 0.1, b_psi = 0.05, b_or = 0.15, mono = 0.3, odds_psi = 0.1, kc = 1)
> select_best_breaks(dat = UCICreditCard, x = "PAY_AMT2", breaks = equ_breaks,
+ target = "default.payment.next.month", occur_time = "apply_date",
+ sp_values = NULL, bins_control = bins_control)
Warning in checking_data(dat = dat, occur_time = occur_time) :
  occur_time:	apply_date	is not time or date.

[1]     0  1600  4045  6000 10400   Inf
> 
> 
> 
> cleanEx()
> nameEx("split_bins")
> ### * split_bins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_bins
> ### Title: split_bins
> ### Aliases: split_bins
> 
> ### ** Examples
> 
> bins = split_bins(dat = UCICreditCard,
+ x = "PAY_AMT1", breaks = NULL, bins_no = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("split_bins_all")
> ### * split_bins_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_bins_all
> ### Title: Split bins all
> ### Aliases: split_bins_all
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID", occur_time = "apply_date",
+ miss_values =  list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> #get breaks of all predictive variables
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
> breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                               x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+ save_data = FALSE, note  = FALSE)
> #woe transform
> train_bins = split_bins_all(dat = dat_train,
+                           breaks_list = breaks_list,
+                           woe_name = FALSE)
> test_bins = split_bins_all(dat = dat_test,
+                          breaks_list = breaks_list,
+                          note = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("str_match")
> ### * str_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str_match
> ### Title: string match #' 'str_match' search for matches to argument
> ###   pattern within each element of a character vector:
> ### Aliases: str_match
> 
> ### ** Examples
> 
> orignal_nam = c("12mdd","11mdd","10mdd")
> str_match(str_r = orignal_nam,pattern= "\\d+")
[1] "12m" "11m" "10m"
> 
> 
> 
> cleanEx()
> nameEx("swap_analysis")
> ### * swap_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: swap_analysis
> ### Title: Swap Out/Swap In Analysis
> ### Aliases: swap_analysis
> 
> ### ** Examples
> 
> swap_analysis(dat = UCICreditCard, new_rules = list("SEX == 'male' & AGE < 25"),
+  old_rules = list("SEX == 'male' & AGE < 30"),
+  target = "default.payment.next.month", cross_type = "bad_pct", value = "LIMIT_BAL")
  old_rules   pass reject total_old
1      pass 17.13%     0%    17.13%
2    reject 16.48%  22.6%    17.44%
3 total_new 17.04%  22.6%    17.18%
> 
> 
> 
> cleanEx()
> nameEx("term_tfidf")
> ### * term_tfidf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: term_tfidf
> ### Title: TF-IDF
> ### Aliases: term_tfidf term_idf term_filter
> 
> ### ** Examples
> 
> term_df = data.frame(id = c(1,1,1,2,2,3,3,3,4,4,4,4,4,5,5,6,7,7,
+                             8,8,8,9,9,9,10,10,11,11,11,11,11,11),
+ terms = c('a','b','c','a','c','d','d','a','b','c','a','c','d','a','c',
+           'd','a','e','f','b','c','f','b','c','h','h','i','c','d','g','k','k'))
> term_df = term_filter(term_df = term_df, low_freq = 1)
> idf = term_idf(term_df)
> tf_idf = term_tfidf(term_df,idf = idf)
> 
> 
> 
> cleanEx()
> nameEx("time_series_proc")
> ### * time_series_proc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_series_proc
> ### Title: Process time series data
> ### Aliases: time_series_proc
> 
> ### ** Examples
> 
> dat = data.frame(id = c(1,1,1,2,2,3,3,3,4,4,4,4,4,5,5,6,7,7,
+                             8,8,8,9,9,9,10,10,11,11,11,11,11,11),
+                      terms = c('a','b','c','a','c','d','d','a',
+                                'b','c','a','c','d','a','c',
+                                   'd','a','e','f','b','c','f','b',
+                                'c','h','h','i','c','d','g','k','k'),
+                      time = c(8,3,1,9,6,1,4,9,1,3,4,8,2,7,1,
+                               3,4,1,8,7,2,5,7,8,8,2,1,5,7,2,7,3))
> 
> time_series_proc(dat = dat, ID = 'id', group = 'terms',time = 'time')
   id time_interval_cnt_x_a time_interval_cnt_x_b time_interval_cnt_x_c
1   1                     1                     1                     1
2  10                     0                     0                     0
3  11                     0                     0                     1
4   2                     1                     0                     1
5   3                     1                     0                     0
6   4                     1                     1                     2
7   5                     1                     0                     1
8   6                     0                     0                     0
9   7                     1                     0                     0
10  8                     0                     1                     1
11  9                     0                     1                     1
   time_interval_cnt_x_d time_interval_cnt_x_e time_interval_cnt_x_f
1                      0                     0                     0
2                      0                     0                     0
3                      1                     0                     0
4                      0                     0                     0
5                      2                     0                     0
6                      1                     0                     0
7                      0                     0                     0
8                      1                     0                     0
9                      0                     1                     0
10                     0                     0                     1
11                     0                     0                     1
   time_interval_cnt_x_g time_interval_cnt_x_h time_interval_cnt_x_i
1                      0                     0                     0
2                      0                     2                     0
3                      1                     0                     1
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     0
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     0
11                     0                     0                     0
   time_interval_cnt_x_k time_interval_sum_x_a time_interval_sum_x_b
1                      0                     0                     5
2                      0                     0                     0
3                      2                     0                     0
4                      0                     0                     0
5                      0                     0                     0
6                      0                     4                     1
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     1
11                     0                     0                     1
   time_interval_sum_x_c time_interval_sum_x_d time_interval_sum_x_e
1                      2                     0                     0
2                      0                     0                     0
3                      2                     0                     0
4                      3                     0                     0
5                      0                     8                     0
6                      1                     1                     0
7                      6                     0                     0
8                      0                     0                     0
9                      0                     0                     3
10                     5                     0                     0
11                     0                     0                     0
   time_interval_sum_x_f time_interval_sum_x_g time_interval_sum_x_h
1                      0                     0                     0
2                      0                     0                     6
3                      0                     1                     0
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     0
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     0
11                     2                     0                     0
   time_interval_sum_x_i time_interval_sum_x_k time_interval_max_x_a
1                      0                     0                     0
2                      0                     0                    NA
3                      1                     2                    NA
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     4
7                      0                     0                     0
8                      0                     0                    NA
9                      0                     0                     0
10                     0                     0                    NA
11                     0                     0                    NA
   time_interval_max_x_b time_interval_max_x_c time_interval_max_x_d
1                      5                     2                    NA
2                     NA                    NA                    NA
3                     NA                     2                     0
4                     NA                     3                    NA
5                     NA                    NA                     5
6                      1                     1                     1
7                     NA                     6                    NA
8                     NA                    NA                     0
9                     NA                    NA                    NA
10                     1                     5                    NA
11                     1                     0                    NA
   time_interval_max_x_e time_interval_max_x_f time_interval_max_x_g
1                     NA                    NA                    NA
2                     NA                    NA                    NA
3                     NA                    NA                     1
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                      3                    NA                    NA
10                    NA                     0                    NA
11                    NA                     2                    NA
   time_interval_max_x_h time_interval_max_x_i time_interval_max_x_k
1                     NA                    NA                    NA
2                      6                    NA                    NA
3                     NA                     1                     2
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                    NA                    NA                    NA
11                    NA                    NA                    NA
   time_interval_min_x_a time_interval_min_x_b time_interval_min_x_c
1                      0                     5                     2
2                     NA                    NA                    NA
3                     NA                    NA                     2
4                      0                    NA                     3
5                      0                    NA                    NA
6                      4                     1                     0
7                      0                    NA                     6
8                     NA                    NA                    NA
9                      0                    NA                    NA
10                    NA                     1                     5
11                    NA                     1                     0
   time_interval_min_x_d time_interval_min_x_e time_interval_min_x_f
1                     NA                    NA                    NA
2                     NA                    NA                    NA
3                      0                    NA                    NA
4                     NA                    NA                    NA
5                      3                    NA                    NA
6                      1                    NA                    NA
7                     NA                    NA                    NA
8                      0                    NA                    NA
9                     NA                     3                    NA
10                    NA                    NA                     0
11                    NA                    NA                     2
   time_interval_min_x_g time_interval_min_x_h time_interval_min_x_i
1                     NA                    NA                    NA
2                     NA                     0                    NA
3                      1                    NA                     1
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                    NA                    NA                    NA
11                    NA                    NA                    NA
   time_interval_min_x_k time_interval_avg_x_a time_interval_avg_x_b
1                     NA                     0                     5
2                     NA                    NA                    NA
3                      0                    NA                    NA
4                     NA                     0                    NA
5                     NA                     0                    NA
6                     NA                     4                     1
7                     NA                     0                    NA
8                     NA                    NA                    NA
9                     NA                     0                    NA
10                    NA                    NA                     1
11                    NA                    NA                     1
   time_interval_avg_x_c time_interval_avg_x_d time_interval_avg_x_e
1                    2.0                    NA                    NA
2                     NA                    NA                    NA
3                    2.0                     0                    NA
4                    3.0                    NA                    NA
5                     NA                     4                    NA
6                    0.5                     1                    NA
7                    6.0                    NA                    NA
8                     NA                     0                    NA
9                     NA                    NA                     3
10                   5.0                    NA                    NA
11                   0.0                    NA                    NA
   time_interval_avg_x_f time_interval_avg_x_g time_interval_avg_x_h
1                     NA                    NA                    NA
2                     NA                    NA                     3
3                     NA                     1                    NA
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                     0                    NA                    NA
11                     2                    NA                    NA
   time_interval_avg_x_i time_interval_avg_x_k
1                     NA                    NA
2                     NA                    NA
3                      1                     1
4                     NA                    NA
5                     NA                    NA
6                     NA                    NA
7                     NA                    NA
8                     NA                    NA
9                     NA                    NA
10                    NA                    NA
11                    NA                    NA
> 
> 
> 
> cleanEx()
> nameEx("time_transfer")
> ### * time_transfer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_transfer
> ### Title: Time Format Transfering
> ### Aliases: time_transfer
> 
> ### ** Examples
> 
> #transfer a variable.
> dat = time_transfer(dat = lendingclub,date_cols = "issue_d")
> class(dat[,"issue_d"])
[1] "Date"
> #transfer a group of variables with similar name.
> dat = time_transfer(dat = lendingclub,date_cols = "_d$")
> class(dat[,"issue_d"])
[1] "Date"
> #transfer all time variables.
> dat = time_transfer(dat = lendingclub,date_cols = NULL)
> class(dat[,"issue_d"])
[1] "Date"
> 
> 
> 
> cleanEx()
> nameEx("train_test_split")
> ### * train_test_split
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: train_test_split
> ### Title: Train-Test-Split
> ### Aliases: train_test_split
> 
> ### ** Examples
> 
> train_test <- train_test_split(lendingclub,
+ split_type = "OOT", prop = 0.7,
+ occur_time = "issue_d", seed = 12, save_data = FALSE)
> dat_train = train_test$train
> dat_test = train_test$test
> 
> 
> 
> cleanEx()
> nameEx("training_model")
> ### * training_model
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: training_model
> ### Title: Training model
> ### Aliases: training_model
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> x_list = c("LIMIT_BAL")
> B_model = training_model(dat = dat,
+                          model_name = "UCICreditCard",
+                          target = "default.payment.next.month",
+ 							x_list = x_list,
+                          occur_time =NULL,
+                          obs_id =NULL,
+ 							dat_test = NULL,
+                          preproc = FALSE,
+                          outlier_proc = FALSE,
+                          missing_proc = FALSE,
+                          feature_filter = NULL,
+                          algorithm = list("LR"),
+                          LR.params = lr_params(lasso = FALSE,
+                                                step_wise = FALSE,
+                                                  score_card = FALSE),
+                          breaks_list = NULL,
+                          parallel = FALSE,
+                          cores_num = NULL,
+                          save_pmml = FALSE,
+                          plot_show = FALSE,
+                          vars_plot = FALSE,
+                          model_path = tempdir(),
+                          seed = 46)
[36m──[39m [36mBuilding[39m [36m───────────────────────────────────────────────────[39m [36mUCICreditCard[39m [36m──[39m
[34m──[39m [34mCreating the model output file path[39m [34m─────────────────────────────────────────[39m
[30m-- Seting model output file path:[39m
● [90mmodel      : /var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/model[39m
● [90mdata       : /var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/data[39m
● [90mvariable   : /var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable[39m
● [90mperformance: /var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/performance[39m
● [90mpredict    : /var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/predict[39m
[34m──[39m [34mChecking datasets and target[39m [34m────────────────────────────────────────────────[39m
[34m──[39m [34mSpliting train & test[39m [34m───────────────────────────────────────────────────────[39m
[30m-- train_test_split:[39m
● [90mTotal: 1000 (100%)[39m
● [90mTrain: 700 (70%)[39m
● [90mTest : 300 (30%)[39m
[36m──[39m [36mTraining logistic regression model/scorecard[39m [36m────────────────────────────────[39m
[34m──[39m [34mConstrained optimal binning of varibles[39m [34m─────────────────────────────────────[39m
[36m-- Getting optimal binning breaks[39m
● [90mLIMIT_BAL: 490000,Inf[39m
[30m-- Saving breaks_list.breaks_list to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/breaks_list.breaks_list.csv[39m
[34m──[39m [34mFiltering variables by IV & PSI[39m [34m─────────────────────────────────────────────[39m
[31m-- Selecting variables by PSI & IV[39m
[30m-- Calculating PSI[39m
[90m--LIMIT_BAL[39m
● [90mPSI: 0  -->  Very stable[39m
[30m-- Calculating IV[39m
[90m--LIMIT_BAL[39m
● [90mIV: 0.059  -->  Medium[39m
[30m-- Saving feature.IV_PSI to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/feature.IV_PSI.csv[39m
[30m-- Saving feature.PSI to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/feature.PSI.csv[39m
[30m-- Saving feature.IV to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/feature.IV.csv[39m
[30m-- Saving LIMIT_BAL to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/LIMIT_BAL.csv[39m
[34m──[39m [34mTransforming WOE[39m [34m────────────────────────────────────────────────────────────[39m
[36m-- Transforming variables to woe[39m
[30m-- Saving lr_train.dat.woe to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/data/LR/lr_train.dat.woe.csv[39m
[34m──[39m [34mFiltering variables by correlation[39m [34m──────────────────────────────────────────[39m
[36m-- Processing bins table[39m
● [90mLIMIT_BAL IV: 0.059 PSI: 0[39m
[30m-- Saving LIMIT_BAL to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/LIMIT_BAL.csv[39m
[34m──[39m [34mStart training lr model[39m [34m─────────────────────────────────────────────────────[39m
[30m-- Saving LIMIT_BAL to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/variable/LR/LIMIT_BAL.csv[39m
[30m-- Saving UCICreditCard.lr_coef to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/performance/LR/UCICreditCard.lr_coef.csv[39m
[30m-- Saving lr_train_prob to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/predict/LR/lr_train_prob.csv[39m
[30m-- Saving lr_test_prob to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/predict/LR/lr_test_prob.csv[39m
[36m-- Producing plots that characterize the performance of Logistic Regression[39m
Saving 12 x 7 in image
[30m-- Saving UCICreditCard.LR.performance_table to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/performance/LR/UCICreditCard.LR.performance_table.csv[39m
[30m-- Saving LR.params to:[39m
● [90m/var/folders/24/k1n3dpcd2p5glqf8r4232qqc8k86md/T//RtmpWpfX1E/UCICreditCard/performance/LR/LR.params.csv[39m
> 
> 
> 
> 
> cleanEx()
> nameEx("var_group_proc")
> ### * var_group_proc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: var_group_proc
> ### Title: Process group numeric variables
> ### Aliases: var_group_proc
> 
> ### ** Examples
> 
> dat = data.frame(id = c(1,1,1,2,2,3,3,3,4,4,4,4,4,5,5,6,7,7,
+                             8,8,8,9,9,9,10,10,11,11,11,11,11,11),
+                      terms = c('a','b','c','a','c','d','d','a',
+                                'b','c','a','c','d','a','c',
+                                   'd','a','e','f','b','c','f','b',
+                                'c','h','h','i','c','d','g','k','k'),
+                      time = c(8,3,1,9,6,1,4,9,1,3,4,8,2,7,1,
+                               3,4,1,8,7,2,5,7,8,8,2,1,5,7,2,7,3))
> 
> time_series_proc(dat = dat, ID = 'id', group = 'terms',time = 'time')
   id time_interval_cnt_x_a time_interval_cnt_x_b time_interval_cnt_x_c
1   1                     1                     1                     1
2  10                     0                     0                     0
3  11                     0                     0                     1
4   2                     1                     0                     1
5   3                     1                     0                     0
6   4                     1                     1                     2
7   5                     1                     0                     1
8   6                     0                     0                     0
9   7                     1                     0                     0
10  8                     0                     1                     1
11  9                     0                     1                     1
   time_interval_cnt_x_d time_interval_cnt_x_e time_interval_cnt_x_f
1                      0                     0                     0
2                      0                     0                     0
3                      1                     0                     0
4                      0                     0                     0
5                      2                     0                     0
6                      1                     0                     0
7                      0                     0                     0
8                      1                     0                     0
9                      0                     1                     0
10                     0                     0                     1
11                     0                     0                     1
   time_interval_cnt_x_g time_interval_cnt_x_h time_interval_cnt_x_i
1                      0                     0                     0
2                      0                     2                     0
3                      1                     0                     1
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     0
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     0
11                     0                     0                     0
   time_interval_cnt_x_k time_interval_sum_x_a time_interval_sum_x_b
1                      0                     0                     5
2                      0                     0                     0
3                      2                     0                     0
4                      0                     0                     0
5                      0                     0                     0
6                      0                     4                     1
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     1
11                     0                     0                     1
   time_interval_sum_x_c time_interval_sum_x_d time_interval_sum_x_e
1                      2                     0                     0
2                      0                     0                     0
3                      2                     0                     0
4                      3                     0                     0
5                      0                     8                     0
6                      1                     1                     0
7                      6                     0                     0
8                      0                     0                     0
9                      0                     0                     3
10                     5                     0                     0
11                     0                     0                     0
   time_interval_sum_x_f time_interval_sum_x_g time_interval_sum_x_h
1                      0                     0                     0
2                      0                     0                     6
3                      0                     1                     0
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     0
7                      0                     0                     0
8                      0                     0                     0
9                      0                     0                     0
10                     0                     0                     0
11                     2                     0                     0
   time_interval_sum_x_i time_interval_sum_x_k time_interval_max_x_a
1                      0                     0                     0
2                      0                     0                    NA
3                      1                     2                    NA
4                      0                     0                     0
5                      0                     0                     0
6                      0                     0                     4
7                      0                     0                     0
8                      0                     0                    NA
9                      0                     0                     0
10                     0                     0                    NA
11                     0                     0                    NA
   time_interval_max_x_b time_interval_max_x_c time_interval_max_x_d
1                      5                     2                    NA
2                     NA                    NA                    NA
3                     NA                     2                     0
4                     NA                     3                    NA
5                     NA                    NA                     5
6                      1                     1                     1
7                     NA                     6                    NA
8                     NA                    NA                     0
9                     NA                    NA                    NA
10                     1                     5                    NA
11                     1                     0                    NA
   time_interval_max_x_e time_interval_max_x_f time_interval_max_x_g
1                     NA                    NA                    NA
2                     NA                    NA                    NA
3                     NA                    NA                     1
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                      3                    NA                    NA
10                    NA                     0                    NA
11                    NA                     2                    NA
   time_interval_max_x_h time_interval_max_x_i time_interval_max_x_k
1                     NA                    NA                    NA
2                      6                    NA                    NA
3                     NA                     1                     2
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                    NA                    NA                    NA
11                    NA                    NA                    NA
   time_interval_min_x_a time_interval_min_x_b time_interval_min_x_c
1                      0                     5                     2
2                     NA                    NA                    NA
3                     NA                    NA                     2
4                      0                    NA                     3
5                      0                    NA                    NA
6                      4                     1                     0
7                      0                    NA                     6
8                     NA                    NA                    NA
9                      0                    NA                    NA
10                    NA                     1                     5
11                    NA                     1                     0
   time_interval_min_x_d time_interval_min_x_e time_interval_min_x_f
1                     NA                    NA                    NA
2                     NA                    NA                    NA
3                      0                    NA                    NA
4                     NA                    NA                    NA
5                      3                    NA                    NA
6                      1                    NA                    NA
7                     NA                    NA                    NA
8                      0                    NA                    NA
9                     NA                     3                    NA
10                    NA                    NA                     0
11                    NA                    NA                     2
   time_interval_min_x_g time_interval_min_x_h time_interval_min_x_i
1                     NA                    NA                    NA
2                     NA                     0                    NA
3                      1                    NA                     1
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                    NA                    NA                    NA
11                    NA                    NA                    NA
   time_interval_min_x_k time_interval_avg_x_a time_interval_avg_x_b
1                     NA                     0                     5
2                     NA                    NA                    NA
3                      0                    NA                    NA
4                     NA                     0                    NA
5                     NA                     0                    NA
6                     NA                     4                     1
7                     NA                     0                    NA
8                     NA                    NA                    NA
9                     NA                     0                    NA
10                    NA                    NA                     1
11                    NA                    NA                     1
   time_interval_avg_x_c time_interval_avg_x_d time_interval_avg_x_e
1                    2.0                    NA                    NA
2                     NA                    NA                    NA
3                    2.0                     0                    NA
4                    3.0                    NA                    NA
5                     NA                     4                    NA
6                    0.5                     1                    NA
7                    6.0                    NA                    NA
8                     NA                     0                    NA
9                     NA                    NA                     3
10                   5.0                    NA                    NA
11                   0.0                    NA                    NA
   time_interval_avg_x_f time_interval_avg_x_g time_interval_avg_x_h
1                     NA                    NA                    NA
2                     NA                    NA                     3
3                     NA                     1                    NA
4                     NA                    NA                    NA
5                     NA                    NA                    NA
6                     NA                    NA                    NA
7                     NA                    NA                    NA
8                     NA                    NA                    NA
9                     NA                    NA                    NA
10                     0                    NA                    NA
11                     2                    NA                    NA
   time_interval_avg_x_i time_interval_avg_x_k
1                     NA                    NA
2                     NA                    NA
3                      1                     1
4                     NA                    NA
5                     NA                    NA
6                     NA                    NA
7                     NA                    NA
8                     NA                    NA
9                     NA                    NA
10                    NA                    NA
11                    NA                    NA
> 
> 
> 
> cleanEx()
> nameEx("woe_trans_all")
> ### * woe_trans_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: woe_trans_all
> ### Title: WOE Transformation
> ### Aliases: woe_trans_all woe_trans
> 
> ### ** Examples
> 
> sub = cv_split(UCICreditCard, k = 30)[[1]]
> dat = UCICreditCard[sub,]
> dat = re_name(dat, "default.payment.next.month", "target")
> dat = data_cleansing(dat, target = "target", obs_id = "ID", occur_time = "apply_date",
+ miss_values =  list("", -1))
[30m-- Cleansing data[39m
[30m-- Checking data and target format...[39m
[30m-- Replacing null or blank or miss_values with NA[39m
[30m-- Formating time variables[39m
[30m-- Deleting low variance variables[39m
[30m-- Processing NAs & special value rate is more than 0.98[39m
[30m-- Transfering character variables which are actually numerical to numeric[39m
[30m-- Removing duplicated observations[39m
[30m-- Merging categories...[39m
> 
> train_test <- train_test_split(dat, split_type = "OOT", prop = 0.7,
+                                 occur_time = "apply_date")
> dat_train = train_test$train
> dat_test = train_test$test
> #get breaks of all predictive variables
> x_list = c("PAY_0", "LIMIT_BAL", "PAY_AMT5", "EDUCATION", "PAY_3", "PAY_2")
> breaks_list <- get_breaks_all(dat = dat_train, target = "target",
+                               x_list = x_list, occur_time = "apply_date", ex_cols = "ID",
+ save_data = FALSE, note  = FALSE)
> #woe transform
> train_woe = woe_trans_all(dat = dat_train,
+                           target = "target",
+                           breaks_list = breaks_list,
+                           woe_name = FALSE)
> test_woe = woe_trans_all(dat = dat_test,
+                        target = "target",
+                          breaks_list = breaks_list,
+                          note = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("xgb_filter")
> ### * xgb_filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xgb_filter
> ### Title: Select Features using XGB
> ### Aliases: xgb_filter
> 
> ### ** Examples
> 
> dat = UCICreditCard[1:1000,c(2,4,8:9,26)]
> xgb_params = list(nrounds = 100, max_depth = 6, eta = 0.1,
+                                        min_child_weight = 1, subsample = 1,
+                                        colsample_bytree = 1, gamma = 0, scale_pos_weight = 1,
+                                        early_stopping_rounds = 10,
+                                        objective = "binary:logistic")
> ## Not run: 
> ##D xgb_features <- xgb_filter(dat_train = dat, dat_test = NULL,
> ##D target = "default.payment.next.month", occur_time = "apply_date",f_eval = 'ks',
> ##D xgb_params = xgb_params,
> ##D cv_folds = 1, ex_cols = "ID$|date$|default.payment.next.month$", vars_name = FALSE)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  28.905 1.544 31.098 0.004 0.01 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
