
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BiodiversityR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BiodiversityR')
Loading required package: tcltk
Warning in fun(libname, pkgname) : couldn't connect to display ""
Loading required package: vegan
Loading required package: permute
Loading required package: lattice
This is vegan 2.5-6
Loading required package: vegan3d
Loading required package: rgl
BiodiversityR 2.11-3: Use command BiodiversityRGUI() to launch the Graphical User Interface; 
to see changes use BiodiversityRGUI(changeLog=TRUE, backward.compatibility.messages=TRUE)

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BCI.env")
> ### * BCI.env
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BCI.env
> ### Title: Barro Colorado Island Quadrat Descriptions
> ### Aliases: BCI.env
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(BCI.env)
> 
> 
> 
> cleanEx()
> nameEx("CAPdiscrim")
> ### * CAPdiscrim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CAPdiscrim
> ### Title: Canonical Analysis of Principal Coordinates based on
> ###   Discriminant Analysis
> ### Aliases: CAPdiscrim
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(MASS)
> data(dune)
> data(dune.env)
> Ordination.model1 <- CAPdiscrim(dune~Management, data=dune.env,
+     dist="bray", axes=2, m=0, add=FALSE)
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=9) : 80 percent
BF (n=3) correct: 66.6666666666667 percent
HF (n=5) correct: 80 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 83.3333333333333 percent
> Ordination.model1
$PCoA
           [,1]        [,2]
1  -0.354731824 -0.25667235
2  -0.294623175 -0.18609437
3  -0.072766810 -0.29087086
4  -0.069254226 -0.26419764
5  -0.307061999  0.03031589
6  -0.253029739  0.09420852
7  -0.309637397 -0.01907463
8   0.177260586 -0.17009732
9   0.017426334 -0.24665976
10 -0.311237266  0.05463911
11 -0.202311892  0.14112953
12  0.195476024 -0.12593358
13  0.179872241 -0.21517061
14  0.430105128  0.08612320
15  0.487717332  0.11499380
16  0.511213763 -0.11088546
17 -0.194826335  0.49654590
18 -0.133395447  0.24105452
19 -0.005394285  0.46911606
20  0.509198987  0.15753005

$m
[1] 9

$tot
[1] 4.299022

$varm
[1] 103.2328

$group
 [1] SF BF SF SF HF HF HF HF HF BF BF SF SF NM NM SF NM NM NM NM
Levels: BF HF NM SF

$CV
 [1] HF BF SF SF HF HF HF BF HF BF NM SF SF NM NM SF BF NM NM NM
Levels: BF HF NM SF

$percent
[1] 80

$percent.level
      BF       HF       NM       SF 
66.66667 80.00000 83.33333 83.33333 

$x
          LD1        LD2          LD3        LD4
1   5.8305320  0.4026242  0.825572145 -1.7515910
2   0.2267669  0.7035731  2.230284757  0.2956545
3   7.6838717  1.4689211  0.165897248  0.4650892
4   6.8020968  1.4575133  0.501196865 -0.6864080
5  -0.9228825 -3.2667376 -0.887317158  0.7864957
6   0.4808316 -3.0558530  0.617688748  0.3695349
7   1.5198005 -3.4039009  0.189534015  0.4185788
8   1.9520256 -0.2039091  0.026932247 -0.7047513
9   0.8179625 -3.7603827 -0.639980450 -0.8698580
10 -0.7129398  0.1770796  2.285444837  0.2064806
11 -2.1898031  0.8642107  2.102259637 -0.5021352
12  7.0212215 -0.2837824 -0.472283142  0.9769155
13  5.4533989  1.5984571 -1.194564785  1.8898769
14 -7.9754786  1.1082305  1.053517388 -0.4123362
15 -5.6604662 -0.4489733 -1.232664000 -1.0230906
16  5.8988556  2.3419551 -2.340786812 -0.8938826
17 -5.5544143  1.0452679 -1.168069292  1.0601998
18 -6.5846948  0.7706731  0.234356229  0.8097752
19 -7.3731997  1.9193372  0.008850564  0.5772938
20 -6.7134846  0.5656962 -2.305869042 -1.0118421

$F
[1] 1.732200e+02 1.691211e+01 5.895802e+00 1.209407e-30

$lda.CV
$lda.CV$class
 [1] HF BF SF SF HF HF HF BF HF BF NM SF SF NM NM SF BF NM NM NM
Levels: BF HF NM SF

$lda.CV$posterior
             BF           HF           NM            SF
1  1.635108e-02 9.836290e-01 9.329437e-25  1.996927e-05
2  8.445839e-01 1.554158e-01 8.685998e-13  2.662189e-07
3  2.067207e-18 1.036893e-15 2.121471e-49  1.000000e+00
4  1.018810e-12 6.869828e-12 5.696720e-39  1.000000e+00
5  3.197147e-03 9.967728e-01 3.004823e-05  7.435337e-26
6  3.500299e-03 9.964997e-01 4.360987e-13  1.048608e-11
7  4.901856e-06 9.999951e-01 2.692818e-19  2.330395e-09
8  9.999389e-01 7.064353e-08 1.889570e-17  6.104159e-05
9  4.638546e-08 1.000000e+00 1.322701e-16  3.182448e-12
10 9.950037e-01 4.996294e-03 9.051345e-09  9.875521e-12
11 3.351699e-04 2.019018e-06 9.996628e-01  9.497559e-27
12 8.238296e-16 5.606681e-06 1.907912e-43  9.999944e-01
13 3.114379e-04 1.574456e-02 1.495085e-22  9.839440e-01
14 4.260336e-13 2.813217e-57 1.000000e+00 1.915461e-130
15 2.676088e-06 1.481937e-09 9.999973e-01  1.570754e-30
16 2.396641e-13 8.699813e-11 2.372008e-27  1.000000e+00
17 9.874689e-01 1.253057e-02 5.153151e-07  3.641291e-20
18 1.650385e-02 6.720838e-10 9.834961e-01  4.398327e-31
19 7.450090e-11 3.394703e-28 1.000000e+00  2.563095e-49
20 1.229944e-12 4.038294e-14 1.000000e+00  8.630443e-36

$lda.CV$terms
y[, group] ~ points[, 1:m]
attr(,"variables")
list(y[, group], points[, 1:m])
attr(,"factors")
              points[, 1:m]
y[, group]                0
points[, 1:m]             1
attr(,"term.labels")
[1] "points[, 1:m]"
attr(,"order")
[1] 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: 0x7fe174929af0>
attr(,"predvars")
list(y[, group], points[, 1:m])
attr(,"dataClasses")
   y[, group] points[, 1:m] 
     "factor"   "nmatrix.9" 

$lda.CV$call
lda(formula = y[, group] ~ points[, 1:m], CV = T, tol = 1e-25)

$lda.CV$xlevels
named list()


$lda.other
Call:
lda(y[, group] ~ points[, 1:m], tol = 1e-25)

Prior probabilities of groups:
  BF   HF   NM   SF 
0.15 0.25 0.30 0.30 

Group means:
   points[, 1:m]1 points[, 1:m]2 points[, 1:m]3 points[, 1:m]4 points[, 1:m]5
BF    -0.26939078    0.003224758     0.07059623   0.0365176013    -0.03906191
HF    -0.13500844   -0.062261461    -0.03936891  -0.0116638213    -0.07742224
NM     0.18223423    0.260893923     0.03701747  -0.0008248134     0.01137607
SF     0.06496819   -0.210621751    -0.03950816  -0.0077141361     0.07267341
   points[, 1:m]6 points[, 1:m]7 points[, 1:m]8 points[, 1:m]9
BF    -0.13313620   -0.032884618     0.02677903    0.003963915
HF     0.10216614   -0.009220665    -0.01995854    0.043727366
NM    -0.02767144    0.026160728    -0.02166328    0.007269786
SF     0.00910109   -0.002034532     0.02490588   -0.045691215

Coefficients of linear discriminants:
                      LD1         LD2        LD3        LD4
points[, 1:m]1  -2.732219   2.0969568 -2.7455197 -0.8476260
points[, 1:m]2 -18.951106   0.8758651 -0.5503151  0.9932539
points[, 1:m]3  -7.470835   1.6241436  1.9300473 -4.1932284
points[, 1:m]4  -1.100718   0.5692441  1.3551259 -1.0448937
points[, 1:m]5   7.994519   7.3318845 -2.9094858 -1.7087181
points[, 1:m]6   9.603168  -9.4759862 -7.0865173 -1.2326855
points[, 1:m]7  -6.515610   1.4342701 -3.3259104  0.8072247
points[, 1:m]8  17.978819   5.2822369  4.0031043 -2.8312064
points[, 1:m]9 -26.290587 -15.4482293  2.2000350 -6.5241334

Proportion of trace:
   LD1    LD2    LD3    LD4 
0.8836 0.0863 0.0301 0.0000 

$manova
           Df Pillai approx F num Df den Df    Pr(>F)    
y[, group]  3 2.2554   3.3657     27     30 0.0008046 ***
Residuals  16                                            
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$signi
[1] NA

$permutations
NULL

> plot1 <- ordiplot(Ordination.model1, type="none")
species scores not available
> ordisymbol(plot1, dune.env, "Management", legend=TRUE)
> 
> # plot change in classification success against m
> plot(seq(1:14), rep(-1000, 14), xlim=c(1, 14), ylim=c(0, 100), xlab="m", 
+     ylab="classification success (percent)", type="n")
> for (mseq in 1:14) {
+     CAPdiscrim.result <- CAPdiscrim(dune~Management, data=dune.env, 
+         dist="bray", axes=2, m=mseq)
+     points(mseq, CAPdiscrim.result$percent)
+ }
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=1) : 40 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 50 percent
SF (n=6) correct: 33.3333333333333 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=2) : 60 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 40 percent
NM (n=6) correct: 100 percent
SF (n=6) correct: 66.6666666666667 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=3) : 60 percent
BF (n=3) correct: 33.3333333333333 percent
HF (n=5) correct: 40 percent
NM (n=6) correct: 100 percent
SF (n=6) correct: 50 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=4) : 50 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 40 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 50 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=5) : 50 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 40 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 50 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=6) : 60 percent
BF (n=3) correct: 66.6666666666667 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 66.6666666666667 percent
SF (n=6) correct: 50 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=7) : 60 percent
BF (n=3) correct: 66.6666666666667 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 66.6666666666667 percent
SF (n=6) correct: 50 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=8) : 60 percent
BF (n=3) correct: 66.6666666666667 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 33.3333333333333 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=9) : 80 percent
BF (n=3) correct: 66.6666666666667 percent
HF (n=5) correct: 80 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 83.3333333333333 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=10) : 70 percent
BF (n=3) correct: 33.3333333333333 percent
HF (n=5) correct: 80 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 66.6666666666667 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=11) : 65 percent
BF (n=3) correct: 33.3333333333333 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 83.3333333333333 percent
SF (n=6) correct: 66.6666666666667 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=12) : 60 percent
BF (n=3) correct: 33.3333333333333 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 66.6666666666667 percent
SF (n=6) correct: 66.6666666666667 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=13) : 55 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 60 percent
NM (n=6) correct: 66.6666666666667 percent
SF (n=6) correct: 66.6666666666667 percent
Warning in cmdscale(distmatrix, k = nrow(x) - 1, eig = T, add = add) :
  only 14 of the first 19 eigenvalues are > 0
Overall classification success (m=14) : 40 percent
BF (n=3) correct: 0 percent
HF (n=5) correct: 40 percent
NM (n=6) correct: 33.3333333333333 percent
SF (n=6) correct: 66.6666666666667 percent
> 
> #
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("NMSrandom")
> ### * NMSrandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NMSrandom
> ### Title: Calculate the NMS Result with the Smallest Stress from Various
> ###   Random Starts
> ### Aliases: NMSrandom
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(MASS)
> data(dune)
> distmatrix <- vegdist(dune)
> Ordination.model1 <- NMSrandom(distmatrix,perm=100,k=2)
> Ordination.model1 <- add.spec.scores(Ordination.model1,dune, 
+     method='wa.scores')
> Ordination.model1
$points
         [,1]       [,2]
1   5.3029401 -5.4294049
2   3.1473981 -3.1501189
3   3.4602772 -0.2036346
4   4.0479918 -0.4568325
5   0.8696131 -3.9661136
6  -0.4978791 -3.2760448
7   0.7016811 -3.3274277
8   1.6660075  2.4314232
9   3.4987154  1.1510534
10  0.1292358 -3.1908136
11 -2.0072437 -1.8029655
12  3.1222026  3.4880343
13  4.5832454  3.3014521
14 -2.6397136  7.0743094
15 -0.8620984  6.8314602
16  1.9224201  8.0234875
17 -6.7453195 -5.1504460
18 -3.2315155 -0.7009055
19 -6.7060018  0.2917171
20 -1.1554340  7.8733925

$stress
[1] 11.91294

$cproj
                Dim1        Dim2
Achimill  0.24489181 -3.69269251
Agrostol  1.92630792  3.96507305
Airaprae -6.72172887 -1.88514811
Alopgeni  3.13951202  2.31878935
Anthodor -2.37619830 -3.07360067
Bellpere  1.53795380 -2.03745817
Bromhord  1.89287332 -2.75475401
Chenalbu  4.58324544  3.30145215
Cirsarve  4.04799185 -0.45683252
Comapalu -1.75090601  6.95288484
Eleopalu  0.10209233  6.71446809
Elymrepe  3.39635284 -1.76608067
Empenigr -6.70600181  0.29171715
Hyporadi -5.67057059 -1.38313747
Juncarti  1.06767336  5.02157333
Juncbufo  3.20282852  1.67737323
Lolipere  1.56455812 -2.17163987
Planlanc -0.90200512 -3.08587985
Poaprat   1.58792718 -1.55269039
Poatriv   2.58144869 -0.43688451
Ranuflam  0.33699899  6.20127395
Rumeacet  0.92820391 -2.23283025
Sagiproc  1.40461068  1.13525263
Salirepe -3.23542929  3.46721797
Scorautu -0.50865013 -0.23498144
Trifprat  0.07257699 -3.44081185
Trifrepe  0.38081402  0.03630155
Vicilath -1.77919175 -1.87441252
Bracruta -0.19730495  1.21515092
Callcusp -0.82578960  7.59878779

> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("PCAsignificance")
> ### * PCAsignificance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PCAsignificance
> ### Title: PCA Significance
> ### Aliases: PCAsignificance ordiequilibriumcircle
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> Ordination.model1 <- rda(dune)
> PCAsignificance(Ordination.model1)
                                         1        2         3         4
eigenvalue                        24.79532 18.14662  7.629135  7.152772
percentage of variance            29.47484 21.57136  9.068950  8.502685
cumulative percentage of variance 29.47484 51.04620 60.115145 68.617831
broken-stick percentage           18.67231 13.40916 10.777577  9.023191
broken-stick cumulative %         18.67231 32.08147 42.859047 51.882238
% > bs%                            1.00000  1.00000  0.000000  0.000000
cum% > bs cum%                     1.00000  1.00000  1.000000  1.000000
                                          5         6         7         8
eigenvalue                         5.695027  4.333307  3.199365  2.781865
percentage of variance             6.769826  5.151114  3.803168  3.306874
cumulative percentage of variance 75.387656 80.538770 84.341937 87.648812
broken-stick percentage            7.707402  6.654770  5.777577  5.025697
broken-stick cumulative %         59.589640 66.244410 72.021987 77.047685
% > bs%                            0.000000  0.000000  0.000000  0.000000
cum% > bs cum%                     1.000000  1.000000  1.000000  1.000000
> plot1 <- ordiplot(Ordination.model1, choices=c(1,2), scaling=1)
> ordiequilibriumcircle(Ordination.model1,plot1)
$radius
[1] 2.051427

$constant
[1] 6.322924

> 
> 
> 
> cleanEx()
> nameEx("accumresult")
> ### * accumresult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: accumresult
> ### Title: Alternative Species Accumulation Curve Results
> ### Aliases: accumresult accumplot accumcomp
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> data(dune)
> dune.env$site.totals <- apply(dune,1,sum)
> Accum.1 <- accumresult(dune, y=dune.env, scale='site.totals', method='exact', conditioned=TRUE)
> Accum.1
Species Accumulation Curve
Accumulation method: exact
Call: specaccum(comm = x, method = method, permutations = permutations,      conditioned = conditioned, gamma = gamma) 

                                                                              
Sites    34.2500 68.5000 102.7500 137.0000 171.2500 205.5000 239.7500 274.0000
Richness  9.8500 15.1105  18.5105  20.9375  22.7543  24.1496  25.2396  26.1035
sd        2.3511  1.8764   1.5723   1.4470   1.3902   1.3530   1.3165   1.2749
                                                                       
Sites    308.2500 342.5000 376.7500 411.0000 445.2500 479.5000 513.7500
Richness  26.7982  27.3650  27.8340  28.2275  28.5620  28.8496  29.0996
sd         1.2282   1.1763   1.1193   1.0565   0.9874   0.9116   0.8287
                                                
Sites    548.0000 582.2500 616.5000 650.7500 685
Richness  29.3191  29.5140  29.6895  29.8500  30
sd         0.7381   0.6334   0.5140   0.3571   0
> accumplot(Accum.1)
> accumcomp(dune, y=dune.env, factor='Management', method='exact', legend=FALSE, conditioned=TRUE)
, ,  = Sites

          obs
Management 1 2 3  4  5  6
        BF 1 2 3 NA NA NA
        HF 1 2 3  4  5 NA
        NM 1 2 3  4  5  6
        SF 1 2 3  4  5  6

, ,  = Richness

          obs
Management         1        2     3        4        5  6
        BF 10.333333 14.33333 16.00       NA       NA NA
        HF 12.600000 16.70000 19.10 20.40000 21.00000 NA
        NM  8.000000 12.86667 16.20 18.46667 20.00000 21
        SF  9.166667 13.60000 16.25 18.13333 19.66667 21

, ,  = sd

          obs
Management         1         2        3        4        5  6
        BF 1.2472191 0.4714045 0.000000       NA       NA NA
        HF 1.0198039 1.3343708 1.732051 0.800000 0.000000 NA
        NM 0.8164966 1.0011583 1.346070 1.642761 1.154701  0
        SF 2.4094720 1.4282970 1.225156 1.231079 0.942809  0

> ## CLICK IN THE GRAPH TO INDICATE WHERE THE LEGEND NEEDS TO BE PLACED FOR
> ## OPTION WHERE LEGEND=TRUE (DEFAULT).
> 
> 
> 
> cleanEx()
> nameEx("add.spec.scores")
> ### * add.spec.scores
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add.spec.scores
> ### Title: Add Species Scores to Unconstrained Ordination Results
> ### Aliases: add.spec.scores
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> distmatrix <-vegdist(dune, method="euc")
> # Principal coordinates analysis with 19 axes to estimate total variance
> Ordination.model1 <- cmdscale (distmatrix, k=19, eig=TRUE, add=FALSE)
> # Change scores for second axis
> Ordination.model1$points[,2] <- -1.0 * Ordination.model1$points[,2]
> Ordination.model1 <- add.spec.scores(Ordination.model1, dune, 
+     method='pcoa.scores', Rscale=TRUE, scaling=1, multi=1)
> # Compare Ordination.model1 with PCA
> Ordination.model2 <- rda(dune, scale=FALSE)
> #
> par(mfrow=c(1,2))
> ordiplot(Ordination.model1, type="text")
> abline(h = 0, lty = 3)
> abline(v = 0, lty = 3)
> plot(Ordination.model2, type="text", scaling=1)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("balanced.specaccum")
> ### * balanced.specaccum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: balanced.specaccum
> ### Title: Balanced Species Accumulation Curves
> ### Aliases: balanced.specaccum
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> data(dune)
> 
> # not balancing species accumulation
> Accum.orig <- specaccum(dune)
> Accum.orig
Species Accumulation Curve
Accumulation method: exact
Call: specaccum(comm = dune) 

                                                                            
Sites    1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  7.00000
Richness 9.850000 15.110526 18.510526 20.937461 22.754321 24.149587 25.23956
sd       2.351064  1.876385  1.572271  1.446958  1.390159  1.353035  1.31648
                                                                             
Sites     8.000000  9.000000 10.000000 11.000000 12.000000 13.000000 14.00000
Richness 26.103548 26.798244 27.364962 27.833984 28.227546 28.562036 28.84964
sd        1.274903  1.228201  1.176341  1.119344  1.056454  0.987409  0.91160
                                                            
Sites    15.000000 16.000000 17.00000 18.000000 19.000000 20
Richness 29.099587 29.319092 29.51403 29.689474 29.850000 30
sd        0.828689  0.738092  0.63339  0.513971  0.357071  0
> 
> # randomly sample 3 quadrats from each stratum of Management
> Accum.1 <- balanced.specaccum(dune, strata=dune.env$Management, reps=3)
> Accum.1
Species Accumulation Curve
Accumulation method: balanced species accumulation
Call: balanced.specaccum(comm = dune, strata = dune.env$Management,      reps = 3) 

                                                                              
Sites     1.000000  2.000000  3.000000  4.000000  5.000000  6.000000  7.000000
Richness 10.450000 14.680000 17.270000 20.220000 21.920000 23.090000 24.550000
sd        2.354343  2.054215  1.791422  2.125269  2.008467  2.132457  1.976503
                                                         
Sites     8.00000  9.000000 10.000000 11.000000 12.000000
Richness 25.40000 25.900000 26.890000 27.490000 27.870000
sd        1.74657  1.778093  1.347613  1.087068  1.097794
> 
> # scale results by number of trees per quadrat
> dune.env$site.totals <- apply(dune,1,sum)
> Accum.2 <- balanced.specaccum(dune, strata=dune.env$Management, reps=3, scale=dune.env$site.totals)
> Accum.2
Species Accumulation Curve
Accumulation method: balanced species accumulation
Call: balanced.specaccum(comm = dune, strata = dune.env$Management,      reps = 3, scale = dune.env$site.totals) 

                                                                              
Sites    35.1917 70.3833 105.5750 140.7667 175.9583 211.1500 246.3417 281.5333
Richness 10.3800 14.5800  16.9500  19.9400  21.7400  22.8200  24.3200  25.3600
sd        2.0782  2.0009   1.7774   2.0539   2.1725   2.0567   1.8957   1.7611
                                            
Sites    316.7250 351.9167 387.1083 422.3000
Richness  26.0300  26.9800  27.5800  28.0100
sd         1.8004   1.4838   1.2727   1.1236
> 
> 
> 
> cleanEx()
> nameEx("caprescale")
> ### * caprescale
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: caprescale
> ### Title: Rescaling of Capscale Results to Reflect Total Sums of Squares
> ###   Of Distance Matrix
> ### Aliases: caprescale
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(MASS)
> data(dune)
> data(dune.env)
> Distmatrix.1 <- vegdist(dune,method='bray')
> Ordination.model1 <- cmdscale(Distmatrix.1, k=19, eig=TRUE, add=FALSE)
Warning in cmdscale(Distmatrix.1, k = 19, eig = TRUE, add = FALSE) :
  only 14 of the first 19 eigenvalues are > 0
> # Sum of all eigenvalues
> sum(Ordination.model1$eig)
[1] 4.299022
> # [1] 4.395807541512926
> sum(Ordination.model1$eig[1:14])
[1] 4.593947
> # [1] 4.593946896588808
> Distmatrix.2 <- as.matrix(vegdist(Ordination.model1$points[,1:14],method='euc'))
> totalsumsquares1 <- sum(Distmatrix.2^2)/(2*20)
> # Sum of distances among sites in principal coordinates analysis on axes
> # corresponding to positive eigenvalues
> totalsumsquares1
[1] 4.593947
> # [1] 4.593946896588808
> Ordination.model2 <- capscale(dune ~ Management,dune.env,dist='bray', add=FALSE)
> # Total sums of positive eigenvalues of the distance-based redundancy analysis
> Ordination.model2$CA$tot.chi+Ordination.model2$CCA$tot.chi
[1] 4.593947
> # [1] 4.593946896588808
> Ordination.model3 <- caprescale(Ordination.model2, verbose=TRUE)
SSTot obtained from sum of all eigenvalues: 4.593947 
SSTot obtained from sum of all positive eigenvalues: 4.593947 
SSTot reflected by distances among site scores on all axes: 5.807295 
SSExpl obtained from eigenvalues of constrained axes: 1.500137 
SSExpl reflected by distances among site scores on constrained axes (scaling 1): 2.713486 
SSExpl reflected by distances among fitted site scores on constrained axes (scaling 1): 1.500137 
SSRes obtained from eigenvalues of positive unconstrained axes: 3.093809 
SSRes reflected by distances among site scores on positive unconstrained axes (scaling 1): 3.093809 
> sum1 <- summary(Ordination.model3,axes=17,scaling=1)$constraints
> Distmatrix.3 <- as.matrix(vegdist(sum1 ,method='euc'))
> totalsumsquares2 <- sum((Distmatrix.3)^2)/(2*20)/19
> totalsumsquares2
[1] 4.593947
> # [1] 4.593946896588808
> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("crosstabanalysis")
> ### * crosstabanalysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: crosstabanalysis
> ### Title: Presence-absence Analysis by Cross Tabulation
> ### Aliases: crosstabanalysis
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> crosstabanalysis(dune.env,"Manure","Management")
Warning in chisq.test(cross) :
  Chi-squared approximation may be incorrect

	Pearson's Chi-squared test

data:  cross
X-squared = 20, df = 3, p-value = 0.0001697

> 
> 
> 
> cleanEx()
> nameEx("deviancepercentage")
> ### * deviancepercentage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: deviancepercentage
> ### Title: Calculate Percentage and Significance of Deviance Explained by a
> ###   GLM
> ### Aliases: deviancepercentage
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> data(dune.env)
> dune.env$Agrostol <- dune$Agrostol
> Count.model1 <- glm(Agrostol ~ Management + A1, family=quasipoisson(link=log), 
+     data=dune.env, na.action=na.omit)
> summary(Count.model1)

Call:
glm(formula = Agrostol ~ Management + A1, family = quasipoisson(link = log), 
    data = dune.env, na.action = na.omit)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.5977  -1.6315  -0.1577   0.5328   2.4926  

Coefficients:
              Estimate Std. Error t value Pr(>|t|)
(Intercept)   -17.8335  3059.4626  -0.006    0.995
ManagementHF   17.4949  3059.4626   0.006    0.996
ManagementNM   17.5355  3059.4626   0.006    0.996
ManagementSF   18.6167  3059.4626   0.006    0.995
A1              0.1546     0.1105   1.399    0.182

(Dispersion parameter for quasipoisson family taken to be 2.335144)

    Null deviance: 70.701  on 19  degrees of freedom
Residual deviance: 39.111  on 15  degrees of freedom
AIC: NA

Number of Fisher Scoring iterations: 15

> deviancepercentage(Count.model1, dune.env, digits=3)
Deviance explained:  31.59 / 70.701 ( 44.7 percent)

Analysis of Deviance Table

Model 1: Agrostol ~ 1
Model 2: Agrostol ~ Management + A1
  Resid. Df Resid. Dev Df Deviance     F  Pr(>F)  
1        19     70.701                            
2        15     39.111  4    31.59 3.382 0.03671 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
> 
> 
> 
> cleanEx()
> nameEx("dist.eval")
> ### * dist.eval
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist.eval
> ### Title: Distance Matrix Evaluation
> ### Aliases: dist.eval prepare.bioenv
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> dist.eval(dune,"euclidean")
Warning: min distance for sites with no shared species( 12.84523 ) < max dist for other sites( 18.35756 )
Choose other distance measure or stepacross
Connectivity of distance matrix with threshold dissimilarity 1 
Data are disconnected: 20 groups
Groups sizes
 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> dist.eval(dune,"bray")
Connectivity of distance matrix with threshold dissimilarity 1 
Data are connected
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
> 
> ## Not run: 
> ##D data(dune.env)
> ##D dune.env2 <- dune.env[,c('A1', 'Moisture', 'Manure')]
> ##D dune.env2$Moisture <- as.numeric(dune.env2$Moisture)
> ##D dune.env2$Manure <- as.numeric(dune.env2$Manure)
> ##D sol <- bioenv(dune ~ A1 + Moisture + Manure, dune.env2)
> ##D sol
> ##D summary(sol)
> ##D dune.env3 <- prepare.bioenv(dune.env, as.numeric=c('Moisture', 'Manure'))
> ##D bioenv(dune, dune.env3)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("dist.zeroes")
> ### * dist.zeroes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist.zeroes
> ### Title: Distance Matrix Transformation
> ### Aliases: dist.zeroes
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> matrix <- array(0,dim=c(5,3))
> matrix[4,] <- c(1,2,3)
> matrix[5,] <- c(1,0,0)
> dist1 <- vegdist(matrix,method="kulc")
Warning in vegdist(matrix, method = "kulc") :
  you have empty rows: their dissimilarities may be meaningless in method “kulczynski”
Warning in vegdist(matrix, method = "kulc") : missing values in results
> dist1
          1         2         3         4
2       NaN                              
3       NaN       NaN                    
4       NaN       NaN       NaN          
5       NaN       NaN       NaN 0.4166667
> dist2 <- dist.zeroes(matrix,dist1)
> dist2
          1         2         3         4
2 0.0000000                              
3 0.0000000 0.0000000                    
4 1.0000000 1.0000000 1.0000000          
5 1.0000000 1.0000000 1.0000000 0.4166667
> 
> 
> 
> cleanEx()
> nameEx("distdisplayed")
> ### * distdisplayed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distdisplayed
> ### Title: Compare Distance Displayed in Ordination Diagram with Distances
> ###   of Distance Matrix
> ### Aliases: distdisplayed
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.
> data(dune)
> distmatrix <- vegdist(dune,method="kulc")
> ordination.model1 <- cmdscale(distmatrix,k=2)
> ordiplot1 <- ordiplot(ordination.model1)
species scores not available
> distdisplayed(dune,ordiplot=ordiplot1,distx="kulc",plotit=TRUE,
+     method="spearman",permutations=100,gam=TRUE)
$gamanalysis

Family: gaussian 
Link function: identity 

Formula:
dist2 ~ s(dist1)

Parametric coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.487297   0.006694    72.8   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Approximate significance of smooth terms:
           edf Ref.df     F p-value    
s(dist1) 1.732  2.176 482.3  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-sq.(adj) =  0.847   Deviance explained = 84.9%
GCV = 0.0086368  Scale est. = 0.0085126  n = 190

$mantelanalysis

Mantel statistic based on Spearman's rank correlation rho 

Call:
mantel(xdis = dist1, ydis = dist2, method = method, permutations = permutations) 

Mantel statistic r: 0.9232 
      Significance: 0.009901 

Upper quantiles of permutations (null model):
  90%   95% 97.5%   99% 
0.120 0.154 0.182 0.210 
Permutation: free
Number of permutations: 100


> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("disttransform")
> ### * disttransform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: disttransform
> ### Title: Community Matrix Transformation
> ### Aliases: disttransform
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> Community.1 <- disttransform(dune, method='hellinger')
> Distmatrix.1 <- vegdist(Community.1,method='euclidean')
> Distmatrix.1
           1         2         3         4         5         6         7
2  0.7678545                                                            
3  0.7920098 0.6264258                                                  
4  0.8943463 0.7192846 0.5400578                                        
5  0.9430999 0.7280506 0.8892324 0.9098505                              
6  1.0171844 0.9282652 0.9547253 1.0354086 0.5091523                    
7  0.9368566 0.8050230 0.9381138 0.9621067 0.4911255 0.3939843          
8  1.0472028 0.9114901 0.6842637 0.7406581 1.0739565 0.9981598 0.9906787
9  0.9222294 0.8320346 0.6317466 0.6840087 0.9005191 0.9497139 0.8931083
10 0.9483916 0.6311564 0.8835514 0.8964769 0.6028827 0.6588449 0.5458461
11 1.0408330 0.9874070 0.9570237 0.9506235 0.9713722 0.8059636 0.8282823
12 1.3321507 1.0716015 0.8575013 0.8555550 1.0890511 1.0431866 1.0323713
13 1.1915289 0.9549890 0.7933204 0.8193681 1.1257986 1.1372754 1.0465416
14 1.4142136 1.2065498 1.1785987 1.1768379 1.2774333 1.2381090 1.2721161
15 1.4142136 1.2855435 1.1509215 1.1340170 1.2547531 1.1929286 1.2484927
16 1.3549458 1.2833725 1.0349070 1.0741993 1.2907012 1.2695209 1.2923709
17 1.2587435 1.1804575 1.2861285 1.3007997 0.9870182 1.0224256 0.9921000
18 1.1602932 0.9880296 0.9522491 1.0216116 0.9198088 0.8375777 0.8800135
19 1.4142136 1.2333429 1.2452061 1.1833092 1.1422506 1.1029492 1.1600329
20 1.4142136 1.3508231 1.2131626 1.1843904 1.3080063 1.2723992 1.3039304
           8         9        10        11        12        13        14
2                                                                       
3                                                                       
4                                                                       
5                                                                       
6                                                                       
7                                                                       
8                                                                       
9  0.6790951                                                            
10 0.9847745 1.0144881                                                  
11 0.9258698 0.9889721 0.7790085                                        
12 0.8185886 0.6793924 1.1414737 1.1061903                              
13 0.7262631 0.7341519 1.1033129 1.1650968 0.6159341                    
14 0.9862972 1.1783602 1.2140666 1.2106180 1.1371854 1.0731862          
15 0.7998785 1.0639632 1.2282368 1.1594401 1.0830508 1.1323853 0.7480211
16 0.7341262 1.0294627 1.3037099 1.3243176 0.9766546 0.9960268 0.9130265
17 1.2793360 1.2966389 0.9586281 1.0595139 1.3510832 1.3011860 1.3376029
18 1.0241152 1.0660445 0.7792063 0.6075805 1.1472449 1.2206524 1.2162987
19 1.1692726 1.1835064 1.1065868 0.9593408 1.1046611 1.2268492 1.2214743
20 0.9117132 1.1384173 1.3080063 1.2430587 1.1679710 1.1770400 0.8779266
          15        16        17        18        19
2                                                   
3                                                   
4                                                   
5                                                   
6                                                   
7                                                   
8                                                   
9                                                   
10                                                  
11                                                  
12                                                  
13                                                  
14                                                  
15                                                  
16 0.7094850                                        
17 1.3359069 1.4142136                              
18 1.1133395 1.2929640 1.1270162                    
19 1.1726671 1.3354355 0.8872667 0.9911680          
20 0.6398055 0.6671950 1.3470354 1.0839671 1.1415556
> 
> 
> 
> cleanEx()
> nameEx("diversityresult")
> ### * diversityresult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diversityresult
> ### Title: Alternative Diversity Results
> ### Aliases: diversityresult diversitycomp diversityvariables
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> library(vegan)
> data(dune.env)
> data(dune)
> 
> diversityresult(dune, y=NULL, index="Shannon", method="each site", 
+     sortit=TRUE, digits=5)
   Shannon
1   1.4405
14  1.8637
17  1.8763
16  1.9598
15  1.9793
20  2.0483
18  2.0794
13  2.0996
11  2.1061
12  2.1145
19  2.1340
3   2.1938
2   2.2525
6   2.3460
10  2.3986
4   2.4268
8   2.4349
7   2.4717
9   2.4936
5   2.5444
> diversityresult(dune, y=dune.env, factor="Management", level="NM", 
+     index="Shannon", method="each site", 
+     sortit=TRUE, digits=5)
   Shannon
14  1.8637
17  1.8763
15  1.9793
20  2.0483
18  2.0794
19  2.1340
> diversityresult(dune, y=NULL, index="Shannon", method="pooled", digits=5)
       Shannon
pooled   3.082
> diversityresult(dune, y=dune.env, factor="Management", level="NM", 
+     index="Shannon", method="pooled", digits=5)
       Shannon
pooled  2.8073
> diversityresult(dune, y=NULL, index="Shannon", method="mean", 
+     digits=5)
     Shannon
mean  2.1632
> diversityresult(dune, y=NULL, index="Shannon", method="sd", 
+     digits=5)
   Shannon
sd 0.27057
> diversityresult(dune, y=NULL, index="Shannon", method="jackknife", 
+     digits=5)
$jack.se
[1] 0.049903

$jack.bias
[1] -0.059187

$jack.values
 [1] 3.0897 3.0891 3.1001 3.0794 3.0734 3.0782 3.0826 3.0912 3.0831 3.0814
[11] 3.0852 3.0840 3.0834 3.0695 3.0742 3.0752 3.0682 3.0819 3.0456 3.0618

$call
bootstrap::jackknife(x = 1:nrow(x), theta = thetadiv, x, index = index)

$jack.estimate
[1] 3.0789

> diversityresult(dune, y=dune.env, factor="Management", level="NM", 
+     index="Shannon", method="jackknife", digits=5)
$jack.se
[1] 0.11001

$jack.bias
[1] -0.19932

$jack.values
[1] 2.7962 2.8258 2.7352 2.7106 2.7135 2.8232

$call
bootstrap::jackknife(x = 1:nrow(x), theta = thetadiv, x, index = index)

$jack.estimate
[1] 2.7674

> 
> diversitycomp(dune, y=dune.env, factor1="Moisture", index="Shannon",
+     method="pooled", sortit=TRUE)
        
Moisture n   Shannon
       4 2 2.4869482
       1 7 2.7023155
       2 4 2.7651279
       5 7 2.7848137
> diversitycomp(dune, y=dune.env, factor1="Moisture", index="Shannon",
+     method="mean", sortit=TRUE)
        
Moisture n   Shannon
       5 7 2.0742305
       1 7 2.1772216
       2 4 2.2238536
       4 2 2.3040318
> diversitycomp(dune, y=dune.env, factor1="Management", index="Shannon",
+     method="jackknife", sortit=TRUE)
          
Management n   Shannon
        BF 3 2.4914938
        SF 6 2.6521467
        NM 6 2.7674012
        HF 5 2.8430835
> 
> diversitycomp(dune, y=dune.env, factor1="Management", factor2="Moisture", 
+     index="Shannon", method="pooled", digits=6)
, ,  = n

          Moisture
Management 1 2 4 5
        BF 2 1 0 0
        HF 3 0 1 1
        NM 1 1 0 4
        SF 1 2 1 2

, ,  = Shannon

          Moisture
Management       1       2       4       5
        BF 2.52291 2.39861      NA      NA
        HF 2.57253      NA 2.49357 2.43490
        NM 2.07939 1.87627      NA 2.57861
        SF 1.44048 2.42596 2.11449 2.38467

> diversitycomp(dune, y=dune.env, factor1="Management", factor2="Moisture", 
+     index="Shannon", method="mean", digits=6)
, ,  = n

          Moisture
Management 1 2 4 5
        BF 2 1 0 0
        HF 3 0 1 1
        NM 1 1 0 4
        SF 1 2 1 2

, ,  = Shannon

          Moisture
Management       1       2       4       5
        BF 2.17929 2.39861      NA      NA
        HF 2.45403      NA 2.49357 2.43490
        NM 2.07939 1.87627      NA 2.00632
        SF 1.44048 2.31026 2.11449 2.02972

> 
> 
> 
> cleanEx()
> nameEx("ensemble")
> ### * ensemble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.calibrate.models
> ### Title: Suitability mapping based on ensembles of modelling algorithms:
> ###   calibration of models and weights
> ### Aliases: ensemble.calibrate.models ensemble.calibrate.weights
> ###   ensemble.calibrate.models.gbm ensemble.calibrate.models.nnet
> ###   ensemble.drop1 ensemble.formulae ensemble.weights ensemble.strategy
> ###   ensemble.threshold ensemble.VIF ensemble.VIF.dataframe ensemble.pairs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # based on examples in the dismo package
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "predictors"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # the kfold function randomly assigns data to groups; 
> ##D # groups are used as calibration (1/4) and training (3/4) data
> ##D groupp <- kfold(pres, 4)
> ##D pres_train <- pres[groupp !=  1, ]
> ##D pres_test <- pres[groupp ==  1, ]
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf=1.00)
> ##D colnames(background)=c('lon', 'lat')
> ##D groupa <- kfold(background, 4)
> ##D backg_train <- background[groupa != 1, ]
> ##D backg_test <- background[groupa == 1, ]
> ##D 
> ##D # formulae for random forest and generalized linear model
> ##D # compare with: ensemble.formulae(predictors, factors=c("biome"))
> ##D 
> ##D rfformula <- as.formula(pb ~ bio5+bio6+bio16+bio17)
> ##D 
> ##D glmformula <- as.formula(pb ~ bio5 + I(bio5^2) + I(bio5^3) + 
> ##D     bio6 + I(bio6^2) + I(bio6^3) + bio16 + I(bio16^2) + I(bio16^3) + 
> ##D     bio17 + I(bio17^2) + I(bio17^3) )
> ##D 
> ##D # fit four ensemble models (RF, GLM, BIOCLIM, DOMAIN)
> ##D # factors removed for BIOCLIM, DOMAIN, MAHAL
> ##D ensemble.nofactors <- ensemble.calibrate.models(x=predictors, p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     species.name="Bradypus",
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.min = 0.65,
> ##D     MAXENT=0, MAXNET=0, MAXLIKE=0, GBM=0, GBMSTEP=0, RF=1, CF=0, 
> ##D     GLM=1, GLMSTEP=0, GAM=0, GAMSTEP=0, MGCV=0, MGCVFIX=0, 
> ##D     EARTH=0, RPART=0, NNET=0, FDA=0, SVM=0, SVME=0, GLMNET=0,
> ##D     BIOCLIM.O=0, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=0,
> ##D     Yweights="BIOMOD",
> ##D     factors="biome",
> ##D     evaluations.keep=TRUE, models.keep=TRUE,
> ##D     RF.formula=rfformula,
> ##D     GLM.formula=glmformula)
> ##D 
> ##D # with option models.keep, all model objects are saved in ensemble object
> ##D # the same slots can be used to replace model objects with new calibrations
> ##D ensemble.nofactors$models$RF
> ##D summary(ensemble.nofactors$models$GLM)
> ##D ensemble.nofactors$models$BIOCLIM
> ##D ensemble.nofactors$models$DOMAIN
> ##D ensemble.nofactors$models$formulae
> ##D 
> ##D # evaluations are kept in different slot
> ##D attributes(ensemble.nofactors$evaluations)
> ##D plot(ensemble.nofactors$evaluations$RF.T, "ROC")
> ##D 
> ##D # fit four ensemble models (RF, GLM, BIOCLIM, DOMAIN) using default formulae
> ##D # variable 'biome' is not included as explanatory variable
> ##D # results are provided in a file in the 'outputs' subfolder of the working
> ##D # directory
> ##D ensemble.nofactors <- ensemble.calibrate.models(x=predictors,
> ##D     p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     layer.drops="biome",
> ##D     species.name="Bradypus",
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.min=0.65,
> ##D     SINK=TRUE,
> ##D     MAXENT=0, MAXNET=0, MAXLIKE=0, GBM=0, GBMSTEP=0, RF=1, CF=0, 
> ##D     GLM=1, GLMSTEP=0, GAM=0, 
> ##D     GAMSTEP=0, MGCV=0, MGCVFIX=0, EARTH=0, RPART=0, NNET=0, FDA=0, 
> ##D     SVM=0, SVME=0, GLMNET=0,
> ##D     BIOCLIM.O=0, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=0,
> ##D     Yweights="BIOMOD", 
> ##D     evaluations.keep=TRUE,
> ##D     formulae.defaults=TRUE)    
> ##D 
> ##D # after fitting the individual algorithms (submodels),
> ##D # transform predictions with a probit link.
> ##D ensemble.nofactors <- ensemble.calibrate.models(x=predictors,
> ##D     p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     layer.drops="biome",
> ##D     species.name="Bradypus",
> ##D     SINK=TRUE,
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.min=0.65,
> ##D     MAXENT=0, MAXNET=0, MAXLIKE=0, GBM=0, GBMSTEP=0, RF=1, CF=0,
> ##D     GLM=1, GLMSTEP=0, GAM=0, GAMSTEP=0, MGCV=0, MGCVFIX=0, 
> ##D     EARTH=0, RPART=0, NNET=0, FDA=0, SVM=0, SVME=0, GLMNET=0,
> ##D     BIOCLIM.O=0, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=0,
> ##D     PROBIT=TRUE,
> ##D     Yweights="BIOMOD", factors="biome",
> ##D     evaluations.keep=TRUE,
> ##D     formulae.defaults=TRUE)    
> ##D 
> ##D # Instead of providing presence and background locations, provide data.frames.
> ##D # Because 'biome' is a factor, RasterStack needs to be provided
> ##D # to check for levels in the Training and Testing data set.
> ##D TrainData1 <- prepareData(x=predictors, p=pres_train, b=backg_train, 
> ##D     factors=c("biome"), xy=FALSE)
> ##D TestData1 <- prepareData(x=predictors, p=pres_test, b=backg_test, 
> ##D     factors=c("biome"), xy=FALSE)
> ##D ensemble.factors1 <- ensemble.calibrate.models(x=predictors, 
> ##D     TrainData=TrainData1, TestData=TestData1,
> ##D     p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     species.name="Bradypus",
> ##D     SINK=TRUE,
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.min=0.65,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=0, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     Yweights="BIOMOD", factors="biome",
> ##D     evaluations.keep=TRUE)
> ##D 
> ##D # compare different methods of calculating ensembles
> ##D ensemble.factors2 <- ensemble.calibrate.models(x=predictors, 
> ##D     TrainData=TrainData1, TestData=TestData1,
> ##D     p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     species.name="Bradypus",
> ##D     SINK=TRUE,
> ##D     ENSEMBLE.tune=TRUE,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     ENSEMBLE.best=c(4:10), ENSEMBLE.exponent=c(1, 2, 3),
> ##D     Yweights="BIOMOD", factors="biome",
> ##D     evaluations.keep=TRUE)
> ##D 
> ##D # test performance of different suitability models
> ##D # data are split in 4 subsets, each used once for evaluation
> ##D ensemble.nofactors2 <- ensemble.calibrate.weights(x=predictors, 
> ##D     p=pres, a=background, k=4, 
> ##D     species.name="Bradypus",
> ##D     SINK=TRUE, PROBIT=TRUE,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.best=0, ENSEMBLE.exponent=c(1, 2, 3),
> ##D     ENSEMBLE.min=0.7,
> ##D     Yweights="BIOMOD", 
> ##D     formulae.defaults=TRUE)
> ##D ensemble.nofactors2$AUC.table
> ##D 
> ##D # test the result of leaving out one of the variables from the model
> ##D # note that positive differences indicate that the model without the variable 
> ##D # has higher AUC than the full model
> ##D ensemble.variables <- ensemble.drop1(x=predictors, 
> ##D     p=pres, a=background, k=4,
> ##D     species.name="Bradypus",
> ##D     SINK=TRUE,
> ##D     difference=TRUE,
> ##D     VIF=TRUE, PROBIT=TRUE,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.best=0, ENSEMBLE.exponent=c(1, 2, 3),
> ##D     ENSEMBLE.min=0.7,
> ##D     Yweights="BIOMOD", factors="biome")
> ##D ensemble.variables
> ##D 
> ##D # use function ensemble.VIF to select a subset of variables
> ##D # factor variables are not handled well by the function
> ##D # and therefore factors are removed
> ##D # however, one can check for factors with car::vif through
> ##D # the ensemble.calibrate.models function
> ##D # VIF.analysis$var.drops can be used as input for ensemble.calibrate.models or
> ##D # ensemble.calibrate.weights
> ##D 
> ##D predictors <- stack(predictor.files)
> ##D predictors <- subset(predictors, subset=c("bio1", "bio5", "bio6", "bio8", 
> ##D     "bio12", "bio16", "bio17", "biome"))
> ##D 
> ##D ensemble.pairs(predictors)
> ##D 
> ##D VIF.analysis <- ensemble.VIF(predictors, factors="biome")
> ##D VIF.analysis
> ##D # alternative solution where bio1 and bio12 are kept
> ##D VIF.analysis <- ensemble.VIF(predictors, factors="biome", 
> ##D     keep=c("bio1", "bio12"))
> ##D VIF.analysis
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensemble.analogue")
> ### * ensemble.analogue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.analogue
> ### Title: Climate analogues from climatic distance raster layers.
> ### Aliases: ensemble.analogue ensemble.analogue.object
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D predictors <- subset(predictors, subset=c("bio1", "bio5", "bio6", "bio7", "bio8", 
> ##D     "bio12", "bio16", "bio17"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # instead of searching for current analogue of future climate conditions,
> ##D # search for analogue in southern hemisphere
> ##D future.stack <- stack(crop(predictors, y=extent(-125, -32, 0, 40)))
> ##D future.stack@title <- "north"
> ##D current.stack <- stack(crop(predictors, y=extent(-125, -32, -56, 0)))
> ##D current.stack@title <- "south"
> ##D 
> ##D # reference location in Florida
> ##D # in this case future.stack and current.stack are both current
> ##D ref.loc <- data.frame(t(c(-80.19, 25.76)))
> ##D names(ref.loc) <- c("lon", "lat")
> ##D 
> ##D # climate analogue analysis based on the Mahalanobis distance
> ##D Florida.object.mahal <- ensemble.analogue.object(ref.location=ref.loc, 
> ##D     future.stack=future.stack, current.stack=current.stack, 
> ##D     name="FloridaMahal", method="mahal", an=10000)
> ##D Florida.object.mahal
> ##D 
> ##D Florida.analogue.mahal <- ensemble.analogue(x=current.stack, 
> ##D     analogue.object=Florida.object.mahal, analogues=50)
> ##D Florida.analogue.mahal
> ##D 
> ##D # climate analogue analysis based on the Euclidean distance and dividing each variable by the sd
> ##D Florida.object.sd <- ensemble.analogue.object(ref.location=ref.loc, 
> ##D     future.stack=future.stack, current.stack=current.stack, 
> ##D     name="FloridaSD", method="sd", z=2)
> ##D Florida.object.sd
> ##D 
> ##D Florida.analogue.sd <- ensemble.analogue(x=current.stack, 
> ##D     analogue.object=Florida.object.sd, analogues=50)
> ##D Florida.analogue.sd
> ##D 
> ##D # plot analogues on climatic distance maps
> ##D par(mfrow=c(1,2))
> ##D analogue.file <- paste(getwd(), "//ensembles//analogue//FloridaMahal_south_analogue.grd", sep="")
> ##D plot(raster(analogue.file), main="Mahalanobis climatic distance")
> ##D points(Florida.analogue.sd[3:50, "lat"] ~ Florida.analogue.sd[3:50, "lon"], 
> ##D     pch=1, col="red", cex=1)
> ##D points(Florida.analogue.mahal[3:50, "lat"] ~ Florida.analogue.mahal[3:50, "lon"], 
> ##D     pch=3, col="black", cex=1)
> ##D points(Florida.analogue.mahal[2, "lat"] ~ Florida.analogue.mahal[2, "lon"], 
> ##D     pch=22, col="blue", cex=2)
> ##D legend(x="topright", legend=c("closest", "Mahalanobis", "SD"), pch=c(22, 3 , 1), 
> ##D     col=c("blue" , "black", "red"))
> ##D 
> ##D analogue.file <- paste(getwd(), "//ensembles//analogue//FloridaSD_south_analogue.grd", sep="")
> ##D plot(raster(analogue.file), main="Climatic distance normalized by standard deviation")
> ##D points(Florida.analogue.mahal[3:50, "lat"] ~ Florida.analogue.mahal[3:50, "lon"], 
> ##D     pch=3, col="black", cex=1)
> ##D points(Florida.analogue.sd[3:50, "lat"] ~ Florida.analogue.sd[3:50, "lon"], 
> ##D     pch=1, col="red", cex=1)
> ##D points(Florida.analogue.sd[2, "lat"] ~ Florida.analogue.sd[2, "lon"], 
> ##D     pch=22, col="blue", cex=2)
> ##D legend(x="topright", legend=c("closest", "Mahalanobis", "SD"), pch=c(22, 3 , 1), 
> ##D     col=c("blue" , "black", "red"))
> ##D par(mfrow=c(1,1))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.batch")
> ### * ensemble.batch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.batch
> ### Title: Suitability mapping based on ensembles of modelling algorithms:
> ###   batch processing
> ### Aliases: ensemble.batch ensemble.mean ensemble.plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # based on examples in the dismo package
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')
> ##D pres[,1] <- rep("Bradypus", nrow(pres))
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf = 1.00)
> ##D 
> ##D # north and south for new predictions (as if new climates)
> ##D ext2 <- extent(-90, -32, 0, 23)
> ##D predictors2 <- crop(predictors, y=ext2)
> ##D predictors2 <- stack(predictors2)
> ##D predictors2@title <- "north"
> ##D 
> ##D ext3 <- extent(-90, -32, -33, 0)
> ##D predictors3 <- crop(predictors, y=ext3)
> ##D predictors3 <- stack(predictors3)
> ##D predictors3@title <- "south"
> ##D 
> ##D # fit 3 ensembles with batch processing, choosing the best ensemble model based on the 
> ##D # average weights of 4-fold split of calibration and testing data
> ##D # final models use all available presence data and average weights determined by the 
> ##D # ensemble.calibrate.weights function (called internally)
> ##D # batch processing can handle several species by using 3-column species.presence and 
> ##D # species.absence data sets
> ##D # note that these calculations can take a while
> ##D 
> ##D ensemble.nofactors <- ensemble.batch(x=predictors, 
> ##D     xn=c(predictors, predictors2, predictors3),
> ##D     species.presence=pres, 
> ##D     species.absence=background, 
> ##D     k.splits=4, k.test=0, 
> ##D     n.ensembles=3, 
> ##D     SINK=TRUE, 
> ##D     layer.drops=c("biome"),
> ##D     ENSEMBLE.best=0, ENSEMBLE.exponent=c(1, 2, 3), 
> ##D     ENSEMBLE.min=0.7,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     PROBIT=TRUE,
> ##D     Yweights="BIOMOD",
> ##D     formulae.defaults=TRUE)
> ##D 
> ##D # summaries for the 3 ensembles for the species
> ##D # summaries are based on files in folders ensemble/suitability, 
> ##D # ensemble/presence and ensemble/count
> ##D # ensemble.mean is used internally in ensemble.batch
> ##D 
> ##D ensemble.mean(RASTER.species.name="Bradypus", RASTER.stack.name="base",
> ##D     p=pres, a=background)
> ##D 
> ##D # plot mean suitability without specifying colours
> ##D plot1 <- ensemble.plot(RASTER.species.name="Bradypus", RASTER.stack.name="base",
> ##D     plot.method="consensussuitability",
> ##D     p=pres, a=background, abs.breaks=4, pres.breaks=9)
> ##D plot1
> ##D 
> ##D # only colour the areas where species is predicted to be present
> ##D # option is invoked by having no absence breaks
> ##D # same colourscheme as \url{http://www.worldagroforestry.org/atlas-central-america}
> ##D LAatlascols <- grDevices::colorRampPalette(c("#FFFF80", "#38E009","#1A93AB", "#0C1078"))
> ##D plot2 <- ensemble.plot(RASTER.species.name="Bradypus", RASTER.stack.name="base",
> ##D     plot.method="consensussuitability",
> ##D     p=pres, a=background, abs.breaks=0, pres.breaks=9, pres.col=LAatlascols(8))
> ##D plot2
> ##D 
> ##D # only colour the areas where species is predicted to be present
> ##D # option is invoked by only setting one colour for absence-presence
> ##D plot3 <- ensemble.plot(RASTER.species.name="Bradypus", RASTER.stack.name="base",
> ##D     plot.method="consensuspresence",
> ##D     absencePresence.col=c("#90EE90"))
> ##D 
> ##D # only colour presence area by specifying colours > 0
> ##D plot4 <- ensemble.plot(RASTER.species.name="Bradypus", RASTER.stack.name="base",
> ##D     plot.method="consensuscount",
> ##D     count.col=LAatlascols(3))
> ##D 
> ##D 
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.bioclim")
> ### * ensemble.bioclim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.bioclim
> ### Title: Suitability mapping based on the BIOCLIM algorithm
> ### Aliases: ensemble.bioclim ensemble.bioclim.object
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D background <- dismo::randomPoints(predictors, n=100)
> ##D colnames(background)=c('lon', 'lat')
> ##D 
> ##D pres.dataset <- data.frame(extract(predictors, y=pres))
> ##D names(pres.dataset) <- names(predictors)
> ##D pres.dataset$biome <- as.factor(pres.dataset$biome)
> ##D 
> ##D Bradypus.bioclim <- ensemble.bioclim.object(predictors, quantiles=T, 
> ##D     p=pres, factors="biome", species.name="Bradypus")
> ##D Bradypus.bioclim
> ##D # obtain the same results with a data.frame
> ##D Bradypus.bioclim2 <- ensemble.bioclim.object(pres.dataset, quantiles=T, 
> ##D     species.name="Bradypus")
> ##D Bradypus.bioclim2
> ##D # obtain results for entire rasterStack
> ##D Bradypus.bioclim3 <- ensemble.bioclim.object(predictors, p=NULL, quantiles=T, 
> ##D     factors="biome", species.name="America")
> ##D Bradypus.bioclim3
> ##D 
> ##D ensemble.bioclim(x=predictors, bioclim.object=Bradypus.bioclim, KML.out=T)
> ##D ensemble.bioclim(x=predictors, bioclim.object=Bradypus.bioclim3, KML.out=T)
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D 
> ##D rasterfull1 <- paste("ensembles//Bradypus_base_BIOCLIM_orig", sep="")
> ##D raster::plot(raster(rasterfull1), breaks=c(-0.1, 0, 0.5, 1), 
> ##D     col=c("grey", "blue", "green"), main="original method")
> ##D rasterfull2 <- paste("ensembles//America_base_BIOCLIM_orig", sep="")
> ##D raster::plot(raster(rasterfull2), breaks=c(-0.1, 0, 0.5, 1), 
> ##D     col=c("grey", "blue", "green"), main="America")
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ##D # compare with implementation bioclim in dismo
> ##D bioclim.dismo <- bioclim(predictors, p=pres)
> ##D rasterfull2 <- paste("ensembles//Bradypus_base_BIOCLIM_dismo", sep="")
> ##D raster::predict(object=predictors, model=bioclim.dismo, na.rm=TRUE, 
> ##D     filename=rasterfull2, progress='text', overwrite=TRUE)
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D 
> ##D raster::plot(raster(rasterfull1), breaks=c(-0.1, 0, 0.5, 1), 
> ##D     col=c("grey", "blue", "green"), main="original method")
> ##D raster::plot(raster(rasterfull2), main="dismo method")
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ##D # use dummy variables to deal with factors
> ##D predictors <- stack(predictor.files)
> ##D biome.layer <- predictors[["biome"]]
> ##D biome.layer
> ##D ensemble.dummy.variables(xcat=biome.layer, most.frequent=0, freq.min=1,
> ##D     overwrite=TRUE)
> ##D 
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D predictors.dummy <- subset(predictors, subset=c("biome_1", "biome_2",  "biome_3",  
> ##D     "biome_4", "biome_5", "biome_7",  "biome_8",  "biome_9", "biome_10", 
> ##D     "biome_12", "biome_13", "biome_14"))
> ##D predictors.dummy
> ##D predictors.dummy@title <- "base_dummy"
> ##D 
> ##D Bradypus.dummy <- ensemble.bioclim.object(predictors.dummy, quantiles=T, 
> ##D     p=pres, species.name="Bradypus")
> ##D Bradypus.dummy
> ##D ensemble.bioclim(x=predictors.dummy, bioclim.object=Bradypus.dummy, KML.out=F)
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D 
> ##D rasterfull3 <- paste("ensembles//Bradypus_base_dummy_BIOCLIM_orig", sep="")
> ##D raster::plot(raster(rasterfull1), breaks=c(-0.1, 0, 0.5, 1), col=c("grey", "blue", "green"), 
> ##D     main="numeric predictors")
> ##D raster::plot(raster(rasterfull3), breaks=c(-0.1, 0, 0.5, 1), col=c("grey", "blue", "green"), 
> ##D     main="dummy predictors")
> ##D 
> ##D graphics::par(par.old)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.bioclim.graph")
> ### * ensemble.bioclim.graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.bioclim.graph
> ### Title: Graphs of bioclimatic ranges of species and climates
> ### Aliases: ensemble.bioclim.graph ensemble.bioclim.graph.data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # climates for north and south (use same process for future climates)
> ##D ext2 <- extent(-90, -32, 0, 23)
> ##D predictors2 <- crop(predictors, y=ext2)
> ##D predictors2 <- stack(predictors2)
> ##D predictors2@title <- "north"
> ##D 
> ##D ext3 <- extent(-90, -32, -33, 0)
> ##D predictors3 <- crop(predictors, y=ext3)
> ##D predictors3 <- stack(predictors3)
> ##D predictors3@title <- "south"
> ##D 
> ##D graph.data1 <- ensemble.bioclim.graph.data(predictors, p=pres, 
> ##D     factors="biome", species.climate.name="Bradypus")
> ##D graph.data2 <- ensemble.bioclim.graph.data(predictors, p=NULL, 
> ##D     factors="biome", species.climate.name="baseline")
> ##D graph.data3 <- ensemble.bioclim.graph.data(predictors2, p=NULL, 
> ##D     factors="biome", species.climate.name="north")
> ##D graph.data4 <- ensemble.bioclim.graph.data(predictors3, p=NULL, 
> ##D     factors="biome", species.climate.name="south")
> ##D graph.data.all <- rbind(graph.data1, graph.data2, graph.data3, graph.data4)
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(2, 2))
> ##D 
> ##D ensemble.bioclim.graph(graph.data.all, focal.var="bio5", 
> ##D     var.multiply=0.1, cols=c("black", rep("blue", 3)))
> ##D ensemble.bioclim.graph(graph.data.all, focal.var="bio6", 
> ##D     var.multiply=0.1, cols=c("black", rep("blue", 3)))
> ##D ensemble.bioclim.graph(graph.data.all, focal.var="bio16", 
> ##D     var.multiply=1.0, cols=c("black", rep("blue", 3)))
> ##D ensemble.bioclim.graph(graph.data.all, focal.var="bio17", 
> ##D     var.multiply=1.0, cols=c("black", rep("blue", 3)))
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensemble.dummy.variables")
> ### * ensemble.dummy.variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.dummy.variables
> ### Title: Suitability mapping based on ensembles of modelling algorithms:
> ###   handling of categorical data
> ### Aliases: ensemble.dummy.variables ensemble.accepted.categories
> ###   ensemble.simplified.categories
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D biome.layer <- predictors[["biome"]]
> ##D biome.layer
> ##D 
> ##D # create dummy layers for the 5 most frequent factor levels
> ##D 
> ##D ensemble.dummy.variables(xcat=biome.layer, most.frequent=5,
> ##D     overwrite=TRUE)
> ##D 
> ##D # check whether dummy variables were created
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D predictors
> ##D names(predictors)
> ##D 
> ##D # once dummy variables were created, avoid using the original categorical data layer
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", "bio16", "bio17", 
> ##D     "biome_1", "biome_2", "biome_7", "biome_8", "biome_13"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # the kfold function randomly assigns data to groups; 
> ##D # groups are used as calibration (1/5) and training (4/5) data
> ##D groupp <- kfold(pres, 5)
> ##D pres_train <- pres[groupp !=  1, ]
> ##D pres_test <- pres[groupp ==  1, ]
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf=1.00)
> ##D colnames(background)=c('lon', 'lat')
> ##D groupa <- kfold(background, 5)
> ##D backg_train <- background[groupa != 1, ]
> ##D backg_test <- background[groupa == 1, ]
> ##D 
> ##D # note that dummy variables with no variation are not used by DOMAIN
> ##D # note that dummy variables are not used by MAHAL and MAHAL01
> ##D # (neither are categorical variables)
> ##D ensemble.nofactors <- ensemble.calibrate.models(x=predictors, p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     species.name="Bradypus",
> ##D     VIF=T,
> ##D     MAXENT=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, GLM=1, GLMSTEP=0, GAM=1, 
> ##D     GAMSTEP=0, MGCV=1, MGCVFIX=0, EARTH=1, RPART=1, NNET=1, FDA=1, 
> ##D     SVM=1, SVME=1, BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     Yweights="BIOMOD", 
> ##D     dummy.vars=c("biome_1", "biome_2", "biome_7", "biome_8", "biome_13"),
> ##D     PLOTS=FALSE, evaluations.keep=TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.ecocrop")
> ### * ensemble.ecocrop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.ecocrop
> ### Title: Mapping of novel environmental conditions (areas where some of
> ###   the environmental conditions are outside the range of environmental
> ###   conditions of a reference area).
> ### Aliases: ensemble.ecocrop ensemble.ecocrop.object
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D #test with Brazil nut (limits from FAO ecocrop)
> ##D #temperature: (12) 20-36 (40)
> ##D #annnual rainfall: (1400) 2400-2800 (3500)
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", "bio12"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D Brazil.ecocrop <- ensemble.ecocrop.object(temp.thresholds=c(20, 36, 12, 40), 
> ##D     rain.thresholds=c(2400, 2800, 1400, 3500), 
> ##D     annual.temps=FALSE, name="Bertholletia_excelsa")
> ##D Brazil.ecocrop
> ##D ensemble.ecocrop(predictors, ecocrop.object=Brazil.ecocrop)
> ##D 
> ##D dev.new()
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D 
> ##D 
> ##D rasterfull1 <- paste("ensembles//ecocrop//Bertholletia_excelsa_base.grd", sep="")
> ##D rasterfull1 <- raster(rasterfull1)
> ##D # raster file saved probabilities as integer values between 0 and 1000
> ##D rasterfull1 <- rasterfull1/1000
> ##D raster::plot(rasterfull1, main="Ecocrop suitability")
> ##D 
> ##D GBIFloc <- gbif(genus="Bertholletia", species="excelsa", geo=TRUE)
> ##D GBIFpres <- cbind(GBIFloc$lon, GBIFloc$lat)
> ##D GBIFpres <- GBIFpres[complete.cases(GBIFpres), ]
> ##D GBIFpres <- GBIFpres[duplicated(GBIFpres) == FALSE, ]
> ##D point.suitability <- extract(rasterfull1, y=GBIFpres)
> ##D point.suitability[is.na(point.suitability)] <- -1
> ##D 
> ##D GBIFpres.optimal <- GBIFpres[point.suitability == 1, ]
> ##D GBIFpres.suboptimal <- GBIFpres[point.suitability < 1 & point.suitability > 0, ]
> ##D GBIFpres.not <- GBIFpres[point.suitability == 0, ]
> ##D 
> ##D raster::plot(rasterfull1, main="GBIF locations", 
> ##D     sub="blue: optimal, cyan: suboptimal, red: not suitable")
> ##D bg.legend <- c("blue", "cyan", "red")
> ##D 
> ##D points(GBIFpres.suboptimal, pch=21, cex=1.2, bg=bg.legend[2])
> ##D points(GBIFpres.optimal, pch=21, cex=1.2, bg=bg.legend[1])
> ##D points(GBIFpres.not, pch=21, cex=1.2, bg=bg.legend[3])
> ##D 
> ##D graphics::par(par.old)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.evaluate")
> ### * ensemble.evaluate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.evaluate
> ### Title: Model evaluation including True Skill Statistic (TSS), AUCdiff
> ###   and Symmetric Extremal Dependence Index (SEDI).
> ### Aliases: ensemble.evaluate ensemble.SEDI
> 
> ### ** Examples
> 
> 
> ## check examples from Ferro and Stephenson (2011)
> ## see their Tables 2 - 5
> 
> TPR.Table2 <- 55/100
> FPR.Table2 <- 45/900
> ensemble.SEDI(TPR=TPR.Table2, FPR=FPR.Table2)
[1] 0.707821
> 
> TPR.Table4 <- 195/300
> FPR.Table4 <- 105/700
> ensemble.SEDI(TPR=TPR.Table4, FPR=FPR.Table4)
[1] 0.664824
> 
> ## Not run: 
> ##D ## Not run: 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "predictors"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # the kfold function randomly assigns data to groups; 
> ##D # groups are used as calibration (1/4) and training (3/4) data
> ##D groupp <- kfold(pres, 4)
> ##D pres_train <- pres[groupp !=  1, ]
> ##D pres_test <- pres[groupp ==  1, ]
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf=1.00)
> ##D colnames(background)=c('lon', 'lat')
> ##D groupa <- kfold(background, 4)
> ##D backg_train <- background[groupa != 1, ]
> ##D backg_test <- background[groupa == 1, ]
> ##D 
> ##D # formulae for random forest and generalized linear model
> ##D # compare with: ensemble.formulae(predictors, factors=c("biome"))
> ##D 
> ##D rfformula <- as.formula(pb ~ bio5+bio6+bio16+bio17)
> ##D 
> ##D glmformula <- as.formula(pb ~ bio5 + I(bio5^2) + I(bio5^3) + 
> ##D     bio6 + I(bio6^2) + I(bio6^3) + bio16 + I(bio16^2) + I(bio16^3) + 
> ##D     bio17 + I(bio17^2) + I(bio17^3) )
> ##D 
> ##D # fit four ensemble models (RF, GLM, BIOCLIM, DOMAIN)
> ##D # factors removed for BIOCLIM, DOMAIN, MAHAL
> ##D ensemble.nofactors <- ensemble.calibrate.models(x=predictors, p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     species.name="Bradypus",
> ##D     ENSEMBLE.tune=TRUE,
> ##D     ENSEMBLE.min = 0.65,
> ##D     MAXENT=0, MAXNET=0, MAXLIKE=0, GBM=0, GBMSTEP=0, RF=1, CF=0, 
> ##D     GLM=1, GLMSTEP=0, GAM=0, GAMSTEP=0, MGCV=0, MGCVFIX=0, 
> ##D     EARTH=0, RPART=0, NNET=0, FDA=0, SVM=0, SVME=0, GLMNET=0,
> ##D     BIOCLIM.O=0, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=0,
> ##D     Yweights="BIOMOD",
> ##D     factors="biome",
> ##D     evaluations.keep=TRUE, models.keep=FALSE,
> ##D     RF.formula=rfformula,
> ##D     GLM.formula=glmformula)
> ##D 
> ##D # with option evaluations.keep, all model evaluations are saved in the ensemble object
> ##D attributes(ensemble.nofactors$evaluations)
> ##D 
> ##D # Get evaluation statistics for the ENSEMBLE model
> ##D eval.ENSEMBLE <- ensemble.nofactors$evaluations$ENSEMBLE.T
> ##D eval.calibrate.ENSEMBLE <- ensemble.nofactors$evaluations$ENSEMBLE.C
> ##D ensemble.evaluate(eval=eval.ENSEMBLE, eval.train=eval.calibrate.ENSEMBLE)
> ##D 
> ##D # TSS is maximum where specificity + sensitivity is maximum
> ##D threshold.specsens <- threshold(eval.ENSEMBLE, stat="spec_sens")
> ##D ensemble.evaluate(eval=eval.ENSEMBLE, fixed.threshold=threshold.specsens,
> ##D     eval.train=eval.calibrate.ENSEMBLE)
> ##D 
> ##D # usual practice to calculate threshold from calibration data
> ##D ensemble.evaluate(eval=eval.ENSEMBLE, eval.train=eval.calibrate.ENSEMBLE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.novel")
> ### * ensemble.novel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.novel
> ### Title: Mapping of novel environmental conditions (areas where some of
> ###   the environmental conditions are outside the range of environmental
> ###   conditions of a reference area).
> ### Aliases: ensemble.novel ensemble.novel.object
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D predictors <- subset(predictors, subset=c("bio1", "bio5", "bio6", "bio7", "bio8", 
> ##D     "bio12", "bio16", "bio17"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # reference area to calculate environmental ranges
> ##D ext <- extent(-70, -50, -10, 10)
> ##D extent.values2 <- c(-70, -50, -10, 10)
> ##D predictors.current <- crop(predictors, y=ext)
> ##D predictors.current <- stack(predictors.current)
> ##D 
> ##D novel.test <- ensemble.novel.object(predictors.current, name="noveltest")
> ##D novel.test
> ##D novel.raster <- ensemble.novel(x=predictors, novel.object=novel.test, KML.out=T)
> ##D novel.raster
> ##D 
> ##D plot(novel.raster)
> ##D # no novel conditions within reference area
> ##D rect(extent.values2[1], extent.values2[3], extent.values2[2], extent.values2[4])
> ##D 
> ##D # use novel conditions as a simple species suitability mapping method
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D pres.data <- data.frame(extract(predictors, y=pres))
> ##D 
> ##D # ranges and maps
> ##D Bradypus.ranges1 <- ensemble.novel.object(pres.data, name="Bradypus", quantiles=F)
> ##D Bradypus.ranges1
> ##D Bradypus.novel1 <- ensemble.novel(x=predictors, novel.object=Bradypus.ranges1, KML.out=T)
> ##D Bradypus.novel1
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D 
> ##D # suitable where there are no novel conditions
> ##D raster::plot(Bradypus.novel1, breaks=c(-0.1, 0, 1), col=c("green", "grey"), 
> ##D     main="Suitability mapping using minimum to maximum range")
> ##D points(pres[, 2] ~ pres[, 1], pch=1, col="red", cex=0.8)
> ##D 
> ##D # use 90 percent intervals similar to BIOCLIM methodology
> ##D Bradypus.ranges2 <- ensemble.novel.object(pres.data, name="BradypusQuantiles", quantiles=T)
> ##D Bradypus.ranges2
> ##D Bradypus.novel2 <- ensemble.novel(x=predictors, novel.object=Bradypus.ranges2, KML.out=T)
> ##D Bradypus.novel2
> ##D raster::plot(Bradypus.novel2, breaks=c(-0.1, 0, 1), col=c("green", "grey"), 
> ##D     main="Suitability mapping using quantile range")
> ##D points(pres[, 2] ~ pres[, 1], pch=1, col="red", cex=0.8)
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ##D # deal with novel factor levels through dummy variables
> ##D predictors <- stack(predictor.files)
> ##D biome.layer <- predictors[["biome"]]
> ##D biome.layer
> ##D ensemble.dummy.variables(xcat=biome.layer, most.frequent=0, freq.min=1,
> ##D     overwrite=TRUE)
> ##D 
> ##D predictors.dummy <- stack(predictor.files)
> ##D predictors.dummy <- subset(predictors.dummy, subset=c("biome_1", "biome_2",  "biome_3",  
> ##D     "biome_4", "biome_5", "biome_7",  "biome_8",  "biome_9", 
> ##D     "biome_10", "biome_12", "biome_13", "biome_14"))
> ##D predictors.dummy
> ##D predictors.dummy@title <- "base_dummy"
> ##D 
> ##D predictors.dummy.current <- crop(predictors.dummy, y=ext)
> ##D predictors.dummy.current <- stack(predictors.dummy.current)
> ##D 
> ##D novel.levels <- ensemble.novel.object(predictors.dummy.current, name="novellevels")
> ##D novel.levels
> ##D novel.levels.raster <- ensemble.novel(x=predictors.dummy, novel.object=novel.levels, 
> ##D     KML.out=T)
> ##D novel.levels.raster
> ##D 
> ##D novel.levels.quantiles <- ensemble.novel.object(predictors.dummy.current, quantiles=TRUE,
> ##D     name="novellevels_quantiles")
> ##D novel.levels.quantiles
> ##D novel.levels.quantiles.raster <- ensemble.novel(x=predictors.dummy, 
> ##D     novel.object=novel.levels.quantiles, KML.out=T)
> ##D novel.levels.quantiles.raster
> ##D 
> ##D # difference in ranges for variables with low frequencies
> ##D background <- dismo::randomPoints(predictors.dummy.current, n=10000, p=NULL, excludep=F)
> ##D extract.data <- extract(predictors.dummy.current, y=background)
> ##D colSums(extract.data)/sum(extract.data)*100
> ##D novel.levels
> ##D novel.levels.quantiles
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D graphics::par(mfrow=c(1,2))
> ##D raster::plot(novel.levels.raster, breaks=c(-0.1, 0, 1), col=c("grey", "green"), 
> ##D     main="novel outside minimum to maximum range")
> ##D rect(extent.values2[1], extent.values2[3], extent.values2[2], extent.values2[4])
> ##D raster::plot(novel.levels.quantiles.raster, breaks=c(-0.1, 0, 1), col=c("grey", "green"), 
> ##D     main="novel outside quantile range")
> ##D rect(extent.values2[1], extent.values2[3], extent.values2[2], extent.values2[4])
> ##D graphics::par(par.old)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensemble.raster")
> ### * ensemble.raster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.raster
> ### Title: Suitability mapping based on ensembles of modelling algorithms:
> ###   consensus mapping
> ### Aliases: ensemble.raster ensemble.habitat.change ensemble.area
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # based on examples in the dismo package
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf = 1.00)
> ##D 
> ##D # if desired, change working directory where subfolders of "models" and 
> ##D # "ensembles" will be created
> ##D # raster layers will be saved in subfolders of /models and /ensembles:
> ##D getwd()
> ##D 
> ##D # first calibrate the ensemble
> ##D # calibration is done in two steps
> ##D # in step 1, a k-fold procedure is used to determine the weights
> ##D # in step 2, models are calibrated for all presence and background locations
> ##D # factor is not used as it is not certain whether correct levels will be used
> ##D # it may therefore be better to use dummy variables
> ##D 
> ##D # step 1: determine weights through 4-fold cross-validation
> ##D ensemble.calibrate.step1 <- ensemble.calibrate.weights(
> ##D     x=predictors, p=pres, a=background, k=4, 
> ##D     SINK=TRUE, species.name="Bradypus",
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     ENSEMBLE.tune=TRUE, PROBIT=TRUE,
> ##D     ENSEMBLE.best=0, ENSEMBLE.exponent=c(1, 2, 3),
> ##D     ENSEMBLE.min=c(0.65, 0.7),
> ##D     Yweights="BIOMOD",
> ##D     PLOTS=FALSE, formulae.defaults=TRUE)
> ##D 
> ##D # step 1 generated the weights for each algorithm
> ##D model.weights <- ensemble.calibrate.step1$output.weights
> ##D x.batch <- ensemble.calibrate.step1$x
> ##D p.batch <- ensemble.calibrate.step1$p
> ##D a.batch <- ensemble.calibrate.step1$a
> ##D MAXENT.a.batch <- ensemble.calibrate.step1$MAXENT.a
> ##D factors.batch <- ensemble.calibrate.step1$factors
> ##D dummy.vars.batch <- ensemble.calibrate.step1$dummy.vars
> ##D 
> ##D # step 2: calibrate models with all available presence locations
> ##D # weights determined in step 1 calculate ensemble in step 2
> ##D ensemble.calibrate.step2 <- ensemble.calibrate.models(
> ##D     x=x.batch, p=p.batch, a=a.batch, MAXENT.a=MAXENT.a.batch, 
> ##D     factors=factors.batch, dummy.vars=dummy.vars.batch, 
> ##D     SINK=TRUE, species.name="Bradypus",
> ##D     models.keep=TRUE,
> ##D     input.weights=model.weights,
> ##D     ENSEMBLE.tune=FALSE, PROBIT=TRUE,
> ##D     Yweights="BIOMOD",
> ##D     PLOTS=FALSE, formulae.defaults=TRUE)
> ##D 
> ##D # step 3: use previously calibrated models to create ensemble raster layers
> ##D # re-evaluate the created maps at presence and background locations
> ##D # (note that re-evaluation will be different due to truncation of raster layers
> ##D # as they wered saved as integer values ranged 0 to 1000)
> ##D ensemble.raster.results <- ensemble.raster(xn=predictors, 
> ##D     models.list=ensemble.calibrate.step2$models, 
> ##D     input.weights=model.weights,
> ##D     SINK=TRUE, evaluate=TRUE,
> ##D     RASTER.species.name="Bradypus", RASTER.stack.name="base")
> ##D 
> ##D # use the base map to check for changes in suitable habitat
> ##D # this type of analysis is typically done with different predictor layers
> ##D # (for example, predictor layers representing different possible future climates)
> ##D # In this example, changes from a previous model (ensemble.raster.results)
> ##D # are contrasted with a newly calibrated model (ensemble.raster.results2)
> ##D # step 1: 4-fold cross-validation
> ##D ensemble.calibrate2.step1 <- ensemble.calibrate.weights(
> ##D     x=x.batch, p=p.batch, a=a.batch, MAXENT.a=MAXENT.a.batch, 
> ##D     factors=factors.batch, dummy.vars=dummy.vars.batch, 
> ##D     k=4, 
> ##D     SINK=TRUE, species.name="Bradypus",
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, GLMNET=1,
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     ENSEMBLE.tune=TRUE, PROBIT=TRUE,
> ##D     ENSEMBLE.best=0, ENSEMBLE.exponent=c(1, 2, 3),
> ##D     ENSEMBLE.min=c(0.65, 0.7),
> ##D     Yweights="BIOMOD",
> ##D     PLOTS=FALSE, formulae.defaults=TRUE)
> ##D 
> ##D model.weights2 <- ensemble.calibrate2.step1$output.weights
> ##D 
> ##D ensemble.calibrate2.step2 <- ensemble.calibrate.models(
> ##D     x=x.batch, p=p.batch, a=a.batch, MAXENT.a=MAXENT.a.batch, 
> ##D     factors=factors.batch, dummy.vars=dummy.vars.batch, 
> ##D     SINK=TRUE, species.name="Bradypus",
> ##D     models.keep=TRUE,
> ##D     input.weights=model.weights2,
> ##D     ENSEMBLE.tune=FALSE, PROBIT=TRUE,
> ##D     Yweights="BIOMOD",
> ##D     PLOTS=FALSE, formulae.defaults=TRUE)
> ##D 
> ##D ensemble.raster.results2 <- ensemble.raster(
> ##D     xn=predictors, 
> ##D     models.list=ensemble.calibrate2.step2$models, 
> ##D     input.weights=model.weights2,
> ##D     SINK=TRUE, evaluate=TRUE,
> ##D     RASTER.species.name="Bradypus", RASTER.stack.name="recalibrated")
> ##D 
> ##D base.file <- paste(getwd(), "/ensembles/presence/Bradypus_base.grd", sep="")
> ##D other.file <- paste(getwd(), "/ensembles/presence/Bradypus_recalibrated.grd", sep="")
> ##D 
> ##D changed.habitat <- ensemble.habitat.change(base.map=base.file, 
> ##D     other.maps=c(other.file),
> ##D     change.folder="ensembles/change")
> ##D 
> ##D change.file <- paste(getwd(), "/ensembles/change/Bradypus_recalibrated_presence.grd", sep="")
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D dev.new()
> ##D par(mfrow=c(2,2))
> ##D raster::plot(raster(base.file), breaks=c(-1, 0, 1), col=c("grey", "green"), 
> ##D     legend.shrink=0.8, main="base presence")
> ##D raster::plot(raster(other.file), breaks=c(-1, 0, 1), col=c("grey", "green"), 
> ##D     legend.shrink=0.8, main="other presence")
> ##D raster::plot(raster(change.file), breaks=c(-1, 0, 1, 10, 11), 
> ##D     col=c("grey", "blue", "red", "green"), 
> ##D     legend.shrink=0.8, main="habitat change", sub="11 remaining, 10 lost, 1 new")
> ##D graphics::par(par.old)
> ##D 
> ##D areas <- ensemble.area(raster(change.file))
> ##D areas
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensemble.red")
> ### * ensemble.red
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.red
> ### Title: Area of Occupancy (AOO) and Extent of Occurrence (EOO) via the
> ###   'red' library.
> ### Aliases: ensemble.red ensemble.chull.create ensemble.chull.apply
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D ## Not run: 
> ##D # based on examples in the dismo package
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17"))
> ##D predictors
> ##D predictors@title <- "red"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')
> ##D 
> ##D # fit 5 ensemble models (could take some time!)
> ##D # (examples for the red package use 100 models)
> ##D ensembles <- ensemble.batch(x=predictors, 
> ##D     xn=c(predictors),
> ##D     species.presence=pres, 
> ##D     thin.km=100,
> ##D     k.splits=4, k.test=0, 
> ##D     n.ensembles=5, 
> ##D     SINK=TRUE, 
> ##D     ENSEMBLE.best=10, ENSEMBLE.exponent=c(1, 2, 3), 
> ##D     ENSEMBLE.min=0.6,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, 
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     PROBIT=TRUE,
> ##D     Yweights="BIOMOD",
> ##D     formulae.defaults=TRUE)
> ##D 
> ##D # first application of ensemble.red before applying the convex hull mask
> ##D # AOO and EOO are determined for each count level
> ##D library(red)
> ##D count.file <- paste(getwd(), "/ensembles/consensuscount/Bradypus variegatus_red.grd", sep="")
> ##D count.raster <- raster(count.file)
> ##D ensemble.red(count.raster)
> ##D 
> ##D # do not predict presence in polygons completely outside convex hull
> ##D # of known presence locations
> ##D pres.file <- paste(getwd(), "/ensembles/consensuspresence/Bradypus variegatus_red.grd", sep="")
> ##D pres.raster <- raster(pres.file)
> ##D pres1 <- pres[, -1]
> ##D chull.created <- ensemble.chull.create(x.pres=pres.raster, p=pres1)
> ##D 
> ##D mask.raster <- chull.created$mask.layer
> ##D mask.poly <- chull.created$convex.hull
> ##D par.old <- graphics::par(no.readonly=T)
> ##D par(mfrow=c(1,2))
> ##D plot(pres.raster, breaks=c(-1, 0, 1), col=c("grey", "green"),
> ##D     main="before convex hull")
> ##D points(pres1, col="blue")
> ##D 
> ##D pres.chull <- ensemble.chull.apply(pres.raster, mask=mask.raster, keep.old=T)
> ##D # load new
> ##D pres.file <- paste(getwd(), "/ensembles/consensuspresence/Bradypus variegatus_red.grd", sep="")
> ##D pres.raster <- raster(pres.file)
> ##D plot(pres.raster, breaks=c(-1, 0, 1), col=c("grey", "green"),
> ##D     main="after convex hull")
> ##D plot(mask.poly, add=T, border="blue")
> ##D 
> ##D # new application of ensemble.red
> ##D dev.new()
> ##D plot(count.raster, main="before convex hull")
> ##D ensemble.red(count.raster)
> ##D # all cells where species is predicted not to be present according to the mask layer
> ##D # will be modified to a count of zero
> ##D count.chull <- ensemble.chull.apply(count.raster, mask=mask.raster, keep.old=T)
> ##D # load new
> ##D count.file <- paste(getwd(), "/ensembles/consensuscount/Bradypus variegatus_red.grd", sep="")
> ##D count.raster <- raster(count.file)
> ##D ensemble.red(count.raster)
> ##D dev.new()
> ##D plot(count.raster, main="after convex hull")
> ##D par.old <- graphics::par(no.readonly=T)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensemble.spatialThin")
> ### * ensemble.spatialThin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.spatialThin
> ### Title: Thinning of presence point coordinates in geographical or
> ###   environmental space
> ### Aliases: ensemble.spatialThin ensemble.spatialThin.quant
> ###   ensemble.environmentalThin ensemble.environmentalThin.clara
> ###   ensemble.outlierThin
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # get predictor variables, only needed for plotting
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17", "biome"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[, -1]
> ##D 
> ##D # number of locations
> ##D nrow(pres)
> ##D 
> ##D par.old <- graphics::par(no.readonly=T)
> ##D par(mfrow=c(2,2))
> ##D 
> ##D pres.thin1 <- ensemble.spatialThin(pres, thin.km=100, runs=10, verbose=T)
> ##D plot(predictors[[1]], main="5 runs", ext=extent(SpatialPoints(pres.thin1)))
> ##D points(pres, pch=20, col="black")
> ##D points(pres.thin1, pch=20, col="red")
> ##D 
> ##D pres.thin2 <- ensemble.spatialThin(pres, thin.km=100, runs=10, verbose=T)
> ##D plot(predictors[[1]], main="5 runs (after fresh start)", ext=extent(SpatialPoints(pres.thin2)))
> ##D points(pres, pch=20, col="black")
> ##D points(pres.thin2, pch=20, col="red")
> ##D 
> ##D pres.thin3 <- ensemble.spatialThin(pres, thin.km=100, runs=100, verbose=T)
> ##D plot(predictors[[1]], main="100 runs", ext=extent(SpatialPoints(pres.thin3)))
> ##D points(pres, pch=20, col="black")
> ##D points(pres.thin3, pch=20, col="red")
> ##D 
> ##D pres.thin4 <- ensemble.spatialThin(pres, thin.km=100, runs=100, verbose=T)
> ##D plot(predictors[[1]], main="100 runs (after fresh start)", ext=extent(SpatialPoints(pres.thin4)))
> ##D points(pres, pch=20, col="black")
> ##D points(pres.thin4, pch=20, col="red")
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ##D ## thinning in environmental space
> ##D 
> ##D env.thin <- ensemble.environmentalThin(pres, predictors.stack=predictors, thin.n=60,
> ##D     return.notRetained=T)
> ##D pres.env1 <- env.thin$retained
> ##D pres.env2 <- env.thin$not.retained
> ##D 
> ##D # plot in geographical space
> ##D par.old <- graphics::par(no.readonly=T)
> ##D par(mfrow=c(1, 2))
> ##D 
> ##D plot(predictors[[1]], main="black = not retained", ext=extent(SpatialPoints(pres.thin3)))
> ##D points(pres.env2, pch=20, col="black")
> ##D points(pres.env1, pch=20, col="red")
> ##D 
> ##D # plot in environmental space
> ##D background.data <- data.frame(raster::extract(predictors, pres))
> ##D rda.result <- vegan::rda(X=background.data, scale=T)
> ##D # select number of axes
> ##D ax <- 2
> ##D while ( (sum(vegan::eigenvals(rda.result)[c(1:ax)])/
> ##D     sum(vegan::eigenvals(rda.result))) < 0.95 ) {ax <- ax+1}
> ##D rda.scores <- data.frame(vegan::scores(rda.result, display="sites", scaling=1, choices=c(1:ax)))
> ##D rownames(rda.scores) <- rownames(pres)
> ##D points.in <- rda.scores[which(rownames(rda.scores) %in% rownames(pres.env1)), c(1:2)]
> ##D points.out <- rda.scores[which(rownames(rda.scores) %in% rownames(pres.env2)), c(1:2)]
> ##D plot(points.out, main="black = not retained", pch=20, col="black", 
> ##D     xlim=range(rda.scores[, 1]), ylim=range(rda.scores[, 2]))
> ##D points(points.in, pch=20, col="red")
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ##D ## removing outliers
> ##D out.thin <- ensemble.outlierThin(pres, predictors.stack=predictors, k=10,
> ##D     return.outliers=T)
> ##D pres.out1 <- out.thin$inliers
> ##D pres.out2 <- out.thin$outliers
> ##D 
> ##D # plot in geographical space
> ##D par.old <- graphics::par(no.readonly=T)
> ##D par(mfrow=c(1, 2))
> ##D 
> ##D plot(predictors[[1]], main="black = outliers", ext=extent(SpatialPoints(pres.thin3)))
> ##D points(pres.out2, pch=20, col="black")
> ##D points(pres.out1, pch=20, col="red")
> ##D 
> ##D # plot in environmental space
> ##D background.data <- data.frame(raster::extract(predictors, pres))
> ##D rda.result <- vegan::rda(X=background.data, scale=T)
> ##D # select number of axes
> ##D ax <- 2
> ##D while ( (sum(vegan::eigenvals(rda.result)[c(1:ax)])/
> ##D     sum(vegan::eigenvals(rda.result))) < 0.95 ) {ax <- ax+1}
> ##D rda.scores <- data.frame(vegan::scores(rda.result, display="sites", scaling=1, choices=c(1:ax)))
> ##D rownames(rda.scores) <- rownames(pres)
> ##D points.in <- rda.scores[which(rownames(rda.scores) %in% rownames(pres.out1)), c(1:2)]
> ##D points.out <- rda.scores[which(rownames(rda.scores) %in% rownames(pres.out2)), c(1:2)]
> ##D plot(points.out, main="black = outliers", pch=20, col="black", 
> ##D     xlim=range(rda.scores[, 1]), ylim=range(rda.scores[, 2]))
> ##D points(points.in, pch=20, col="red")
> ##D 
> ##D graphics::par(par.old)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble.zones")
> ### * ensemble.zones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble.zones
> ### Title: Mapping of environmental zones based on the Mahalanobis distance
> ###   from centroids in environmental space.
> ### Aliases: ensemble.zones ensemble.centroids
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D predictors <- subset(predictors, subset=c("bio1", "bio5", "bio6", "bio7", "bio8", 
> ##D     "bio12", "bio16", "bio17"))
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf=1.00)
> ##D 
> ##D # predicted presence from GLM
> ##D ensemble.calibrate.step1 <- ensemble.calibrate.models(
> ##D     x=predictors, p=pres, a=background,
> ##D     species.name="Bradypus",
> ##D     MAXENT=0, MAXLIKE=0, GBM=0, GBMSTEP=0, RF=0, GLM=1, GLMSTEP=0, 
> ##D     GAM=0, GAMSTEP=0, MGCV=0, MGCVFIX=0,
> ##D     EARTH=0, RPART=0, NNET=0, FDA=0, SVM=0, SVME=0, GLMNET=0,
> ##D     BIOCLIM.O=0, BIOCLIM=0, DOMAIN=0, MAHAL=0, MAHAL01=0,
> ##D     Yweights="BIOMOD",
> ##D     models.keep=TRUE)
> ##D 
> ##D ensemble.raster.results <- ensemble.raster(xn=predictors, 
> ##D     models.list=ensemble.calibrate.step1$models, 
> ##D     RASTER.species.name="Bradypus", RASTER.stack.name="base")
> ##D 
> ##D # get presence map as for example created with ensemble.raster in subfolder 'ensemble/presence'
> ##D # presence values are values equal to 1
> ##D presence.file <- paste("ensembles//presence//Bradypus_base.grd", sep="")
> ##D presence.raster <- raster(presence.file)
> ##D 
> ##D # let cascadeKM decide on the number of clusters
> ##D dev.new()
> ##D centroids <- ensemble.centroids(presence.raster=presence.raster, 
> ##D     x=predictors, an=1000, plotit=T)
> ##D ensemble.zones(presence.raster=presence.raster, centroid.object=centroids, 
> ##D     x=predictors, RASTER.species.name="Bradypus", KML.out=T)
> ##D 
> ##D dev.new()
> ##D zones.file <- paste("ensembles//zones//Bradypus_base.grd", sep="")
> ##D zones.raster <- raster(zones.file)
> ##D max.zones <- maxValue(zones.raster)
> ##D plot(zones.raster, breaks=c(0, c(1:max.zones)), 
> ##D     col = grDevices::rainbow(n=max.zones), main="zones")
> ##D ensemble.zones(presence.raster=presence.raster, centroid.object=centroids, 
> ##D     x=predictors, RASTER.species.name="Bradypus", KML.out=T)
> ##D 
> ##D # manually choose 6 zones
> ##D dev.new()
> ##D centroids6 <- ensemble.centroids(presence.raster=presence.raster, 
> ##D     x=predictors, an=1000, plotit=T, centers=6)
> ##D ensemble.zones(presence.raster=presence.raster, centroid.object=centroids6, 
> ##D     x=predictors, RASTER.species.name="Bradypus6", KML.out=T)
> ##D 
> ##D dev.new()
> ##D zones.file <- paste("ensembles//zones//Bradypus6_base.grd", sep="")
> ##D zones.raster <- raster(zones.file)
> ##D max.zones <- maxValue(zones.raster)
> ##D plot(zones.raster, breaks=c(0, c(1:max.zones)), 
> ##D     col = grDevices::rainbow(n=max.zones), main="six zones")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("evaluation.strip")
> ### * evaluation.strip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluation.strip.data
> ### Title: Evaluation strips for ensemble suitability mapping
> ### Aliases: evaluation.strip.data evaluation.strip.plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # get predictor variables
> ##D library(dismo)
> ##D predictor.files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
> ##D     pattern='grd', full.names=TRUE)
> ##D predictors <- stack(predictor.files)
> ##D # subset based on Variance Inflation Factors
> ##D predictors <- subset(predictors, subset=c("bio5", "bio6", 
> ##D     "bio16", "bio17"))
> ##D predictors <- stack(predictors)
> ##D predictors
> ##D predictors@title <- "base"
> ##D 
> ##D # presence points
> ##D presence_file <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
> ##D pres <- read.table(presence_file, header=TRUE, sep=',')[,-1]
> ##D 
> ##D # the kfold function randomly assigns data to groups; 
> ##D # groups are used as calibration (1/5) and training (4/5) data
> ##D groupp <- kfold(pres, 5)
> ##D pres_train <- pres[groupp !=  1, ]
> ##D pres_test <- pres[groupp ==  1, ]
> ##D 
> ##D # choose background points
> ##D background <- randomPoints(predictors, n=1000, extf=1.00)
> ##D colnames(background)=c('lon', 'lat')
> ##D groupa <- kfold(background, 5)
> ##D backg_train <- background[groupa != 1, ]
> ##D backg_test <- background[groupa == 1, ]
> ##D 
> ##D # calibrate the models
> ##D # MAXLIKE not included as does not allow predictions for data.frames
> ##D # ENSEMBLE.min and ENSEMBLE.weight.min set very low to explore all
> ##D # algorithms.
> ##D # If focus is on actual ensemble, then set ENSEMBLE.min and 
> ##D # ENSEMBLE.weight.min to more usual values
> ##D ensemble.calibrate <- ensemble.calibrate.models(x=predictors, 
> ##D     p=pres_train, a=backg_train, 
> ##D     pt=pres_test, at=backg_test,
> ##D     ENSEMBLE.min=0.5, ENSEMBLE.weight.min = 0.001,
> ##D     MAXENT=0, MAXNET=1, MAXLIKE=1, GBM=1, GBMSTEP=0, RF=1, CF=1,
> ##D     GLM=1, GLMSTEP=1, GAM=1, GAMSTEP=1, MGCV=1, MGCVFIX=1, 
> ##D     EARTH=1, RPART=1, NNET=1, FDA=1, SVM=1, SVME=1, 
> ##D     BIOCLIM.O=1, BIOCLIM=1, DOMAIN=1, MAHAL=0, MAHAL01=1,
> ##D     Yweights="BIOMOD", 
> ##D     PLOTS=FALSE, models.keep=TRUE)
> ##D 
> ##D # obtain data for plotting the evaluation strip
> ##D strip.data <- evaluation.strip.data(xn=predictors, steps=500,
> ##D     models.list=ensemble.calibrate$models)
> ##D 
> ##D # in case predictions for DOMAIN failed
> ##D # however, ENSEMBLE should also be recalculated
> ##D DOMAIN.model <- ensemble.calibrate$models$DOMAIN
> ##D strip.data$plot.data[, "DOMAIN"] <- dismo::predict(object=DOMAIN.model, 
> ##D     x=strip.data$plot.data)
> ##D 
> ##D # in case predictions for MAHAL01 failed
> ##D predict.MAHAL01 <- function(model, newdata, MAHAL.shape) {
> ##D     p <- dismo::predict(object=model, x=newdata)
> ##D     p <- p - 1 - MAHAL.shape
> ##D     p <- abs(p)
> ##D     p <- MAHAL.shape / p
> ##D     return(as.numeric(p))
> ##D }
> ##D 
> ##D MAHAL01.model <- ensemble.calibrate$models$MAHAL01
> ##D MAHAL.shape1 <- ensemble.calibrate$models$formulae$MAHAL.shape
> ##D strip.data$plot.data[, "MAHAL01"] <- predict.MAHAL01(model=MAHAL01.model, 
> ##D     newdata=strip.data$plot.data, MAHAL.shape=MAHAL.shape1)
> ##D 
> ##D # create graphs
> ##D evaluation.strip.plot(data=strip.data$plot.data, variable.focal="bio6",
> ##D     TrainData=strip.data$TrainData,
> ##D     type="o", col="red")
> ##D evaluation.strip.plot(data=strip.data$plot.data, model.focal="ENSEMBLE",
> ##D     TrainData=strip.data$TrainData,
> ##D     type="o", col="red")
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("faramea")
> ### * faramea
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: faramea
> ### Title: Faramea occidentalis abundance in Panama
> ### Aliases: faramea
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(faramea)
> 
> 
> 
> cleanEx()
> nameEx("ifri")
> ### * ifri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ifri
> ### Title: Example data from the International Forestry Resources and
> ###   Institutions (IFRI) research network
> ### Aliases: ifri
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ifri)
> 
> 
> 
> cleanEx()
> nameEx("importancevalue")
> ### * importancevalue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: importancevalue
> ### Title: Importance Value
> ### Aliases: importancevalue importancevalue.comp
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> data(ifri)
> importancevalue(ifri, site='plotID', species='species', count='count', 
+     basal='basal', factor='forest', level='YSF')
         frequency density dominance frequency.percent density.percent
Queralba 0.5833333      73   76368.6         12.574850       20.054945
Acersacc 0.7500000      78   26615.6         16.167665       21.428571
Quervelu 0.3888889      43   61531.9          8.383234       11.813187
Lirituli 0.2777778      14   24138.6          5.988024        3.846154
Fagugran 0.3055556      20   14733.5          6.586826        5.494505
Acerrubr 0.2777778      19    9772.3          5.988024        5.219780
Querrubr 0.1944444      14   17101.1          4.191617        3.846154
Fraxamer 0.2500000      10    6981.6          5.389222        2.747253
Caryovat 0.1944444      14    5584.9          4.191617        3.846154
Querprin 0.1111111      10   11505.4          2.395210        2.747253
Juglnigr 0.1666667       9    5943.4          3.592814        2.472527
Sassalbi 0.1944444       9    2551.4          4.191617        2.472527
Quermueh 0.0833333       8    6770.2          1.796407        2.197802
Pinustro 0.0555556       6    4675.9          1.197605        1.648352
Ulmuamer 0.0833333       6    1826.5          1.796407        1.648352
Caryglab 0.0833333       4    2683.9          1.796407        1.098901
Cornflor 0.1111111       4     525.1          2.395210        1.098901
Ulmurubr 0.0833333       3    1068.5          1.796407        0.824176
Fraxpenn 0.0555556       2    1455.3          1.197605        0.549451
Nysssylv 0.0555556       2     561.9          1.197605        0.549451
Popugran 0.0277778       1    2123.7          0.598802        0.274725
Carylaci 0.0277778       2    1115.9          0.598802        0.549451
Carysp.  0.0277778       3     313.2          0.598802        0.824176
Tiliamer 0.0277778       1    1339.7          0.598802        0.274725
Carycord 0.0277778       2     394.7          0.598802        0.549451
Castpumi 0.0277778       1     794.2          0.598802        0.274725
Popuhete 0.0277778       1     692.8          0.598802        0.274725
Aescglab 0.0277778       1     620.2          0.598802        0.274725
Quercocc 0.0277778       1     415.5          0.598802        0.274725
Quermich 0.0277778       1     301.7          0.598802        0.274725
Prunsero 0.0277778       1     136.9          0.598802        0.274725
Platocci 0.0277778       1     116.9          0.598802        0.274725
         dominance.percent importance.value
Queralba        26.2650768        58.894872
Acersacc         9.1537723        46.750008
Quervelu        21.1623636        41.358784
Lirituli         8.3018699        18.136048
Fagugran         5.0672202        17.148552
Acerrubr         3.3609391        14.568743
Querrubr         5.8814972        13.919268
Fraxamer         2.4011473        10.537622
Caryovat         1.9207872         9.958558
Querprin         3.9569956         9.099458
Juglnigr         2.0440843         8.109426
Sassalbi         0.8774904         7.541635
Quermueh         2.3284416         6.322651
Pinustro         1.6081593         4.454116
Ulmuamer         0.6281792         4.072938
Caryglab         0.9230605         3.818369
Cornflor         0.1805951         3.674706
Ulmurubr         0.3674839         2.988067
Fraxpenn         0.5005142         2.247570
Nysssylv         0.1932515         1.940307
Popugran         0.7303937         1.603921
Carylaci         0.3837860         1.532039
Carysp.          0.1077173         1.530696
Tiliamer         0.4607564         1.334284
Carycord         0.1357472         1.284000
Castpumi         0.2731453         1.146673
Popuhete         0.2382713         1.111799
Aescglab         0.2133023         1.086830
Quercocc         0.1429009         1.016429
Quermich         0.1037622         0.977290
Prunsero         0.0470833         0.920611
Platocci         0.0402048         0.913733
> importancevalue.comp(ifri, site='plotID', species='species', count='count', 
+     basal='basal', factor='forest')
$values
[1] "LOT" "MCF" "YSF"

$LOT
         frequency density dominance frequency.percent density.percent
Acernegu 0.4117647     119   28567.1          9.150327       23.242188
Acersacc 0.4117647      59   16793.1          9.150327       11.523438
Ulmurubr 0.4705882      39   11750.7         10.457516        7.617188
Querrubr 0.2352941      13   19635.6          5.228758        2.539062
Fraxamer 0.2352941      17   17077.5          5.228758        3.320312
Prunsero 0.3529412      22    8966.5          7.843137        4.296875
Aescglab 0.2058824      39    8679.8          4.575163        7.617188
Platocci 0.2058824      16   18237.8          4.575163        3.125000
Quermueh 0.2647059      21   12837.2          5.882353        4.101562
Acerrubr 0.1470588      35   11718.5          3.267974        6.835938
Lirituli 0.2058824      18    8287.4          4.575163        3.515625
Pinustro 0.0882353      25    6560.1          1.960784        4.882812
Quervelu 0.0588235       5   14599.6          1.307190        0.976562
Popudelt 0.0588235      14    8066.0          1.307190        2.734375
Caryovat 0.1176471       8    3456.7          2.614379        1.562500
Quercocc 0.0588235       3    8363.1          1.307190        0.585938
Robipseu 0.0588235      14    2337.4          1.307190        2.734375
Carycord 0.0882353       5    2095.7          1.960784        0.976562
Sassalbi 0.0882353       4    1865.3          1.960784        0.781250
Carytome 0.0588235       4    2600.8          1.307190        0.781250
Cornflor 0.0882353       4     540.2          1.960784        0.781250
Celtocci 0.0588235       3    2015.0          1.307190        0.585938
Cerccana 0.0882353       3     328.5          1.960784        0.585938
Fraxpenn 0.0588235       3    1189.9          1.307190        0.585938
Unkn11   0.0294118       4    1377.2          0.653595        0.781250
Ulmuamer 0.0588235       2     758.9          1.307190        0.390625
Queralba 0.0294118       2    1819.4          0.653595        0.390625
Pinuresi 0.0294118       2    1197.7          0.653595        0.390625
Nysssylv 0.0294118       2     377.8          0.653595        0.390625
Pinutaed 0.0294118       1     706.9          0.653595        0.195312
Tiliamer 0.0294118       1     572.6          0.653595        0.195312
Caryglab 0.0294118       1     475.3          0.653595        0.195312
Gledtria 0.0294118       1     471.4          0.653595        0.195312
Juglnigr 0.0294118       1     336.5          0.653595        0.195312
Liqustyr 0.0294118       1     254.5          0.653595        0.195312
Rubuocci 0.0294118       1      98.5          0.653595        0.195312
         dominance.percent importance.value
Acernegu        12.6955748        45.088089
Acersacc         7.4630627        28.136827
Ulmurubr         5.2221573        23.296861
Querrubr         8.7263050        16.494126
Fraxamer         7.5894536        16.138524
Prunsero         3.9848242        16.124836
Aescglab         3.8574112        16.049762
Platocci         8.1051053        15.805269
Quermueh         5.7050115        15.688927
Acerrubr         5.2078473        15.311759
Lirituli         3.6830237        11.773812
Pinustro         2.9153901         9.758987
Quervelu         6.4882440         8.771996
Popudelt         3.5846308         7.626195
Caryovat         1.5362005         5.713080
Quercocc         3.7166657         5.609793
Robipseu         1.0387697         5.080334
Carycord         0.9313552         3.868702
Sassalbi         0.8289625         3.570997
Carytome         1.1558279         3.244267
Cornflor         0.2400716         2.982106
Celtocci         0.8954911         2.788618
Cerccana         0.1459895         2.692711
Fraxpenn         0.5288064         2.421933
Unkn11           0.6120448         2.046890
Ulmuamer         0.3372646         2.035079
Queralba         0.8085640         1.852784
Pinuresi         0.5322728         1.576493
Nysssylv         0.1678990         1.212119
Pinutaed         0.3141552         1.163062
Tiliamer         0.2544706         1.103378
Caryglab         0.2112292         1.060137
Gledtria         0.2094960         1.058403
Juglnigr         0.1495448         0.998452
Liqustyr         0.1131030         0.962010
Rubuocci         0.0437746         0.892682

$MCF
         frequency density dominance frequency.percent density.percent
Acersacc 0.6216216     114   52247.6          13.85542       20.212766
Lirituli 0.5675676      88   67348.9          12.65060       15.602837
Junivirg 0.2972973     115   28229.0           6.62651       20.390071
Sassalbi 0.3243243      43   13820.9           7.22892        7.624113
Queralba 0.3243243      24   22977.0           7.22892        4.255319
Caryovat 0.2972973      31   20408.3           6.62651        5.496454
Fraxamer 0.2432432      15   12945.3           5.42169        2.659574
Quermueh 0.2162162      19   10573.2           4.81928        3.368794
Cornflor 0.1891892      22    2689.3           4.21687        3.900709
Ulmurubr 0.2162162      14    2600.6           4.81928        2.482270
Juglnigr 0.1081081       7   10087.6           2.40964        1.241135
Ulmuamer 0.1621622      11    3713.9           3.61446        1.950355
Querrubr 0.1081081      10    7269.4           2.40964        1.773050
Carysp.  0.1351351       9    4906.4           3.01205        1.595745
Cerccana 0.1081081      11    1923.7           2.40964        1.950355
Fagugran 0.0810811       5    1907.6           1.80723        0.886525
Acersp.  0.0540541       4    2015.4           1.20482        0.709220
Platocci 0.0540541       2    1782.4           1.20482        0.354610
Diosvirg 0.0540541       2     698.8           1.20482        0.354610
Quervelu 0.0540541       2     643.7           1.20482        0.354610
Gledtria 0.0270270       2    2174.0           0.60241        0.354610
Celtocci 0.0540541       2     448.5           1.20482        0.354610
Quersp.  0.0270270       2    2015.5           0.60241        0.354610
Fraxsp.  0.0270270       1    1520.5           0.60241        0.177305
Aescglab 0.0270270       3     410.4           0.60241        0.531915
Prunsero 0.0270270       2     236.9           0.60241        0.354610
Rhussp.  0.0270270       2     180.2           0.60241        0.354610
Quercocc 0.0270270       1     356.3           0.60241        0.177305
Querprin 0.0270270       1     339.8           0.60241        0.177305
         dominance.percent importance.value
Acersacc        18.8980331        52.966221
Lirituli        24.3601953        52.613635
Junivirg        10.2104705        37.227047
Sassalbi         4.9990397        19.852069
Queralba         8.3108144        19.795049
Caryovat         7.3817119        19.504672
Fraxamer         4.6823339        12.763595
Quermueh         3.8243419        12.012413
Cornflor         0.9727237         9.090300
Ulmurubr         0.9406408         8.242187
Juglnigr         3.6486996         7.299473
Ulmuamer         1.3433230         6.908135
Querrubr         2.6293526         6.812041
Carysp.          1.7746520         6.382445
Cerccana         0.6958051         5.055798
Fagugran         0.6899817         3.383735
Acersp.          0.7289731         2.643012
Platocci         0.6446967         2.204126
Diosvirg         0.2527570         1.812186
Quervelu         0.2328272         1.792256
Gledtria         0.7863390         1.743359
Celtocci         0.1622231         1.721652
Quersp.          0.7290093         1.686029
Fraxsp.          0.5499671         1.329682
Aescglab         0.1484423         1.282767
Prunsero         0.0856871         1.042707
Rhussp.          0.0651786         1.022198
Quercocc         0.1288742         0.908589
Querprin         0.1229062         0.902621

$YSF
         frequency density dominance frequency.percent density.percent
Queralba 0.5833333      73   76368.6         12.574850       20.054945
Acersacc 0.7500000      78   26615.6         16.167665       21.428571
Quervelu 0.3888889      43   61531.9          8.383234       11.813187
Lirituli 0.2777778      14   24138.6          5.988024        3.846154
Fagugran 0.3055556      20   14733.5          6.586826        5.494505
Acerrubr 0.2777778      19    9772.3          5.988024        5.219780
Querrubr 0.1944444      14   17101.1          4.191617        3.846154
Fraxamer 0.2500000      10    6981.6          5.389222        2.747253
Caryovat 0.1944444      14    5584.9          4.191617        3.846154
Querprin 0.1111111      10   11505.4          2.395210        2.747253
Juglnigr 0.1666667       9    5943.4          3.592814        2.472527
Sassalbi 0.1944444       9    2551.4          4.191617        2.472527
Quermueh 0.0833333       8    6770.2          1.796407        2.197802
Pinustro 0.0555556       6    4675.9          1.197605        1.648352
Ulmuamer 0.0833333       6    1826.5          1.796407        1.648352
Caryglab 0.0833333       4    2683.9          1.796407        1.098901
Cornflor 0.1111111       4     525.1          2.395210        1.098901
Ulmurubr 0.0833333       3    1068.5          1.796407        0.824176
Fraxpenn 0.0555556       2    1455.3          1.197605        0.549451
Nysssylv 0.0555556       2     561.9          1.197605        0.549451
Popugran 0.0277778       1    2123.7          0.598802        0.274725
Carylaci 0.0277778       2    1115.9          0.598802        0.549451
Carysp.  0.0277778       3     313.2          0.598802        0.824176
Tiliamer 0.0277778       1    1339.7          0.598802        0.274725
Carycord 0.0277778       2     394.7          0.598802        0.549451
Castpumi 0.0277778       1     794.2          0.598802        0.274725
Popuhete 0.0277778       1     692.8          0.598802        0.274725
Aescglab 0.0277778       1     620.2          0.598802        0.274725
Quercocc 0.0277778       1     415.5          0.598802        0.274725
Quermich 0.0277778       1     301.7          0.598802        0.274725
Prunsero 0.0277778       1     136.9          0.598802        0.274725
Platocci 0.0277778       1     116.9          0.598802        0.274725
         dominance.percent importance.value
Queralba        26.2650768        58.894872
Acersacc         9.1537723        46.750008
Quervelu        21.1623636        41.358784
Lirituli         8.3018699        18.136048
Fagugran         5.0672202        17.148552
Acerrubr         3.3609391        14.568743
Querrubr         5.8814972        13.919268
Fraxamer         2.4011473        10.537622
Caryovat         1.9207872         9.958558
Querprin         3.9569956         9.099458
Juglnigr         2.0440843         8.109426
Sassalbi         0.8774904         7.541635
Quermueh         2.3284416         6.322651
Pinustro         1.6081593         4.454116
Ulmuamer         0.6281792         4.072938
Caryglab         0.9230605         3.818369
Cornflor         0.1805951         3.674706
Ulmurubr         0.3674839         2.988067
Fraxpenn         0.5005142         2.247570
Nysssylv         0.1932515         1.940307
Popugran         0.7303937         1.603921
Carylaci         0.3837860         1.532039
Carysp.          0.1077173         1.530696
Tiliamer         0.4607564         1.334284
Carycord         0.1357472         1.284000
Castpumi         0.2731453         1.146673
Popuhete         0.2382713         1.111799
Aescglab         0.2133023         1.086830
Quercocc         0.1429009         1.016429
Quermich         0.1037622         0.977290
Prunsero         0.0470833         0.920611
Platocci         0.0402048         0.913733

> 
> # When all survey plots are the same size, importance value
> # is not affected. Counts and basal areas now calculated per square metre
> ifri$count <- ifri$count/314.16
> ifri$basal <- ifri$basal/314.16
> 
> importancevalue(ifri, site='plotID', species='species', count='count', 
+     basal='basal', factor='forest', level='YSF')
         frequency    density  dominance frequency.percent density.percent
Queralba 0.5833333 0.23236567 243.088235         12.574850       20.054945
Acersacc 0.7500000 0.24828113  84.719888         16.167665       21.428571
Quervelu 0.3888889 0.13687293 195.861663          8.383234       11.813187
Lirituli 0.2777778 0.04456328  76.835371          5.988024        3.846154
Fagugran 0.3055556 0.06366183  46.898077          6.586826        5.494505
Acerrubr 0.2777778 0.06047874  31.106124          5.988024        5.219780
Querrubr 0.1944444 0.04456328  54.434365          4.191617        3.846154
Fraxamer 0.2500000 0.03183091  22.223071          5.389222        2.747253
Caryovat 0.1944444 0.04456328  17.777247          4.191617        3.846154
Querprin 0.1111111 0.03183091  36.622740          2.395210        2.747253
Juglnigr 0.1666667 0.02864782  18.918386          3.592814        2.472527
Sassalbi 0.1944444 0.02864782   8.121339          4.191617        2.472527
Quermueh 0.0833333 0.02546473  21.550166          1.796407        2.197802
Pinustro 0.0555556 0.01909855  14.883817          1.197605        1.648352
Ulmuamer 0.0833333 0.01909855   5.813916          1.796407        1.648352
Caryglab 0.0833333 0.01273237   8.543099          1.796407        1.098901
Cornflor 0.1111111 0.01273237   1.671441          2.395210        1.098901
Ulmurubr 0.0833333 0.00954927   3.401133          1.796407        0.824176
Fraxpenn 0.0555556 0.00636618   4.632353          1.197605        0.549451
Nysssylv 0.0555556 0.00636618   1.788579          1.197605        0.549451
Popugran 0.0277778 0.00318309   6.759931          0.598802        0.274725
Carylaci 0.0277778 0.00636618   3.552012          0.598802        0.549451
Carysp.  0.0277778 0.00954927   0.996944          0.598802        0.824176
Tiliamer 0.0277778 0.00318309   4.264388          0.598802        0.274725
Carycord 0.0277778 0.00636618   1.256366          0.598802        0.549451
Castpumi 0.0277778 0.00318309   2.528011          0.598802        0.274725
Popuhete 0.0277778 0.00318309   2.205246          0.598802        0.274725
Aescglab 0.0277778 0.00318309   1.974153          0.598802        0.274725
Quercocc 0.0277778 0.00318309   1.322574          0.598802        0.274725
Quermich 0.0277778 0.00318309   0.960339          0.598802        0.274725
Prunsero 0.0277778 0.00318309   0.435765          0.598802        0.274725
Platocci 0.0277778 0.00318309   0.372103          0.598802        0.274725
         dominance.percent importance.value
Queralba        26.2650768        58.894872
Acersacc         9.1537723        46.750008
Quervelu        21.1623636        41.358784
Lirituli         8.3018699        18.136048
Fagugran         5.0672202        17.148552
Acerrubr         3.3609391        14.568743
Querrubr         5.8814972        13.919268
Fraxamer         2.4011473        10.537622
Caryovat         1.9207872         9.958558
Querprin         3.9569956         9.099458
Juglnigr         2.0440843         8.109426
Sassalbi         0.8774904         7.541635
Quermueh         2.3284416         6.322651
Pinustro         1.6081593         4.454116
Ulmuamer         0.6281792         4.072938
Caryglab         0.9230605         3.818369
Cornflor         0.1805951         3.674706
Ulmurubr         0.3674839         2.988067
Fraxpenn         0.5005142         2.247570
Nysssylv         0.1932515         1.940307
Popugran         0.7303937         1.603921
Carylaci         0.3837860         1.532039
Carysp.          0.1077173         1.530696
Tiliamer         0.4607564         1.334284
Carycord         0.1357472         1.284000
Castpumi         0.2731453         1.146673
Popuhete         0.2382713         1.111799
Aescglab         0.2133023         1.086830
Quercocc         0.1429009         1.016429
Quermich         0.1037622         0.977290
Prunsero         0.0470833         0.920611
Platocci         0.0402048         0.913733
> importancevalue.comp(ifri, site='plotID', species='species', count='count', 
+     basal='basal', factor='forest')
$values
[1] "LOT" "MCF" "YSF"

$LOT
         frequency    density dominance frequency.percent density.percent
Acernegu 0.4117647 0.37878788 90.931691          9.150327       23.242188
Acersacc 0.4117647 0.18780239 53.453972          9.150327       11.523438
Ulmurubr 0.4705882 0.12414057 37.403552         10.457516        7.617188
Querrubr 0.2352941 0.04138019 62.501910          5.228758        2.539062
Fraxamer 0.2352941 0.05411255 54.359244          5.228758        3.320312
Prunsero 0.3529412 0.07002801 28.541189          7.843137        4.296875
Aescglab 0.2058824 0.12414057 27.628597          4.575163        7.617188
Platocci 0.2058824 0.05092946 58.052585          4.575163        3.125000
Quermueh 0.2647059 0.06684492 40.861981          5.882353        4.101562
Acerrubr 0.1470588 0.11140820 37.301057          3.267974        6.835938
Lirituli 0.2058824 0.05729565 26.379552          4.575163        3.515625
Pinustro 0.0882353 0.07957729 20.881398          1.960784        4.882812
Quervelu 0.0588235 0.01591546 46.471861          1.307190        0.976562
Popudelt 0.0588235 0.04456328 25.674815          1.307190        2.734375
Caryovat 0.1176471 0.02546473 11.002992          2.614379        1.562500
Quercocc 0.0588235 0.00954927 26.620512          1.307190        0.585938
Robipseu 0.0588235 0.04456328  7.440158          1.307190        2.734375
Carycord 0.0882353 0.01591546  6.670805          1.960784        0.976562
Sassalbi 0.0882353 0.01273237  5.937420          1.960784        0.781250
Carytome 0.0588235 0.01273237  8.278584          1.307190        0.781250
Cornflor 0.0882353 0.01273237  1.719506          1.960784        0.781250
Celtocci 0.0588235 0.00954927  6.413929          1.307190        0.585938
Cerccana 0.0882353 0.00954927  1.045646          1.960784        0.585938
Fraxpenn 0.0588235 0.00954927  3.787560          1.307190        0.585938
Unkn11   0.0294118 0.01273237  4.383754          0.653595        0.781250
Ulmuamer 0.0588235 0.00636618  2.415648          1.307190        0.390625
Queralba 0.0294118 0.00636618  5.791317          0.653595        0.390625
Pinuresi 0.0294118 0.00636618  3.812389          0.653595        0.390625
Nysssylv 0.0294118 0.00636618  1.202572          0.653595        0.390625
Pinutaed 0.0294118 0.00318309  2.250127          0.653595        0.195312
Tiliamer 0.0294118 0.00318309  1.822638          0.653595        0.195312
Caryglab 0.0294118 0.00318309  1.512923          0.653595        0.195312
Gledtria 0.0294118 0.00318309  1.500509          0.653595        0.195312
Juglnigr 0.0294118 0.00318309  1.071110          0.653595        0.195312
Liqustyr 0.0294118 0.00318309  0.810097          0.653595        0.195312
Rubuocci 0.0294118 0.00318309  0.313535          0.653595        0.195312
         dominance.percent importance.value
Acernegu        12.6955748        45.088089
Acersacc         7.4630627        28.136827
Ulmurubr         5.2221573        23.296861
Querrubr         8.7263050        16.494126
Fraxamer         7.5894536        16.138524
Prunsero         3.9848242        16.124836
Aescglab         3.8574112        16.049762
Platocci         8.1051053        15.805269
Quermueh         5.7050115        15.688927
Acerrubr         5.2078473        15.311759
Lirituli         3.6830237        11.773812
Pinustro         2.9153901         9.758987
Quervelu         6.4882440         8.771996
Popudelt         3.5846308         7.626195
Caryovat         1.5362005         5.713080
Quercocc         3.7166657         5.609793
Robipseu         1.0387697         5.080334
Carycord         0.9313552         3.868702
Sassalbi         0.8289625         3.570997
Carytome         1.1558279         3.244267
Cornflor         0.2400716         2.982106
Celtocci         0.8954911         2.788618
Cerccana         0.1459895         2.692711
Fraxpenn         0.5288064         2.421933
Unkn11           0.6120448         2.046890
Ulmuamer         0.3372646         2.035079
Queralba         0.8085640         1.852784
Pinuresi         0.5322728         1.576493
Nysssylv         0.1678990         1.212119
Pinutaed         0.3141552         1.163062
Tiliamer         0.2544706         1.103378
Caryglab         0.2112292         1.060137
Gledtria         0.2094960         1.058403
Juglnigr         0.1495448         0.998452
Liqustyr         0.1131030         0.962010
Rubuocci         0.0437746         0.892682

$MCF
         frequency    density  dominance frequency.percent density.percent
Acersacc 0.6216216 0.36287242 166.308887          13.85542       20.212766
Lirituli 0.5675676 0.28011204 214.377706          12.65060       15.602837
Junivirg 0.2972973 0.36605551  89.855488           6.62651       20.390071
Sassalbi 0.3243243 0.13687293  43.993188           7.22892        7.624113
Queralba 0.3243243 0.07639419  73.137892           7.22892        4.255319
Caryovat 0.2972973 0.09867583  64.961485           6.62651        5.496454
Fraxamer 0.2432432 0.04774637  41.206073           5.42169        2.659574
Quermueh 0.2162162 0.06047874  33.655462           4.81928        3.368794
Cornflor 0.1891892 0.07002801   8.560288           4.21687        3.900709
Ulmurubr 0.2162162 0.04456328   8.277948           4.81928        2.482270
Juglnigr 0.1081081 0.02228164  32.109753           2.40964        1.241135
Ulmuamer 0.1621622 0.03501401  11.821683           3.61446        1.950355
Querrubr 0.1081081 0.03183091  23.139165           2.40964        1.773050
Carysp.  0.1351351 0.02864782  15.617520           3.01205        1.595745
Cerccana 0.1081081 0.03501401   6.123313           2.40964        1.950355
Fagugran 0.0810811 0.01591546   6.072065           1.80723        0.886525
Acersp.  0.0540541 0.01273237   6.415202           1.20482        0.709220
Platocci 0.0540541 0.00636618   5.673542           1.20482        0.354610
Diosvirg 0.0540541 0.00636618   2.224344           1.20482        0.354610
Quervelu 0.0540541 0.00636618   2.048956           1.20482        0.354610
Gledtria 0.0270270 0.00636618   6.920041           0.60241        0.354610
Celtocci 0.0540541 0.00636618   1.427617           1.20482        0.354610
Quersp.  0.0270270 0.00636618   6.415521           0.60241        0.354610
Fraxsp.  0.0270270 0.00318309   4.839891           0.60241        0.177305
Aescglab 0.0270270 0.00954927   1.306341           0.60241        0.531915
Prunsero 0.0270270 0.00636618   0.754074           0.60241        0.354610
Rhussp.  0.0270270 0.00636618   0.573593           0.60241        0.354610
Quercocc 0.0270270 0.00318309   1.134135           0.60241        0.177305
Querprin 0.0270270 0.00318309   1.081614           0.60241        0.177305
         dominance.percent importance.value
Acersacc        18.8980331        52.966221
Lirituli        24.3601953        52.613635
Junivirg        10.2104705        37.227047
Sassalbi         4.9990397        19.852069
Queralba         8.3108144        19.795049
Caryovat         7.3817119        19.504672
Fraxamer         4.6823339        12.763595
Quermueh         3.8243419        12.012413
Cornflor         0.9727237         9.090300
Ulmurubr         0.9406408         8.242187
Juglnigr         3.6486996         7.299473
Ulmuamer         1.3433230         6.908135
Querrubr         2.6293526         6.812041
Carysp.          1.7746520         6.382445
Cerccana         0.6958051         5.055798
Fagugran         0.6899817         3.383735
Acersp.          0.7289731         2.643012
Platocci         0.6446967         2.204126
Diosvirg         0.2527570         1.812186
Quervelu         0.2328272         1.792256
Gledtria         0.7863390         1.743359
Celtocci         0.1622231         1.721652
Quersp.          0.7290093         1.686029
Fraxsp.          0.5499671         1.329682
Aescglab         0.1484423         1.282767
Prunsero         0.0856871         1.042707
Rhussp.          0.0651786         1.022198
Quercocc         0.1288742         0.908589
Querprin         0.1229062         0.902621

$YSF
         frequency    density  dominance frequency.percent density.percent
Queralba 0.5833333 0.23236567 243.088235         12.574850       20.054945
Acersacc 0.7500000 0.24828113  84.719888         16.167665       21.428571
Quervelu 0.3888889 0.13687293 195.861663          8.383234       11.813187
Lirituli 0.2777778 0.04456328  76.835371          5.988024        3.846154
Fagugran 0.3055556 0.06366183  46.898077          6.586826        5.494505
Acerrubr 0.2777778 0.06047874  31.106124          5.988024        5.219780
Querrubr 0.1944444 0.04456328  54.434365          4.191617        3.846154
Fraxamer 0.2500000 0.03183091  22.223071          5.389222        2.747253
Caryovat 0.1944444 0.04456328  17.777247          4.191617        3.846154
Querprin 0.1111111 0.03183091  36.622740          2.395210        2.747253
Juglnigr 0.1666667 0.02864782  18.918386          3.592814        2.472527
Sassalbi 0.1944444 0.02864782   8.121339          4.191617        2.472527
Quermueh 0.0833333 0.02546473  21.550166          1.796407        2.197802
Pinustro 0.0555556 0.01909855  14.883817          1.197605        1.648352
Ulmuamer 0.0833333 0.01909855   5.813916          1.796407        1.648352
Caryglab 0.0833333 0.01273237   8.543099          1.796407        1.098901
Cornflor 0.1111111 0.01273237   1.671441          2.395210        1.098901
Ulmurubr 0.0833333 0.00954927   3.401133          1.796407        0.824176
Fraxpenn 0.0555556 0.00636618   4.632353          1.197605        0.549451
Nysssylv 0.0555556 0.00636618   1.788579          1.197605        0.549451
Popugran 0.0277778 0.00318309   6.759931          0.598802        0.274725
Carylaci 0.0277778 0.00636618   3.552012          0.598802        0.549451
Carysp.  0.0277778 0.00954927   0.996944          0.598802        0.824176
Tiliamer 0.0277778 0.00318309   4.264388          0.598802        0.274725
Carycord 0.0277778 0.00636618   1.256366          0.598802        0.549451
Castpumi 0.0277778 0.00318309   2.528011          0.598802        0.274725
Popuhete 0.0277778 0.00318309   2.205246          0.598802        0.274725
Aescglab 0.0277778 0.00318309   1.974153          0.598802        0.274725
Quercocc 0.0277778 0.00318309   1.322574          0.598802        0.274725
Quermich 0.0277778 0.00318309   0.960339          0.598802        0.274725
Prunsero 0.0277778 0.00318309   0.435765          0.598802        0.274725
Platocci 0.0277778 0.00318309   0.372103          0.598802        0.274725
         dominance.percent importance.value
Queralba        26.2650768        58.894872
Acersacc         9.1537723        46.750008
Quervelu        21.1623636        41.358784
Lirituli         8.3018699        18.136048
Fagugran         5.0672202        17.148552
Acerrubr         3.3609391        14.568743
Querrubr         5.8814972        13.919268
Fraxamer         2.4011473        10.537622
Caryovat         1.9207872         9.958558
Querprin         3.9569956         9.099458
Juglnigr         2.0440843         8.109426
Sassalbi         0.8774904         7.541635
Quermueh         2.3284416         6.322651
Pinustro         1.6081593         4.454116
Ulmuamer         0.6281792         4.072938
Caryglab         0.9230605         3.818369
Cornflor         0.1805951         3.674706
Ulmurubr         0.3674839         2.988067
Fraxpenn         0.5005142         2.247570
Nysssylv         0.1932515         1.940307
Popugran         0.7303937         1.603921
Carylaci         0.3837860         1.532039
Carysp.          0.1077173         1.530696
Tiliamer         0.4607564         1.334284
Carycord         0.1357472         1.284000
Castpumi         0.2731453         1.146673
Popuhete         0.2382713         1.111799
Aescglab         0.2133023         1.086830
Quercocc         0.1429009         1.016429
Quermich         0.1037622         0.977290
Prunsero         0.0470833         0.920611
Platocci         0.0402048         0.913733

> 
> # Calculate diversity profiles from importance values
> imp <- importancevalue.comp(ifri, site='plotID', species='species', 
+     count='count', basal='basal', factor='forest')
> vals <- imp[["values"]]
> for (i in 1:length(vals)) {
+     imp.i <- data.frame(imp[[vals[i]]])
+     name.i <- paste(vals[[i]], ".Renyi", sep="")
+     imp[[name.i]] <- renyi(imp.i$importance.value)
+ }
> 
> # LOT more diverse
> imp$LOT.Renyi - imp$MCF.Renyi
       0     0.25      0.5        1        2        4        8       16 
0.216223 0.259129 0.302735 0.376402 0.439521 0.391807 0.279478 0.214602 
      32       64      Inf 
0.185327 0.171562 0.161036 
attr(,"class")
[1] "renyi"   "numeric"
> imp$LOT.Renyi - imp$YSF.Renyi
       0     0.25      0.5        1        2        4        8       16 
0.117783 0.172814 0.232469 0.341464 0.451496 0.428211 0.329145 0.286771 
      32       64      Inf 
0.275773 0.271376 0.267136 
attr(,"class")
[1] "renyi"   "numeric"
> 
> # YSF and MCF different richness and evenness
> imp$YSF.Renyi - imp$MCF.Renyi
         0       0.25        0.5          1          2          4          8 
 0.0984401  0.0863151  0.0702663  0.0349379 -0.0119748 -0.0364041 -0.0496670 
        16         32         64        Inf 
-0.0721692 -0.0904461 -0.0998142 -0.1060997 
attr(,"class")
[1] "renyi"   "numeric"
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("makecommunitydataset")
> ### * makecommunitydataset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makecommunitydataset
> ### Title: Make a Community Dataset from a Stacked Dataset
> ### Aliases: makecommunitydataset stackcommunitydataset
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D dune.file <- normalizePath(paste(system.file(package="BiodiversityR"), 
> ##D     '/etc/dunestacked.csv', sep=''))
> ##D dune.stacked <- read.csv(dune.file)
> ##D 
> ##D # dune.stacked has different variables for sites, species and abundance
> ##D head(dune.stacked)
> ##D dune.comm2 <- makecommunitydataset(dune.stacked, row='sites', column='species', 
> ##D     value='abundance')
> ##D 
> ##D # recreate the original stack
> ##D dune.stacked2 <- stackcommunitydataset(dune.comm2, remove.zeroes=T)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("multiconstrained")
> ### * multiconstrained
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multiconstrained
> ### Title: Pairwise Comparisons for All Levels of a Categorical Variable by
> ###   RDA, CCA or Capscale
> ### Aliases: multiconstrained
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(vegan)
> ##D library(MASS)
> ##D data(dune)
> ##D data(dune.env)
> ##D multiconstrained(method="capscale", dune~Management, data=dune.env,
> ##D     distance="bray",add=TRUE)
> ##D multiconstrained(method="capscale", dune~Management, data=dune.env, 
> ##D     distance="bray", add=TRUE, contrast=3)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nested.anova.dbrda")
> ### * nested.anova.dbrda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nested.anova.dbrda
> ### Title: Nested Analysis of Variance via Distance-based Redundancy
> ###   Analysis or Non-parametric Multivariate Analysis of Variance
> ### Aliases: nested.anova.dbrda nested.npmanova
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(vegan)
> ##D data(warcom)
> ##D data(warenv)
> ##D # use larger number of permutations for real studies
> ##D nested.npmanova(warcom~rift.valley+popshort, data=warenv, method="jac", 
> ##D     permutations=5)
> ##D nested.anova.dbrda(warcom~rift.valley+popshort, data=warenv, method="jac", 
> ##D     permutations=5)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nnetrandom")
> ### * nnetrandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nnetrandom
> ### Title: Calculate the NNET Result with the Smallest Value from Various
> ###   Random Starts
> ### Aliases: nnetrandom
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(faramea)
> ##D faramea <- na.omit(faramea)
> ##D faramea$presence <- as.numeric(faramea$Faramea.occidentalis > 0)
> ##D attach(faramea)
> ##D library(nnet)
> ##D result <- nnetrandom(presence ~ Elevation, data=faramea, size=2, 
> ##D     skip=FALSE, entropy=TRUE, trace=FALSE, maxit=1000, tries=100, 
> ##D     leave.one.out=FALSE)
> ##D summary(result)
> ##D result$fitted.values
> ##D result$value
> ##D result2 <- nnetrandom(presence ~ Elevation, data=faramea, size=2, 
> ##D     skip=FALSE, entropy=TRUE, trace=FALSE, maxit=1000, tries=50, 
> ##D     leave.one.out=TRUE)
> ##D result2$range
> ##D result2$CV
> ##D result2$successful
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ordicoeno")
> ### * ordicoeno
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordicoeno
> ### Title: Coenoclines for an Ordination Axis
> ### Aliases: ordicoeno
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.
> data(dune)
> Ordination.model1 <- rda(dune)
> plot1 <- ordiplot(Ordination.model1, choices=c(1,2), scaling=1)
> ordicoeno(dune, ordiplot=plot1, legend=TRUE)
edfs from GAM models for each species...
Achimill Agrostol Airaprae Alopgeni Anthodor Bellpere Bromhord Chenalbu 
 2.47131  1.00000  1.62095  6.78598  3.68201  1.00000  1.54382  1.00000 
Cirsarve Comapalu Eleopalu Elymrepe Empenigr Hyporadi Juncarti Juncbufo 
 1.00000  8.96893  2.45906  2.32790  1.00000  1.47389  1.00000  1.42725 
Lolipere Planlanc  Poaprat  Poatriv Ranuflam Rumeacet Sagiproc Salirepe 
 1.00000  1.84969  1.34225  1.00000  2.79459  1.80062  2.34430  1.00000 
Scorautu Trifprat Trifrepe Vicilath Bracruta Callcusp 
 1.00000  2.26065  3.34661  1.00000  1.19955  2.02528 
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("ordisymbol")
> ### * ordisymbol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordisymbol
> ### Title: Add Other Graphical Items to Ordination Diagrams
> ### Aliases: ordisymbol ordibubble ordicluster2 ordinearest ordivector
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune)
> data(dune.env)
> Ordination.model1 <- rda(dune)
> plot1 <- ordiplot(Ordination.model1, choices=c(1,2), scaling=2)
> ordisymbol(plot1, dune.env, "Management", legend=TRUE, 
+     legend.x="topleft", legend.ncol=1)
> plot2 <- ordiplot(Ordination.model1, choices=c(1,2), scaling=1)
> distmatrix <- vegdist(dune, method='bray')
> cluster <- hclust(distmatrix, method='single')
> ordicluster2(plot2, cluster)
> ordinearest(plot2, distmatrix, col=2)
> ordivector(plot2, "Agrostol", lty=2)
> 
> 
> 
> cleanEx()
> nameEx("radfitresult")
> ### * radfitresult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: radfitresult
> ### Title: Alternative Rank Abundance Fitting Results
> ### Aliases: radfitresult
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(BCI)
> BCIall <- t(as.matrix(colSums(BCI)))
> radfitresult(BCIall)
$radfit

Deviance for RAD models:

           Abarema.macradenia Vachellia.melanoceras Acalypha.diversifolia
Null                        0                     0                     0
Preemption                  0                     0                     0
Lognormal                   0                     0                     0
Zipf                        0                     0                     0
Mandelbrot                  0                     0                     0
           Acalypha.macrostachya Adelia.triloba Aegiphila.panamensis
Null                           0              0                    0
Preemption                     0              0                    0
Lognormal                      0              0                    0
Zipf                           0              0                    0
Mandelbrot                     0              0                    0
           Alchornea.costaricensis Alchornea.latifolia Alibertia.edulis
Null                             0                   0                0
Preemption                       0                   0                0
Lognormal                        0                   0                0
Zipf                             0                   0                0
Mandelbrot                       0                   0                0
           Allophylus.psilospermus Alseis.blackiana Amaioua.corymbosa
Null                             0                0                 0
Preemption                       0                0                 0
Lognormal                        0                0                 0
Zipf                             0                0                 0
Mandelbrot                       0                0                 0
           Anacardium.excelsum Andira.inermis Annona.spraguei Apeiba.glabra
Null                         0              0               0             0
Preemption                   0              0               0             0
Lognormal                    0              0               0             0
Zipf                         0              0               0             0
Mandelbrot                   0              0               0             0
           Apeiba.tibourbou Aspidosperma.desmanthum Astrocaryum.standleyanum
Null                      0                       0                        0
Preemption                0                       0                        0
Lognormal                 0                       0                        0
Zipf                      0                       0                        0
Mandelbrot                0                       0                        0
           Astronium.graveolens Attalea.butyracea Banara.guianensis
Null                          0                 0                 0
Preemption                    0                 0                 0
Lognormal                     0                 0                 0
Zipf                          0                 0                 0
Mandelbrot                    0                 0                 0
           Beilschmiedia.pendula Brosimum.alicastrum Brosimum.guianense
Null                           0                   0                  0
Preemption                     0                   0                  0
Lognormal                      0                   0                  0
Zipf                           0                   0                  0
Mandelbrot                     0                   0                  0
           Calophyllum.longifolium Casearia.aculeata Casearia.arborea
Null                             0                 0                0
Preemption                       0                 0                0
Lognormal                        0                 0                0
Zipf                             0                 0                0
Mandelbrot                       0                 0                0
           Casearia.commersoniana Casearia.guianensis Casearia.sylvestris
Null                            0                   0                   0
Preemption                      0                   0                   0
Lognormal                       0                   0                   0
Zipf                            0                   0                   0
Mandelbrot                      0                   0                   0
           Cassipourea.guianensis Cavanillesia.platanifolia Cecropia.insignis
Null                            0                         0                 0
Preemption                      0                         0                 0
Lognormal                       0                         0                 0
Zipf                            0                         0                 0
Mandelbrot                      0                         0                 0
           Cecropia.obtusifolia Cedrela.odorata Ceiba.pentandra Celtis.schippii
Null                          0               0               0               0
Preemption                    0               0               0               0
Lognormal                     0               0               0               0
Zipf                          0               0               0               0
Mandelbrot                    0               0               0               0
           Cespedesia.spathulata Chamguava.schippii Chimarrhis.parviflora
Null                           0                  0                     0
Preemption                     0                  0                     0
Lognormal                      0                  0                     0
Zipf                           0                  0                     0
Mandelbrot                     0                  0                     0
           Maclura.tinctoria Chrysochlamys.eclipes Chrysophyllum.argenteum
Null                       0                     0                       0
Preemption                 0                     0                       0
Lognormal                  0                     0                       0
Zipf                       0                     0                       0
Mandelbrot                 0                     0                       0
           Chrysophyllum.cainito Coccoloba.coronata Coccoloba.manzinellensis
Null                           0                  0                        0
Preemption                     0                  0                        0
Lognormal                      0                  0                        0
Zipf                           0                  0                        0
Mandelbrot                     0                  0                        0
           Colubrina.glandulosa Cordia.alliodora Cordia.bicolor
Null                          0                0              0
Preemption                    0                0              0
Lognormal                     0                0              0
Zipf                          0                0              0
Mandelbrot                    0                0              0
           Cordia.lasiocalyx Coussarea.curvigemma Croton.billbergianus
Null                       0                    0                    0
Preemption                 0                    0                    0
Lognormal                  0                    0                    0
Zipf                       0                    0                    0
Mandelbrot                 0                    0                    0
           Cupania.cinerea Cupania.latifolia Cupania.rufescens
Null                     0                 0                 0
Preemption               0                 0                 0
Lognormal                0                 0                 0
Zipf                     0                 0                 0
Mandelbrot               0                 0                 0
           Cupania.seemannii Dendropanax.arboreus Desmopsis.panamensis
Null                       0                    0                    0
Preemption                 0                    0                    0
Lognormal                  0                    0                    0
Zipf                       0                    0                    0
Mandelbrot                 0                    0                    0
           Diospyros.artanthifolia Dipteryx.oleifera Drypetes.standleyi
Null                             0                 0                  0
Preemption                       0                 0                  0
Lognormal                        0                 0                  0
Zipf                             0                 0                  0
Mandelbrot                       0                 0                  0
           Elaeis.oleifera Enterolobium.schomburgkii Erythrina.costaricensis
Null                     0                         0                       0
Preemption               0                         0                       0
Lognormal                0                         0                       0
Zipf                     0                         0                       0
Mandelbrot               0                         0                       0
           Erythroxylum.macrophyllum Eugenia.florida Eugenia.galalonensis
Null                               0               0                    0
Preemption                         0               0                    0
Lognormal                          0               0                    0
Zipf                               0               0                    0
Mandelbrot                         0               0                    0
           Eugenia.nesiotica Eugenia.oerstediana Faramea.occidentalis
Null                       0                   0                    0
Preemption                 0                   0                    0
Lognormal                  0                   0                    0
Zipf                       0                   0                    0
Mandelbrot                 0                   0                    0
           Ficus.colubrinae Ficus.costaricana Ficus.insipida Ficus.maxima
Null                      0                 0              0            0
Preemption                0                 0              0            0
Lognormal                 0                 0              0            0
Zipf                      0                 0              0            0
Mandelbrot                0                 0              0            0
           Ficus.obtusifolia Ficus.popenoei Ficus.tonduzii Ficus.trigonata
Null                       0              0              0               0
Preemption                 0              0              0               0
Lognormal                  0              0              0               0
Zipf                       0              0              0               0
Mandelbrot                 0              0              0               0
           Ficus.yoponensis Garcinia.intermedia Garcinia.madruno
Null                      0                   0                0
Preemption                0                   0                0
Lognormal                 0                   0                0
Zipf                      0                   0                0
Mandelbrot                0                   0                0
           Genipa.americana Guapira.myrtiflora Guarea.fuzzy Guarea.grandifolia
Null                      0                  0            0                  0
Preemption                0                  0            0                  0
Lognormal                 0                  0            0                  0
Zipf                      0                  0            0                  0
Mandelbrot                0                  0            0                  0
           Guarea.guidonia Guatteria.dumetorum Guazuma.ulmifolia
Null                     0                   0                 0
Preemption               0                   0                 0
Lognormal                0                   0                 0
Zipf                     0                   0                 0
Mandelbrot               0                   0                 0
           Guettarda.foliacea Gustavia.superba Hampea.appendiculata
Null                        0                0                    0
Preemption                  0                0                    0
Lognormal                   0                0                    0
Zipf                        0                0                    0
Mandelbrot                  0                0                    0
           Hasseltia.floribunda Heisteria.acuminata Heisteria.concinna
Null                          0                   0                  0
Preemption                    0                   0                  0
Lognormal                     0                   0                  0
Zipf                          0                   0                  0
Mandelbrot                    0                   0                  0
           Hirtella.americana Hirtella.triandra Hura.crepitans
Null                        0                 0              0
Preemption                  0                 0              0
Lognormal                   0                 0              0
Zipf                        0                 0              0
Mandelbrot                  0                 0              0
           Hieronyma.alchorneoides Inga.acuminata Inga.cocleensis
Null                             0              0               0
Preemption                       0              0               0
Lognormal                        0              0               0
Zipf                             0              0               0
Mandelbrot                       0              0               0
           Inga.goldmanii Inga.laurina Inga.semialata Inga.nobilis
Null                    0            0              0            0
Preemption              0            0              0            0
Lognormal               0            0              0            0
Zipf                    0            0              0            0
Mandelbrot              0            0              0            0
           Inga.oerstediana Inga.pezizifera Inga.punctata Inga.ruiziana
Null                      0               0             0             0
Preemption                0               0             0             0
Lognormal                 0               0             0             0
Zipf                      0               0             0             0
Mandelbrot                0               0             0             0
           Inga.sapindoides Inga.spectabilis Inga.umbellifera Jacaranda.copaia
Null                      0                0                0                0
Preemption                0                0                0                0
Lognormal                 0                0                0                0
Zipf                      0                0                0                0
Mandelbrot                0                0                0                0
           Lacistema.aggregatum Lacmellea.panamensis Laetia.procera
Null                          0                    0              0
Preemption                    0                    0              0
Lognormal                     0                    0              0
Zipf                          0                    0              0
Mandelbrot                    0                    0              0
           Laetia.thamnia Lafoensia.punicifolia Licania.hypoleuca
Null                    0                     0                 0
Preemption              0                     0                 0
Lognormal               0                     0                 0
Zipf                    0                     0                 0
Mandelbrot              0                     0                 0
           Licania.platypus Lindackeria.laurina Lonchocarpus.heptaphyllus
Null                      0                   0                         0
Preemption                0                   0                         0
Lognormal                 0                   0                         0
Zipf                      0                   0                         0
Mandelbrot                0                   0                         0
           Luehea.seemannii Macrocnemum.roseum Maquira.guianensis.costaricana
Null                      0                  0                              0
Preemption                0                  0                              0
Lognormal                 0                  0                              0
Zipf                      0                  0                              0
Mandelbrot                0                  0                              0
           Margaritaria.nobilis Marila.laxiflora Maytenus.schippii
Null                          0                0                 0
Preemption                    0                0                 0
Lognormal                     0                0                 0
Zipf                          0                0                 0
Mandelbrot                    0                0                 0
           Miconia.affinis Miconia.argentea Miconia.elata Miconia.hondurensis
Null                     0                0             0                   0
Preemption               0                0             0                   0
Lognormal                0                0             0                   0
Zipf                     0                0             0                   0
Mandelbrot               0                0             0                   0
           Mosannona.garwoodii Myrcia.gatunensis Myrospermum.frutescens
Null                         0                 0                      0
Preemption                   0                 0                      0
Lognormal                    0                 0                      0
Zipf                         0                 0                      0
Mandelbrot                   0                 0                      0
           Nectandra.cissiflora Nectandra.lineata Nectandra.purpurea
Null                          0                 0                  0
Preemption                    0                 0                  0
Lognormal                     0                 0                  0
Zipf                          0                 0                  0
Mandelbrot                    0                 0                  0
           Ochroma.pyramidale Ocotea.cernua Ocotea.oblonga Ocotea.puberula
Null                        0             0              0               0
Preemption                  0             0              0               0
Lognormal                   0             0              0               0
Zipf                        0             0              0               0
Mandelbrot                  0             0              0               0
           Ocotea.whitei Oenocarpus.mapora Ormosia.amazonica Ormosia.coccinea
Null                   0                 0                 0                0
Preemption             0                 0                 0                0
Lognormal              0                 0                 0                0
Zipf                   0                 0                 0                0
Mandelbrot             0                 0                 0                0
           Ormosia.macrocalyx Pachira.quinata Pachira.sessilis
Null                        0               0                0
Preemption                  0               0                0
Lognormal                   0               0                0
Zipf                        0               0                0
Mandelbrot                  0               0                0
           Perebea.xanthochyma Cinnamomum.triplinerve Picramnia.latifolia
Null                         0                      0                   0
Preemption                   0                      0                   0
Lognormal                    0                      0                   0
Zipf                         0                      0                   0
Mandelbrot                   0                      0                   0
           Piper.reticulatum Platymiscium.pinnatum Platypodium.elegans
Null                       0                     0                   0
Preemption                 0                     0                   0
Lognormal                  0                     0                   0
Zipf                       0                     0                   0
Mandelbrot                 0                     0                   0
           Posoqueria.latifolia Poulsenia.armata Pourouma.bicolor
Null                          0                0                0
Preemption                    0                0                0
Lognormal                     0                0                0
Zipf                          0                0                0
Mandelbrot                    0                0                0
           Pouteria.fossicola Pouteria.reticulata Pouteria.stipitata
Null                        0                   0                  0
Preemption                  0                   0                  0
Lognormal                   0                   0                  0
Zipf                        0                   0                  0
Mandelbrot                  0                   0                  0
           Prioria.copaifera Protium.costaricense Protium.panamense
Null                       0                    0                 0
Preemption                 0                    0                 0
Lognormal                  0                    0                 0
Zipf                       0                    0                 0
Mandelbrot                 0                    0                 0
           Protium.tenuifolium Pseudobombax.septenatum
Null                         0                       0
Preemption                   0                       0
Lognormal                    0                       0
Zipf                         0                       0
Mandelbrot                   0                       0
           Psidium.friedrichsthalianum Psychotria.grandis Pterocarpus.rohrii
Null                                 0                  0                  0
Preemption                           0                  0                  0
Lognormal                            0                  0                  0
Zipf                                 0                  0                  0
Mandelbrot                           0                  0                  0
           Quararibea.asterolepis Quassia.amara Randia.armata Sapium.broadleaf
Null                            0             0             0                0
Preemption                      0             0             0                0
Lognormal                       0             0             0                0
Zipf                            0             0             0                0
Mandelbrot                      0             0             0                0
           Sapium.glandulosum Schizolobium.parahyba Senna.dariensis
Null                        0                     0               0
Preemption                  0                     0               0
Lognormal                   0                     0               0
Zipf                        0                     0               0
Mandelbrot                  0                     0               0
           Simarouba.amara Siparuna.guianensis Siparuna.pauciflora
Null                     0                   0                   0
Preemption               0                   0                   0
Lognormal                0                   0                   0
Zipf                     0                   0                   0
Mandelbrot               0                   0                   0
           Sloanea.terniflora Socratea.exorrhiza Solanum.hayesii
Null                        0                  0               0
Preemption                  0                  0               0
Lognormal                   0                  0               0
Zipf                        0                  0               0
Mandelbrot                  0                  0               0
           Sorocea.affinis Spachea.membranacea Spondias.mombin
Null                     0                   0               0
Preemption               0                   0               0
Lognormal                0                   0               0
Zipf                     0                   0               0
Mandelbrot               0                   0               0
           Spondias.radlkoferi Sterculia.apetala
Null                         0                 0
Preemption                   0                 0
Lognormal                    0                 0
Zipf                         0                 0
Mandelbrot                   0                 0
           Swartzia.simplex.var.grandiflora Swartzia.simplex.continentalis
Null                                      0                              0
Preemption                                0                              0
Lognormal                                 0                              0
Zipf                                      0                              0
Mandelbrot                                0                              0
           Symphonia.globulifera Handroanthus.guayacan Tabebuia.rosea
Null                           0                     0              0
Preemption                     0                     0              0
Lognormal                      0                     0              0
Zipf                           0                     0              0
Mandelbrot                     0                     0              0
           Tabernaemontana.arborea Tachigali.versicolor Talisia.nervosa
Null                             0                    0               0
Preemption                       0                    0               0
Lognormal                        0                    0               0
Zipf                             0                    0               0
Mandelbrot                       0                    0               0
           Talisia.princeps Terminalia.amazonia Terminalia.oblonga
Null                      0                   0                  0
Preemption                0                   0                  0
Lognormal                 0                   0                  0
Zipf                      0                   0                  0
Mandelbrot                0                   0                  0
           Tetragastris.panamensis Tetrathylacium.johansenii Theobroma.cacao
Null                             0                         0               0
Preemption                       0                         0               0
Lognormal                        0                         0               0
Zipf                             0                         0               0
Mandelbrot                       0                         0               0
           Thevetia.ahouai Tocoyena.pittieri Trattinnickia.aspera
Null                     0                 0                    0
Preemption               0                 0                    0
Lognormal                0                 0                    0
Zipf                     0                 0                    0
Mandelbrot               0                 0                    0
           Trema.micrantha Trichanthera.gigantea Trichilia.pallida
Null                     0                     0                 0
Preemption               0                     0                 0
Lognormal                0                     0                 0
Zipf                     0                     0                 0
Mandelbrot               0                     0                 0
           Trichilia.tuberculata Trichospermum.galeottii Triplaris.cumingiana
Null                           0                       0                    0
Preemption                     0                       0                    0
Lognormal                      0                       0                    0
Zipf                           0                       0                    0
Mandelbrot                     0                       0                    0
           Trophis.caucana Trophis.racemosa Turpinia.occidentalis
Null                     0                0                     0
Preemption               0                0                     0
Lognormal                0                0                     0
Zipf                     0                0                     0
Mandelbrot               0                0                     0
           Unonopsis.pittieri Virola.multiflora Virola.sebifera
Null                        0                 0               0
Preemption                  0                 0               0
Lognormal                   0                 0               0
Zipf                        0                 0               0
Mandelbrot                  0                 0               0
           Virola.surinamensis Vismia.baccifera Vochysia.ferruginea
Null                         0                0                   0
Preemption                   0                0                   0
Lognormal                    0                0                   0
Zipf                         0                0                   0
Mandelbrot                   0                0                   0
           Xylopia.macrantha Zanthoxylum.ekmanii Zanthoxylum.juniperinum
Null                       0                   0                       0
Preemption                 0                   0                       0
Lognormal                  0                   0                       0
Zipf                       0                   0                       0
Mandelbrot                 0                   0                       0
           Zanthoxylum.panamense Zanthoxylum.setulosum Zuelania.guidonia
Null                           0                     0                 0
Preemption                     0                     0                 0
Lognormal                      0                     0                 0
Zipf                           0                     0                 0
Mandelbrot                     0                     0                 0

$fisherfit

Fisher log series model
No. of species: 225 
Fisher alpha:   35.0547 


$prestonfit

Preston lognormal model
Method: Quasi-Poisson fit to octaves 
No. of species: 225 

    mode    width       S0 
 4.88580  2.93269 32.02292 

Frequencies by Octave
               0       1       2      3      4       5       6       7       8
Observed 9.50000 16.0000 18.0000 19.000 30.000 35.0000 31.0000 26.5000 18.0000
Fitted   7.99415 13.3118 19.7334 26.042 30.595 31.9987 29.7932 24.6949 18.2223
               9      10     11
Observed 13.0000 7.00000 2.0000
Fitted   11.9702 7.00012 3.6443


> 
> 
> 
> cleanEx()
> nameEx("rankabundance")
> ### * rankabundance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rankabundance
> ### Title: Rank Abundance Curves
> ### Aliases: rankabundance rankabunplot rankabuncomp
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> data(dune)
> RankAbun.1 <- rankabundance(dune)
> RankAbun.1
         rank abundance proportion plower pupper accumfreq logabun rankfreq
Poatriv     1        63        9.2    6.0   12.4       9.2     1.8      3.3
Lolipere    2        58        8.5    4.9   12.0      17.7     1.8      6.7
Scorautu    3        54        7.9    5.7   10.0      25.5     1.7     10.0
Bracruta    4        49        7.2    4.6    9.7      32.7     1.7     13.3
Agrostol    5        48        7.0    3.3   10.7      39.7     1.7     16.7
Poaprat     6        48        7.0    4.8    9.2      46.7     1.7     20.0
Trifrepe    7        47        6.9    4.5    9.2      53.6     1.7     23.3
Alopgeni    8        36        5.3    1.8    8.7      58.8     1.6     26.7
Elymrepe    9        26        3.8    1.1    6.5      62.6     1.4     30.0
Planlanc   10        26        3.8    1.2    6.4      66.4     1.4     33.3
Eleopalu   11        25        3.6    0.3    7.0      70.1     1.4     36.7
Anthodor   12        21        3.1    0.8    5.4      73.1     1.3     40.0
Sagiproc   13        20        2.9    0.9    5.0      76.1     1.3     43.3
Juncarti   14        18        2.6    0.4    4.9      78.7     1.3     46.7
Rumeacet   15        18        2.6    0.3    4.9      81.3     1.3     50.0
Achimill   16        16        2.3    0.7    4.0      83.6     1.2     53.3
Bromhord   17        15        2.2    0.4    4.0      85.8     1.2     56.7
Ranuflam   18        14        2.0    0.4    3.7      87.9     1.1     60.0
Bellpere   19        13        1.9    0.6    3.2      89.8     1.1     63.3
Juncbufo   20        13        1.9    0.0    3.8      91.7     1.1     66.7
Salirepe   21        11        1.6   -0.3    3.6      93.3     1.0     70.0
Callcusp   22        10        1.5   -0.3    3.2      94.7     1.0     73.3
Hyporadi   23         9        1.3   -0.4    3.1      96.1     1.0     76.7
Trifprat   24         9        1.3   -0.3    2.9      97.4     1.0     80.0
Airaprae   25         5        0.7   -0.4    1.8      98.1     0.7     83.3
Comapalu   26         4        0.6   -0.3    1.5      98.7     0.6     86.7
Vicilath   27         4        0.6   -0.1    1.3      99.3     0.6     90.0
Empenigr   28         2        0.3   -0.3    0.9      99.6     0.3     93.3
Cirsarve   29         2        0.3   -0.3    0.9      99.9     0.3     96.7
Chenalbu   30         1        0.1   -0.2    0.5     100.0     0.0    100.0
> rankabunplot(RankAbun.1, scale='abundance', addit=FALSE, specnames=c(1,2,3))
> rankabunplot(RankAbun.1, scale='logabun', addit=FALSE, specnames=c(1:30), 
+     srt=45, ylim=c(1,100))
> rankabuncomp(dune, y=dune.env, factor='Management', 
+     scale='proportion', legend=FALSE)
> ## CLICK IN THE GRAPH TO INDICATE WHERE THE LEGEND NEEDS TO BE PLACED
> ## IF YOU OPT FOR LEGEND=TRUE.
> 
> 
> 
> cleanEx()
> nameEx("removeNAcomm")
> ### * removeNAcomm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeNAcomm
> ### Title: Synchronize Community and Environmental Datasets
> ### Aliases: removeNAcomm removeNAenv same.sites check.datasets
> ###   check.ordiscores replaceNAcomm removezerospecies subsetcomm
> ###   import.with.readxl
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> data(dune)
> dune.env2 <- dune.env
> dune.env2[1:4,"Moisture"] <- NA
> dune2 <- removeNAcomm(dune,dune.env2,"Moisture")
> dune.env2 <- removeNAenv(dune.env2,"Moisture")
> dune3 <- same.sites(dune,dune.env2)
> check.datasets(dune,dune.env2)
Warning: community and environmental datasets have different numbers of rows
> check.datasets(dune2,dune.env2)
OK
> check.datasets(dune3,dune.env2)
OK
> dune4 <- subsetcomm(dune,dune.env,"Management","NM",returncomm=TRUE)
> dune.env4 <- subsetcomm(dune,dune.env,"Management","NM",returncomm=FALSE)
> dune5 <- same.sites(dune,dune.env4)
> check.datasets(dune4,dune5)
OK
> 
> 
> 
> cleanEx()
> nameEx("renyiresult")
> ### * renyiresult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: renyiresult
> ### Title: Alternative Renyi Diversity Results
> ### Aliases: renyiresult renyiplot renyiaccumresult renyicomp
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> data(dune.env)
> data(dune)
> Renyi.1 <- renyiresult(dune, y=dune.env, factor='Management', level='NM', 
+     method='s')
> Renyi.1
           0      0.25       0.5         1         2         4         8
14 1.9459101 1.9247601 1.9039105 1.8636800 1.7917595 1.6856082 1.5684642
15 2.0794415 2.0523285 2.0265690 1.9793088 1.9015406 1.7991899 1.7007370
17 1.9459101 1.9286342 1.9112833 1.8762736 1.8051825 1.6707060 1.5078127
18 2.1972246 2.1666649 2.1367753 2.0793872 1.9765532 1.8270810 1.6876698
19 2.1972246 2.1815228 2.1657137 2.1340240 2.0721839 1.9662631 1.8407296
20 2.0794415 2.0709290 2.0629122 2.0482704 2.0237873 1.9882939 1.9439137
         Inf
14 1.3862944
15 1.5260563
17 1.3217558
18 1.5040774
19 1.6422277
20 1.8245493
> renyiplot(Renyi.1, evenness=FALSE, addit=FALSE, pch=1,col='1', cex=1, 
+     legend=FALSE)
> ## CLICK IN THE GRAPH TO INDICATE WHERE THE LEGEND NEEDS TO BE PLACED
> ## IN CASE THAT YOU OPT FOR LEGEND=TRUE
> 
> 
> 
> cleanEx()
> nameEx("residualssurface")
> ### * residualssurface
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residualssurface
> ### Title: Show and Interpolate Two Dimensional Distribution of Residuals
> ### Aliases: residualssurface
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(vegan)
> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.
> library(akima)
> data(faramea)
> Count.model1 <- lm(Faramea.occidentalis ~ Precipitation,
+     data=faramea, na.action=na.exclude)
> surface.1 <- residualssurface(Count.model1, na.omit(faramea),
+     'UTM.EW', 'UTM.NS', gam=TRUE, plotit=TRUE, bubble=TRUE)
> 
> 
> 
> cleanEx()

detaching ‘package:akima’, ‘package:mgcv’, ‘package:nlme’

> nameEx("spatialsample")
> ### * spatialsample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spatialsample
> ### Title: Spatial Sampling within a Polygon
> ### Aliases: spatialsample
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> library(splancs)
Loading required package: sp

Spatial Point Pattern Analysis Code in S-Plus
 
 Version 2 - Spatial and Space-Time analysis

> area <- array(c(10,10,15,35,40,35,5,35,35,30,30,10), dim=c(6,2))
> landuse1 <- array(c(10,10,15,15,30,35,35,30), dim=c(4,2))
> landuse2 <- array(c(10,10,15,15,35,30,10,30,30,35,30,15), dim=c(6,2))
> landuse3 <- array(c(10,10,30,35,40,35,5,10,15,30,30,10), dim=c(6,2))
> plot(area[,1], area[,2], type="n", xlab="horizontal position", 
+     ylab="vertical position", lwd=2, bty="l")
> polygon(landuse1)
> polygon(landuse2)
> polygon(landuse3)
> spatialsample(area, method="random", n=20, xwidth=1, ywidth=1, plotit=TRUE, 
+     plothull=FALSE)
           [,1]       [,2]
 [1,] 17.965260 16.1637170
 [2,] 16.050458 31.9516905
 [3,] 16.179237 10.2967026
 [4,] 30.610685 16.5231115
 [5,] 33.095243 19.9309773
 [6,] 21.401055 28.3233566
 [7,] 18.016620 16.5834228
 [8,] 24.462403 22.9869748
 [9,] 24.806239 10.5865280
[10,] 34.821200 25.0540021
[11,] 31.711328 17.3382329
[12,] 34.628389 24.4118058
[13,] 33.487983 21.5910893
[14,] 25.891587 28.6806870
[15,] 10.699936 19.3169020
[16,] 31.969412 25.7819467
[17,] 24.328589 30.8362843
[18,] 23.142913 12.3439183
[19,] 12.120371  7.9839848
[20,] 19.488151 20.5590279
> spatialsample(area, method="grid", xwidth=1, ywidth=1, plotit=TRUE, xleft=12, 
+     ylower=7, xdist=4, ydist=4)
      [,1] [,2]
 [1,]   12    7
 [2,]   12   11
 [3,]   12   15
 [4,]   12   19
 [5,]   12   23
 [6,]   12   27
 [7,]   12   31
 [8,]   16    7
 [9,]   16   11
[10,]   16   15
[11,]   16   19
[12,]   16   23
[13,]   16   27
[14,]   16   31
[15,]   20   11
[16,]   20   15
[17,]   20   19
[18,]   20   23
[19,]   20   27
[20,]   20   31
[21,]   24   11
[22,]   24   15
[23,]   24   19
[24,]   24   23
[25,]   24   27
[26,]   24   31
[27,]   28   11
[28,]   28   15
[29,]   28   19
[30,]   28   23
[31,]   28   27
[32,]   28   31
[33,]   32   11
[34,]   32   15
[35,]   32   19
[36,]   32   23
[37,]   32   27
[38,]   36   19
[39,]   36   23
[40,]   36   27
> spatialsample(area, method="random grid", n=20, xwidth=1, ywidth=1, 
+     plotit=TRUE, xleft=12, ylower=7, xdist=4, ydist=4)
      [,1] [,2]
 [1,]   36   23
 [2,]   12   27
 [3,]   24   23
 [4,]   28   31
 [5,]   16   31
 [6,]   12   11
 [7,]   20   23
 [8,]   24   15
 [9,]   32   23
[10,]   36   27
[11,]   12    7
[12,]   20   27
[13,]   28   19
[14,]   16    7
[15,]   28   27
[16,]   24   19
[17,]   16   23
[18,]   24   31
[19,]   28   11
[20,]   12   31
> 
> 
> 
> cleanEx()

detaching ‘package:splancs’, ‘package:sp’

> nameEx("transfgradient")
> ### * transfgradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transfgradient
> ### Title: Gradient for Hypothetical Example of Turover of Species
> ###   Composition
> ### Aliases: transfgradient
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(transfspecies)
> data(transfgradient)
> plot(transfspecies[,1]~transfgradient[,1],xlab="gradient",
+     ylab="species abundance",type="n",ylim=c(0.5,8.5))
> for (i in 1:9) {points(transfgradient[,1],transfspecies[,i],type="o",pch=i)}
> 
> 
> 
> cleanEx()
> nameEx("transfspecies")
> ### * transfspecies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transfspecies
> ### Title: Hypothetical Example of Turover of Species Composition
> ### Aliases: transfspecies
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(transfspecies)
> data(transfgradient)
> plot(transfspecies[,1]~transfgradient[,1],xlab="gradient",
+     ylab="species abundance",type="n",ylim=c(0.5,8.5))
> for (i in 1:9) {points(transfgradient[,1],transfspecies[,i],type="o",pch=i)}
> 
> 
> 
> cleanEx()
> nameEx("warcom")
> ### * warcom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warcom
> ### Title: Warburgia ugandensis AFLP Scores
> ### Aliases: warcom
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(warcom)
> 
> 
> 
> cleanEx()
> nameEx("warenv")
> ### * warenv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warenv
> ### Title: Warburgia ugandensis Population Structure
> ### Aliases: warenv
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(warenv)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.701 1.388 7.208 0.012 0.032 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
