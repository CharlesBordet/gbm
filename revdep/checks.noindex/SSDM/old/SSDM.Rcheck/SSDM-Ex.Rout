
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SSDM"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SSDM')
Welcome to the SSDM package, you can launch the graphical user interface by typing gui() in the console.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ensemble")
> ### * ensemble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble
> ### Title: Methods to assemble multiple algorithms in an ensemble SDM
> ### Aliases: ensemble ensemble,Algorithm.SDM-method
> ###   sum,Algorithm.SDM-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D Occurrences <- subset(Occurrences, Occurrences$SPECIES == 'elliptica')
> ##D 
> ##D # ensemble SDM building
> ##D CTA <- modelling('CTA', Occurrences, Env, Xcol = 'LONGITUDE', Ycol = 'LATITUDE')
> ##D SVM <- modelling('SVM', Occurrences, Env, Xcol = 'LONGITUDE', Ycol = 'LATITUDE')
> ##D ESDM <- ensemble(CTA, SVM, ensemble.thresh = c(0.6))
> ##D 
> ##D # Results plotting
> ##D plot(ESDM)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ensemble_modelling")
> ### * ensemble_modelling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensemble_modelling
> ### Title: Build an ensemble SDM that assembles multiple algorithms
> ### Aliases: ensemble_modelling
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D Occurrences <- subset(Occurrences, Occurrences$SPECIES == 'elliptica')
> ##D 
> ##D # ensemble SDM building
> ##D ESDM <- ensemble_modelling(c('CTA', 'MARS'), Occurrences, Env, rep = 1,
> ##D                           Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                           ensemble.thresh = c(0.6))
> ##D 
> ##D # Results plotting
> ##D plot(ESDM)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("evaluate")
> ### * evaluate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate
> ### Title: Evaluate
> ### Aliases: evaluate evaluate,Algorithm.SDM-method
> ###   evaluate,MAXENT.SDM-method evaluate,Stacked.SDM-method
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D # SSDM building
> ##D SSDM <- stack_modelling(c('CTA', 'SVM'), Occurrences, Env, rep = 1,
> ##D                        Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                        Spcol = 'SPECIES')
> ##D 
> ##D # Evaluation
> ##D evaluate(SSDM)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("gui")
> ### * gui
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gui
> ### Title: SSDM package Graphic User Interface
> ### Aliases: gui
> 
> ### ** Examples
> 
> ## Not run: 
> ##D gui()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("load_occ")
> ### * load_occ
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_occ
> ### Title: Load occurrence data
> ### Aliases: load_occ
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D load_occ(path = system.file('extdata',  package = 'SSDM'), Env,
> ##D          Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D          file = 'Occurrences.csv', sep = ',')
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("load_var")
> ### * load_var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_var
> ### Title: Load environmental variables
> ### Aliases: load_var
> 
> ### ** Examples
> 
> ## Not run: 
> ##D load_var(system.file('extdata',  package = 'SSDM'))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mapDiversity")
> ### * mapDiversity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mapDiversity
> ### Title: Map Diversity
> ### Aliases: mapDiversity mapDiversity,Stacked.SDM-method
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D # SSDM building
> ##D SSDM <- stack_modelling(c('CTA', 'SVM'), Occurrences, Env, rep = 1,
> ##D                        Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                        Spcol = 'SPECIES')
> ##D 
> ##D # Diversity mapping
> ##D mapDiversity(SSDM, mathod = 'pSSDM')
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("modelling")
> ### * modelling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modelling
> ### Title: Build an SDM using a single algorithm
> ### Aliases: modelling
> 
> ### ** Examples
> 
> # Loading data
> data(Env)
> data(Occurrences)
> Occurrences <- subset(Occurrences, Occurrences$SPECIES == 'elliptica')
> 
> # SDM building
> SDM <- modelling('GLM', Occurrences, Env, Xcol = 'LONGITUDE', Ycol = 'LATITUDE')
Data check ... 
No presence column, presence-only data set is supposed.
Pseudo-absence selection will be computed.
   done. 

Pseudo absence selection... 
   random selection 
   done. 

Model evaluation...
   done. 

Model projection...
   done. 

Model axes contribution evaluation...
   done. 

> 
> # Results plotting
> ## Not run: 
> ##D plot(SDM)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("stack_modelling")
> ### * stack_modelling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stack_modelling
> ### Title: Build an SSDM that assembles multiple algorithms and species.
> ### Aliases: stack_modelling
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D 
> ##D # SSDM building
> ##D SSDM <- stack_modelling(c('CTA', 'SVM'), Occurrences, Env, rep = 1,
> ##D                        Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                        Spcol = 'SPECIES')
> ##D 
> ##D # Results plotting
> ##D plot(SSDM)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("stacking")
> ### * stacking
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stacking
> ### Title: Stack different ensemble SDMs in an SSDM
> ### Aliases: stacking stacking,Ensemble.SDM-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Loading data
> ##D data(Env)
> ##D data(Occurrences)
> ##D Occ1 <- subset(Occurrences, Occurrences$SPECIES == 'elliptica')
> ##D Occ2 <- subset(Occurrences, Occurrences$SPECIES == 'gracilis')
> ##D 
> ##D # SSDM building
> ##D ESDM1 <- ensemble_modelling(c('CTA', 'SVM'), Occ1, Env, rep = 1,
> ##D                            Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                            name = 'elliptica', ensemble.thresh = c(0.6))
> ##D ESDM2 <- ensemble_modelling(c('CTA', 'SVM'), Occ2, Env, rep = 1,
> ##D                            Xcol = 'LONGITUDE', Ycol = 'LATITUDE',
> ##D                            name = 'gracilis', ensemble.thresh = c(0.6))
> ##D SSDM <- stacking(ESDM1, ESDM2)
> ##D 
> ##D # Results plotting
> ##D plot(SSDM)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("update-Stacked.SDM-method")
> ### * update-Stacked.SDM-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update,Stacked.SDM-method
> ### Title: Update a previous SSDM
> ### Aliases: update,Stacked.SDM-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D update(stack, Occurrences, Env, Spname = 'NewSpecie')
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.99 0.459 5.672 0.002 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
