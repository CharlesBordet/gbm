
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EnsembleBase"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('EnsembleBase')
Loading required package: kknn
EnsembleBase 1.0.2
School of Public Health, Imperial College London &
Scientific Computing Group, Sentrana Inc.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ALL.Regression.FitObj-class")
> ### * ALL.Regression.FitObj-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ALL.Regression.FitObj-class
> ### Title: Classes '"KNN.Regression.FitObj"', '"NNET.Regression.FitObj"',
> ###   '"RF.Regression.FitObj"', '"SVM.Regression.FitObj"',
> ###   '"GBM.Regression.FitObj"', '"PENREG.Regression.FitObj"',
> ###   '"BART.Regression.FitObj"'
> ### Aliases: KNN.Regression.FitObj-class NNET.Regression.FitObj-class
> ###   RF.Regression.FitObj-class SVM.Regression.FitObj-class
> ###   GBM.Regression.FitObj-class PENREG.Regression.FitObj-class
> ###   BART.Regression.FitObj-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("KNN.Regression.FitObj")
Class "KNN.Regression.FitObj" [package "EnsembleBase"]

Slots:
                                                               
Name:             formula               data                est
Class:            formula         data.frame   RegressionEstObj
                                            
Name:                pred             config
Class:    OptionalNumeric BaseLearner.Config

Extends: 
Class "Regression.FitObj", directly
Class "BaseLearner.FitObj", by class "Regression.FitObj", distance 2
> 
> 
> 
> cleanEx()
> nameEx("BaseLearner.Batch.FitObj-class")
> ### * BaseLearner.Batch.FitObj-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BaseLearner.Batch.FitObj-class
> ### Title: Classes '"BaseLearner.Batch.FitObj"' and
> ###   '"Regression.Batch.FitObj"'
> ### Aliases: BaseLearner.Batch.FitObj-class Regression.Batch.FitObj-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BaseLearner.Batch.FitObj")
Virtual Class "BaseLearner.Batch.FitObj" [package "EnsembleBase"]

Slots:
                                                                              
Name:        fitobj.list       config.list        filemethod          tmpfiles
Class:              list              list           logical OptionalCharacter

Known Subclasses: "Regression.Batch.FitObj"
> 
> 
> 
> cleanEx()
> nameEx("BaseLearner.Config-class")
> ### * BaseLearner.Config-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BaseLearner.Config-class
> ### Title: Classes '"BaseLearner.Config"', '"Regression.Config"'
> ### Aliases: BaseLearner.Config-class Regression.Config-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("BaseLearner.Config")
Virtual Class "BaseLearner.Config" [package "EnsembleBase"]

No Slots, prototype of class "S4"

Known Subclasses: 
Class "Regression.Config", directly
Class "BART.Regression.Config", by class "Regression.Config", distance 2
Class "GBM.Regression.Config", by class "Regression.Config", distance 2
Class "KNN.Regression.Config", by class "Regression.Config", distance 2
Class "NNET.Regression.Config", by class "Regression.Config", distance 2
Class "PENREG.Regression.Config", by class "Regression.Config", distance 2
Class "RF.Regression.Config", by class "Regression.Config", distance 2
Class "SVM.Regression.Config", by class "Regression.Config", distance 2
> 
> 
> 
> cleanEx()
> nameEx("Instance-class")
> ### * Instance-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Instance-class
> ### Title: Classes '"Instance"' and '"Instance.List"'
> ### Aliases: Instance-class Instance.List-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("Instance")
Class "Instance" [package "EnsembleBase"]

Slots:
                                            
Name:              config             partid
Class: BaseLearner.Config          character
> 
> 
> 
> cleanEx()
> nameEx("Regression.Batch.Fit")
> ### * Regression.Batch.Fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Regression.Batch.Fit
> ### Title: Batch Training, Prediction and Diagnostics of Regression Base
> ###   Learners
> ### Aliases: Regression.Batch.Fit predict.Regression.Batch.FitObj
> ###   plot.Regression.Batch.FitObj
> 
> ### ** Examples
> 
> data(servo)
> myformula <- class~motor+screw+pgain+vgain
> myconfigs <- make.configs("knn")
> perc.train <- 0.7
> index.train <- sample(1:nrow(servo), size = round(perc.train*nrow(servo)))
> data.train <- servo[index.train,]
> data.predict <- servo[-index.train,]
> ret <- Regression.Batch.Fit(myconfigs, myformula, data.train, ncores=2)
processing job 1 of 16 ( KNN )
processing job 2 of 16 ( KNN )
finished job 1 of 16 ( KNN )
finished job 2 of 16 ( KNN )
processing job 3 of 16 ( KNN )
processing job 4 of 16 ( KNN )
finished job 3finished job  of4  of16  16(  (KNN KNN  )
)
processing job 5 of 16 ( KNN )
processing job 6 of 16 ( KNN )
finished job 5 of 16 ( KNN )
finished job 6 of 16 ( KNN )
processing job 7 of 16 ( KNN )
processing job 8 of 16 ( KNN )
finished job 8 of 16 ( KNN )
finished job 7 of 16 ( KNN )
processing job 9 of 16 ( KNN )
processing job 10 of 16 ( KNN )
finished job 9 of 16 ( KNN )
finished job 10 of 16 ( KNN )
processing job 11 of 16 ( KNN )
processing job 12 of 16 ( KNN )
finished job 11 of 16 ( KNN )
finished job 12 of 16 ( KNN )
processing job 13 of 16 ( KNN )
processing job 14 of 16 ( KNN )
finished job 13 of 16 ( KNN )
finished job 14 of 16 ( KNN )
processing job 15 of 16 ( KNN )
processing job 16 of 16 ( KNN )
finished job 15 of 16 ( KNN )
finished job 16 of 16 ( KNN )
binding predictions from all base learners...finished
> newpred <- predict(ret, data.predict)
> 
> 
> 
> cleanEx()
> nameEx("Regression.CV.Batch.Fit")
> ### * Regression.CV.Batch.Fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Regression.CV.Batch.Fit
> ### Title: CV Batch Training and Diagnostics of Regression Base Learners
> ### Aliases: Regression.CV.Batch.Fit predict.Regression.CV.Batch.FitObj
> ###   plot.Regression.CV.Batch.FitObj
> 
> ### ** Examples
> 
> data(servo)
> myformula <- class~motor+screw+pgain+vgain
> 
> perc.train <- 0.7
> index.train <- sample(1:nrow(servo)
+   , size = round(perc.train*nrow(servo)))
> data.train <- servo[index.train,]
> data.predict <- servo[-index.train,]
> 
> parts <- generate.partitions(1, nrow(data.train))
> myconfigs <- make.configs("knn"
+   , config.df = expand.grid(kernel = "rectangular", k = c(5, 10)))
> instances <- make.instances(myconfigs, parts)
> 
> ret <- Regression.CV.Batch.Fit(instances, myformula, data.train)
processing job 1 of 2 ( KNN )
finished job 1 of 2 ( KNN )
processing job 2 of 2 ( KNN )
finished job 2 of 2 ( KNN )
> newpred <- predict(ret, data.predict)
> 
> 
> 
> cleanEx()
> nameEx("Regression.CV.Fit")
> ### * Regression.CV.Fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Regression.CV.Fit
> ### Title: Cross-Validated Training and Prediction of Regression Base
> ###   Learners
> ### Aliases: Regression.CV.Fit predict.Regression.CV.FitObj
> 
> ### ** Examples
> 
> data(servo)
> myformula <- class~motor+screw+pgain+vgain
> myconfig <- make.configs("knn", config.df=data.frame(kernel="rectangular", k=10))
> perc.train <- 0.7
> index.train <- sample(1:nrow(servo), size = round(perc.train*nrow(servo)))
> data.train <- servo[index.train,]
> data.predict <- servo[-index.train,]
> mypartition <- generate.partition(nrow(data.train),nfold=3)
> ret <- Regression.CV.Fit(myconfig[[1]], myformula, data.train, mypartition)
processing fold 1 of 3 
processing fold 2 of 3 
processing fold 3 of 3 
> newpred <- predict(ret, data.predict)
> 
> 
> 
> cleanEx()
> nameEx("servo")
> ### * servo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: servo
> ### Title: Servo Data Set
> ### Aliases: servo
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(servo)
> lm(class~motor+screw+pgain+vgain, servo)

Call:
lm(formula = class ~ motor + screw + pgain + vgain, data = servo)

Coefficients:
(Intercept)       motorB       motorC       motorD       motorE       screwB  
    7.95609     -0.07917     -0.26657     -1.43030     -0.68643     -0.72072  
     screwC       screwD       screwE        pgain        vgain  
   -1.08250     -1.20546     -1.16569     -1.64353      0.56700  

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.859 0.342 2.666 0.341 0.414 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
