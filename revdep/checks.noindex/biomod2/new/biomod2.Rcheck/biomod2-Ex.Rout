
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "biomod2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('biomod2')
biomod2 3.4.6 loaded.

Type browseVignettes(package='biomod2') to access directly biomod2 vignettes.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BIOMOD.EnsembleModeling.out-objects")
> ### * BIOMOD.EnsembleModeling.out-objects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.EnsembleModeling.out-class
> ### Title: BIOMOD_EnsembleModeling() outputs objects class
> ### Aliases: BIOMOD.EnsembleModeling.out-class BIOMOD.EnsembleModeling.out
> ###   show,BIOMOD.EnsembleModeling.out-method
> ### Keywords: ensemble models
> 
> ### ** Examples
> 
> showClass("BIOMOD.EnsembleModeling.out")
Class "BIOMOD.EnsembleModeling.out" [package "biomod2"]

Slots:
                                                                  
Name:                        sp.name                expl.var.names
Class:                     character                     character
                                                                  
Name:                 models.out.obj                   eval.metric
Class:      BIOMOD.stored.models.out                     character
                                                                  
Name:  eval.metric.quality.threshold                   em.computed
Class:                       numeric                     character
                                                                  
Name:                          em.by                     em.models
Class:                     character                           ANY
                                                                  
Name:                    modeling.id                          link
Class:                     character                     character
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD.Model.Options-objects")
> ### * BIOMOD.Model.Options-objects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.Model.Options-class
> ### Title: BIOMOD_ModelingOptions outputs objects class
> ### Aliases: BIOMOD.Model.Options-class show,BIOMOD.Model.Options-method
> ### Keywords: models options
> 
> ### ** Examples
> 
> showClass("BIOMOD.Model.Options")
Class "BIOMOD.Model.Options" [package "biomod2"]

Slots:
                                                                              
Name:                GLM               GBM               GAM               CTA
Class:              list              list              list              list
                                                                              
Name:                ANN               SRE               FDA              MARS
Class:              list              list              list              list
                                                            
Name:                 RF   MAXENT.Phillips MAXENT.Phillips.2
Class:              list              list              list
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD.formated.data-class")
> ### * BIOMOD.formated.data-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.formated.data-class
> ### Title: BIOMOD_FormatingData() outputs objects class
> ### Aliases: BIOMOD.formated.data-class BIOMOD.formated.data
> ###   BIOMOD.formated.data.PA-class BIOMOD.formated.data.PA
> ###   BIOMOD.formated.data,data.frame,ANY-method
> ###   BIOMOD.formated.data,numeric,RasterStack-method
> ###   BIOMOD.formated.data,numeric,data.frame-method
> ###   BIOMOD.formated.data,numeric,matrix-method
> ###   show,BIOMOD.formated.data-method
> ###   plot,BIOMOD.formated.data,missing-method
> ###   show,BIOMOD.formated.data.PA-method
> ###   plot,BIOMOD.formated.data.PA,missing-method
> ### Keywords: models data formating
> 
> ### ** Examples
> 
> showClass("BIOMOD.formated.data")
Class "BIOMOD.formated.data" [package "biomod2"]

Slots:
                                                                              
Name:            sp.name             coord      data.species      data.env.var
Class:         character        data.frame           numeric        data.frame
                                                                              
Name:          data.mask     has.data.eval        eval.coord eval.data.species
Class:       RasterStack           logical        data.frame           numeric
                        
Name:  eval.data.env.var
Class:        data.frame

Known Subclasses: "BIOMOD.formated.data.PA"
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD.models.out-class")
> ### * BIOMOD.models.out-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.models.out-class
> ### Title: BIOMOD_modelling() outputs objects class
> ### Aliases: BIOMOD.models.out-class show,BIOMOD.models.out-method
> ### Keywords: models option
> 
> ### ** Examples
> 
> showClass("BIOMOD.models.out")
Class "BIOMOD.models.out" [package "biomod2"]

Slots:
                                                                
Name:                   modeling.id                      sp.name
Class:                    character                    character
                                                                
Name:                expl.var.names              models.computed
Class:                    character                    character
                                                                
Name:                 models.failed          has.evaluation.data
Class:                    character                      logical
                                                                
Name:             rescal.all.models            models.evaluation
Class:                      logical          BIOMOD.stored.array
                                                                
Name:         variables.importances            models.prediction
Class:          BIOMOD.stored.array          BIOMOD.stored.array
                                                                
Name:        models.prediction.eval          formated.input.data
Class:          BIOMOD.stored.array  BIOMOD.stored.formated.data
                                                                
Name:                   calib.lines               models.options
Class:          BIOMOD.stored.array BIOMOD.stored.models.options
                                   
Name:                          link
Class:                    character
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD.projection.out-class")
> ### * BIOMOD.projection.out-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.projection.out-class
> ### Title: BIOMOD_Projection() outputs objects class
> ### Aliases: BIOMOD.projection.out-class BIOMOD.projection.out
> ###   show,BIOMOD.projection.out-method
> ###   plot,BIOMOD.projection.out,missing-method
> ### Keywords: models projection ensemble forecast
> 
> ### ** Examples
> 
> showClass("BIOMOD.projection.out")
Class "BIOMOD.projection.out" [package "biomod2"]

Slots:
                                                               
Name:          proj.names            sp.name     expl.var.names
Class:          character          character          character
                                                               
Name:    models.projected      scaled.models    modeling.object
Class:          character            logical BIOMOD.stored.data
                                                               
Name:  modeling.object.id               type               proj
Class:          character          character BIOMOD.stored.data
                         
Name:            xy.coord
Class:             matrix
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD.stored.objects-class")
> ### * BIOMOD.stored.objects-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD.stored.objects-class
> ### Title: BIOMOD.stored.xxx objects class
> ### Aliases: BIOMOD.stored.data BIOMOD.stored.data-class
> ###   BIOMOD.stored.files BIOMOD.stored.files-class
> ###   BIOMOD.stored.data.frame BIOMOD.stored.data.frame-class
> ###   BIOMOD.stored.array BIOMOD.stored.array-class
> ###   BIOMOD.stored.formated.data BIOMOD.stored.formated.data-class
> ###   BIOMOD.stored.models.options BIOMOD.stored.models.options-class
> ###   BIOMOD.stored.models.out BIOMOD.stored.models.out-class
> ###   BIOMOD.stored.raster.stack BIOMOD.stored.raster.stack-class
> ### Keywords: models ensemble object storing
> 
> ### ** Examples
> 
> showClass("BIOMOD.stored.files")
Class "BIOMOD.stored.files" [package "biomod2"]

Slots:
                                    
Name:        val  inMemory      link
Class: character   logical character

Extends: "BIOMOD.stored.data"
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_EnsembleForecasting")
> ### * BIOMOD_EnsembleForecasting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_EnsembleForecasting
> ### Title: Ensemble projections of species over space and time
> ### Aliases: BIOMOD_EnsembleForecasting
> ### Keywords: models
> 
> ### ** Examples
> 
> # 0. Load data & Selecting Data
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species 
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd", 
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio7.grd", 
+                              package="biomod2"),  
+                 system.file( "external/bioclim/current/bio11.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio12.grd", 
+                              package="biomod2"))
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                                                      
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Running the models 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
+                                        models = c('RF'), 
+                                        models.options = myBiomodOption, 
+                                        NbRunEval=2, 
+                                        DataSplit=60, 
+                                        Yweights=NULL, 
+                                        VarImport=0, 
+                                        models.eval.meth = c('TSS'),
+                                        SaveObj = TRUE,
+                                        rescal.all.models = FALSE,
+                                        do.full.models = FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 2
Models selected : RF 

Total number of model runs : 2 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...

-=-=-=--=-=-=- GuloGulo_AllData_RUN2 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                        
> # 4. Creating the ensemble models 
> myBiomodEM <- BIOMOD_EnsembleModeling( 
+                  modeling.output = myBiomodModelOut,
+                  chosen.models = grep('_RF', get_built_models(myBiomodModelOut), 
+                                   value=TRUE),
+                  em.by = 'algo',
+                  eval.metric = c('TSS'),
+                  eval.metric.quality.threshold = c(0.7),
+                  prob.mean = TRUE,
+                  prob.cv = FALSE,
+                  prob.ci = FALSE,
+                  prob.ci.alpha = 0.05,
+                  prob.median = FALSE,
+                  committee.averaging = FALSE,
+                  prob.mean.weight = FALSE,
+                  prob.mean.weight.decay = 'proportional' )

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Build Ensemble Models -=-=-=-=-=-=-=-=-=-=-=-=-=-=

   > Evaluation & Weighting methods summary :
      TSS over 0.7


  > RF_mergedRun_mergedData ensemble modeling
   ! Models projections for whole zonation required...
	> Projecting GuloGulo_AllData_RUN1_RF ...
	> Projecting GuloGulo_AllData_RUN2_RF ...

   > Mean of probabilities...
			Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                        
> # 5. Individual models projections on current environmental conditions
> myBiomodProjection <- BIOMOD_Projection(
+                         modeling.output = myBiomodModelOut,
+                         new.env = myExpl,
+                         proj.name = 'current',
+                         selected.models = grep('_RF', get_built_models(
+                                                 myBiomodModelOut), value=TRUE),
+                         compress = FALSE,
+                         build.clamping.mask = FALSE)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Do Models Projections -=-=-=-=-=-=-=-=-=-=-=-=-=-=

	> Projecting GuloGulo_AllData_RUN1_RF ...
	> Projecting GuloGulo_AllData_RUN2_RF ...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                           
> 
> # 4. Creating the ensemble projections
> BIOMOD_EnsembleForecasting( projection.output = myBiomodProjection,
+                             EM.output = myBiomodEM)

-=-=-=-=-=-=-=-=-=-=-=-= Do Ensemble Models Projections -=-=-=-=-=-=-=-=-=-=-=-=


	> Projecting GuloGulo_EMmeanByTSS_RF_mergedRun_mergedData ...

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

-=-=-=-=-=-=-=-=-=-=-=-=-=-= 'BIOMOD.projection.out' -=-=-=-=-=-=-=-=-=-=-=-=-=-=

Projection directory : GuloGulo/current


sp.name : GuloGulo

expl.var.names : bio3 bio4 bio7 bio11 bio12


modeling id : 1593437450 (  )

models projected : GuloGulo_EMmeanByTSS_RF_mergedRun_mergedData

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_EnsembleModeling")
> ### * BIOMOD_EnsembleModeling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_EnsembleModeling
> ### Title: Create and evaluate an ensemble set of models and predictions
> ### Aliases: BIOMOD_EnsembleModeling
> ### Keywords: models
> 
> ### ** Examples
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd",
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio7.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio11.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio12.grd",
+                              package="biomod2"))
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData,
+                                        models = c('SRE','CTA','RF'),
+                                        models.options = myBiomodOption,
+                                        NbRunEval=1,
+                                        DataSplit=80,
+                                        Yweights=NULL,
+                                        VarImport=3,
+                                        models.eval.meth = c('TSS'),
+                                        SaveObj = TRUE,
+                                        rescal.all.models = FALSE,
+                                        do.full.models = FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 1
Models selected : SRE CTA RF 

Total number of model runs : 3 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

Model=Classification tree 
	 5 Fold Cross-Validation
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 4. Doing Ensemble Modelling
> myBiomodEM <- BIOMOD_EnsembleModeling( modeling.output = myBiomodModelOut,
+                            chosen.models = 'all',
+                            em.by = 'all',
+                            eval.metric = c('TSS'),
+                            eval.metric.quality.threshold = c(0.7),
+                            models.eval.meth = c('TSS','ROC'),
+                            prob.mean = TRUE,
+                            prob.cv = FALSE,
+                            prob.ci = FALSE,
+                            prob.ci.alpha = 0.05,
+                            prob.median = FALSE,
+                            committee.averaging = FALSE,
+                            prob.mean.weight = TRUE,
+                            prob.mean.weight.decay = 'proportional' )

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Build Ensemble Models -=-=-=-=-=-=-=-=-=-=-=-=-=-=

   ! all models available will be included in ensemble.modeling
   > Evaluation & Weighting methods summary :
      TSS over 0.7


  > mergedAlgo_mergedRun_mergedData ensemble modeling
   ! Models projections for whole zonation required...
	> Projecting GuloGulo_AllData_RUN1_SRE ...
	> Projecting GuloGulo_AllData_RUN1_CTA ...
	> Projecting GuloGulo_AllData_RUN1_RF ...

   > Mean of probabilities...
			Evaluating Model stuff...
   > Probabilities weighting mean...
		  original models scores =  0.789 0.877 0.927
		  final models weights =  0.304 0.338 0.358
			Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # print summary
> myBiomodEM

-=-=-=-=-=-=-=-=-=-=-=-= 'BIOMOD.EnsembleModeling.out' -=-=-=-=-=-=-=-=-=-=-=-=

sp.name : GuloGulo

expl.var.names : bio3 bio4 bio7 bio11 bio12


models computed: 
GuloGulo_EMmeanByTSS_mergedAlgo_mergedRun_mergedData, GuloGulo_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # get evaluation scores
> get_evaluations(myBiomodEM)
$GuloGulo_EMmeanByTSS_mergedAlgo_mergedRun_mergedData
    Testing.data Cutoff Sensitivity Specificity
TSS        0.933    483      96.218      97.044
ROC        0.994    499      96.067      97.318

$GuloGulo_EMwmeanByTSS_mergedAlgo_mergedRun_mergedData
    Testing.data Cutoff Sensitivity Specificity
TSS        0.942    402      98.336       95.84
ROC        0.995    404      98.336       95.95

> 
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_FormatingData")
> ### * BIOMOD_FormatingData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_FormatingData
> ### Title: Initialize the datasets for usage in 'biomod2'
> ### Aliases: BIOMOD_FormatingData
> ### Keywords: models datasets
> 
> ### ** Examples
> 
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd",
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio7.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio11.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio12.grd",
+                              package="biomod2"))
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> myBiomodData

-=-=-=-=-=-=-=-=-=-=-=-=-=-= 'BIOMOD.formated.data' -=-=-=-=-=-=-=-=-=-=-=-=-=-=

sp.name =  GuloGulo

	 661 presences,  1827 true absences and  0 undifined points in dataset


	 5 explanatory variables

      bio3            bio4            bio7           bio11        
 Min.   :10.19   Min.   :   72   Min.   : 54.5   Min.   :-447.75  
 1st Qu.:21.22   1st Qu.: 2641   1st Qu.:186.0   1st Qu.:-184.32  
 Median :35.00   Median : 6682   Median :306.2   Median :  24.23  
 Mean   :40.29   Mean   : 7358   Mean   :310.9   Mean   :  -2.64  
 3rd Qu.:56.35   3rd Qu.:11752   3rd Qu.:424.6   3rd Qu.: 196.30  
 Max.   :92.00   Max.   :22314   Max.   :718.0   Max.   : 283.00  
     bio12         
 Min.   :   0.028  
 1st Qu.: 276.493  
 Median : 562.931  
 Mean   : 853.516  
 3rd Qu.:1200.592  
 Max.   :5431.002  

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> plot(myBiomodData)
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_LoadModels")
> ### * BIOMOD_LoadModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_LoadModels
> ### Title: Load models built within BIOMOD_Modeling function
> ### Aliases: BIOMOD_LoadModels
> ### Keywords: models datasets
> 
> ### ** Examples
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd",
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio7.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio11.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio12.grd",
+                              package="biomod2"))
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData,
+                                        models = c('RF'),
+                                        models.options = myBiomodOption,
+                                        NbRunEval=2,
+                                        DataSplit=70,
+                                        models.eval.meth = c('TSS'),
+                                        SaveObj = TRUE,
+                                        do.full.models = FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 2
Models selected : RF 

Total number of model runs : 2 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...

-=-=-=--=-=-=- GuloGulo_AllData_RUN2 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 4. Loading some models built
> 
> myLoadedModels <- BIOMOD_LoadModels(myBiomodModelOut, models='RF')
> 
> myLoadedModels
[1] "GuloGulo_AllData_RUN1_RF" "GuloGulo_AllData_RUN2_RF"
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_Modeling")
> ### * BIOMOD_Modeling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_Modeling
> ### Title: Run a range of species distribution models
> ### Aliases: BIOMOD_Modeling
> ### Keywords: models multivariate nonlinear nonparametric regression tree
> 
> ### ** Examples
> 
> ##' species occurrences
> DataSpecies <- 
+   read.csv(
+     system.file(
+       "external/species/mammals_table.csv",
+       package="biomod2"
+     )
+   )
> head(DataSpecies)
  X X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1 1   -94.5 82.00001                0        0            0                 0
2 2   -91.5 82.00001                0        1            0                 0
3 3   -88.5 82.00001                0        1            0                 0
4 4   -85.5 82.00001                0        1            0                 0
5 5   -82.5 82.00001                0        1            0                 0
6 6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> ##' the name of studied species
> myRespName <- 'GuloGulo'
> 
> ##' the presence/absences data for our species
> myResp <- as.numeric(DataSpecies[, myRespName])
> 
> ##' the XY coordinates of species data
> myRespXY <- DataSpecies[, c("X_WGS84", "Y_WGS84")]
> 
> 
> ##' Environmental variables extracted from BIOCLIM (bio_3, 
> ##' bio_4, bio_7, bio_11 & bio_12)
> myExpl <- 
+   raster::stack(
+     system.file("external/bioclim/current/bio3.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio4.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio7.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio11.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio12.grd", package = "biomod2")
+   )
> 
> ##' 1. Formatting Data
> myBiomodData <- 
+   BIOMOD_FormatingData(
+     resp.var = myResp,
+     expl.var = myExpl,
+     resp.xy = myRespXY,
+     resp.name = myRespName
+   )

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> ##' 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> ##' 3. Doing Modelisation
> myBiomodModelOut <- 
+   BIOMOD_Modeling(
+     myBiomodData,
+     models = c('SRE','RF'),
+     models.options = myBiomodOption,
+     NbRunEval = 2,
+     DataSplit = 80,
+     VarImport = 0,
+     models.eval.meth = c('TSS','ROC'),
+     do.full.models = FALSE,
+     modeling.id = "test"
+   )


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 2
Models selected : SRE RF 

Total number of model runs : 4 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...

-=-=-=--=-=-=- GuloGulo_AllData_RUN2 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> ##' print a summary of modeling stuff
> myBiomodModelOut

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= BIOMOD.models.out -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Modeling id : test

Species modeled : GuloGulo

Considered variables : bio3 bio4 bio7 bio11 bio12


Computed Models :  GuloGulo_AllData_RUN1_SRE GuloGulo_AllData_RUN1_RF 
GuloGulo_AllData_RUN2_SRE GuloGulo_AllData_RUN2_RF


Failed Models :  none

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_ModelingOptions")
> ### * BIOMOD_ModelingOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_ModelingOptions
> ### Title: Configure the modeling options for each selected model
> ### Aliases: BIOMOD_ModelingOptions
> ### Keywords: models options
> 
> ### ** Examples
> 
>   ## default BIOMOD.model.option object
>   myBiomodOptions <- BIOMOD_ModelingOptions()
> 
>   ## print the object
>   myBiomodOptions

-=-=-=-=-=-=-=-=-=-=-=-=-=-=  'BIOMOD.Model.Options'  -=-=-=-=-=-=-=-=-=-=-=-=-=-=


GLM = list( type = 'quadratic',
            interaction.level = 0,
            myFormula = NULL,
            test = 'AIC',
            family = binomial(link = 'logit'),
            mustart = 0.5,
            control = glm.control(epsilon = 1e-08, maxit = 50, trace = FALSE
) ),


GBM = list( distribution = 'bernoulli',
            n.trees = 2500,
            interaction.depth = 7,
            n.minobsinnode = 5,
            shrinkage = 0.001,
            bag.fraction = 0.5,
            train.fraction = 1,
            cv.folds = 3,
            keep.data = FALSE,
            verbose = FALSE,
            perf.method = 'cv',
            n.cores = 1),

GAM = list( algo = 'GAM_mgcv',
            type = 's_smoother',
            k = -1,
            interaction.level = 0,
            myFormula = NULL,
            family = binomial(link = 'logit'),
            method = 'GCV.Cp',
            optimizer = c('outer','newton'),
            select = FALSE,
            knots = NULL,
            paraPen = NULL,
            control = list(nthreads = 1, irls.reg = 0, epsilon = 1e-07
, maxit = 200, trace = FALSE, mgcv.tol = 1e-07, mgcv.half = 15
, rank.tol = 1.49011611938477e-08
, nlm = list(ndigit=7, gradtol=1e-06, stepmax=2, steptol=1e-04, iterlim=200, check.analyticals=0)
, optim = list(factr=1e+07)
, newton = list(conv.tol=1e-06, maxNstep=5, maxSstep=2, maxHalf=30, use.svd=0)
, outerPIsteps = 0, idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15
, efs.tol = 0.1, keepData = FALSE, scale.est = fletcher, edge.correct = FALSE
) ),


CTA = list( method = 'class',
            parms = 'default',
            cost = NULL,
            control = list(xval = 5, minbucket = 5, minsplit = 5, cp = 0.001
, maxdepth = 25) ),


ANN = list( NbCV = 5,
            size = NULL,
            decay = NULL,
            rang = 0.1,
            maxit = 200),

SRE = list( quant = 0.025),

FDA = list( method = 'mars',
            add_args = NULL),

MARS = list( type = 'simple',
             interaction.level = 0,
             myFormula = NULL,
             nk = NULL,
             penalty = 2,
             thresh = 0.001,
             nprune = NULL,
             pmethod = 'backward'),

RF = list( do.classif = TRUE,
           ntree = 500,
           mtry = 'default',
           nodesize = 5,
           maxnodes = NULL),

MAXENT.Phillips = list( path_to_maxent.jar = '/Users/b780620/Desktop/devel/gbm/revdep/checks.noindex/biomod2/new/biomod2.Rcheck',
               memory_allocated = 512,
               background_data_dir = 'default',
               maximumbackground = 'default',
               maximumiterations = 200,
               visible = FALSE,
               linear = TRUE,
               quadratic = TRUE,
               product = TRUE,
               threshold = TRUE,
               hinge = TRUE,
               lq2lqptthreshold = 80,
               l2lqthreshold = 10,
               hingethreshold = 15,
               beta_threshold = -1,
               beta_categorical = -1,
               beta_lqp = -1,
               beta_hinge = -1,
               betamultiplier = 1,
               defaultprevalence = 0.5),

 MAXENT.Phillips.2 = 
   list(
     myFormula = NULL,
     regmult = 1,
     regfun = <function>
   )
)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
>   ## you can copy a part of the print, change it and custom your options
>   ## here we want to compute quadratic GLM and select best model with 'BIC' criterium
>   myBiomodOptions <- BIOMOD_ModelingOptions(
+     GLM = list( type = 'quadratic',
+                 interaction.level = 0,
+                 myFormula = NULL,
+                 test = 'BIC',
+                 family = 'binomial',
+                 control = glm.control(epsilon = 1e-08,
+                                       maxit = 1000,
+                                       trace = FALSE) ))
> 
>   ## check changes was done
>   myBiomodOptions

-=-=-=-=-=-=-=-=-=-=-=-=-=-=  'BIOMOD.Model.Options'  -=-=-=-=-=-=-=-=-=-=-=-=-=-=


GLM = list( type = 'quadratic',
            interaction.level = 0,
            myFormula = NULL,
            test = 'BIC',
            family = binomial(link = 'logit'),
            mustart = 0.5,
            control = glm.control(epsilon = 1e-08, maxit = 1000, trace = FALSE
) ),


GBM = list( distribution = 'bernoulli',
            n.trees = 2500,
            interaction.depth = 7,
            n.minobsinnode = 5,
            shrinkage = 0.001,
            bag.fraction = 0.5,
            train.fraction = 1,
            cv.folds = 3,
            keep.data = FALSE,
            verbose = FALSE,
            perf.method = 'cv',
            n.cores = 1),

GAM = list( algo = 'GAM_mgcv',
            type = 's_smoother',
            k = -1,
            interaction.level = 0,
            myFormula = NULL,
            family = binomial(link = 'logit'),
            method = 'GCV.Cp',
            optimizer = c('outer','newton'),
            select = FALSE,
            knots = NULL,
            paraPen = NULL,
            control = list(nthreads = 1, irls.reg = 0, epsilon = 1e-07
, maxit = 200, trace = FALSE, mgcv.tol = 1e-07, mgcv.half = 15
, rank.tol = 1.49011611938477e-08
, nlm = list(ndigit=7, gradtol=1e-06, stepmax=2, steptol=1e-04, iterlim=200, check.analyticals=0)
, optim = list(factr=1e+07)
, newton = list(conv.tol=1e-06, maxNstep=5, maxSstep=2, maxHalf=30, use.svd=0)
, outerPIsteps = 0, idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15
, efs.tol = 0.1, keepData = FALSE, scale.est = fletcher, edge.correct = FALSE
) ),


CTA = list( method = 'class',
            parms = 'default',
            cost = NULL,
            control = list(xval = 5, minbucket = 5, minsplit = 5, cp = 0.001
, maxdepth = 25) ),


ANN = list( NbCV = 5,
            size = NULL,
            decay = NULL,
            rang = 0.1,
            maxit = 200),

SRE = list( quant = 0.025),

FDA = list( method = 'mars',
            add_args = NULL),

MARS = list( type = 'simple',
             interaction.level = 0,
             myFormula = NULL,
             nk = NULL,
             penalty = 2,
             thresh = 0.001,
             nprune = NULL,
             pmethod = 'backward'),

RF = list( do.classif = TRUE,
           ntree = 500,
           mtry = 'default',
           nodesize = 5,
           maxnodes = NULL),

MAXENT.Phillips = list( path_to_maxent.jar = '/Users/b780620/Desktop/devel/gbm/revdep/checks.noindex/biomod2/new/biomod2.Rcheck',
               memory_allocated = 512,
               background_data_dir = 'default',
               maximumbackground = 'default',
               maximumiterations = 200,
               visible = FALSE,
               linear = TRUE,
               quadratic = TRUE,
               product = TRUE,
               threshold = TRUE,
               hinge = TRUE,
               lq2lqptthreshold = 80,
               l2lqthreshold = 10,
               hingethreshold = 15,
               beta_threshold = -1,
               beta_categorical = -1,
               beta_lqp = -1,
               beta_hinge = -1,
               betamultiplier = 1,
               defaultprevalence = 0.5),

 MAXENT.Phillips.2 = 
   list(
     myFormula = NULL,
     regmult = 1,
     regfun = <function>
   )
)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
>   ##' you can prefer to establish your own GLM formula
>   myBiomodOptions <- BIOMOD_ModelingOptions(
+     GLM = list( myFormula = formula("Sp277 ~ bio3 +
+                     log(bio10) + poly(bio16,2) + bio19 + bio3:bio19")))
> 
>   ## check changes was done
>   myBiomodOptions

-=-=-=-=-=-=-=-=-=-=-=-=-=-=  'BIOMOD.Model.Options'  -=-=-=-=-=-=-=-=-=-=-=-=-=-=


GLM = list( type = 'quadratic',
            interaction.level = 0,
            myFormula = Sp277 ~ bio3 + log(bio10) + poly(bio16, 2) + bio19 + bio3:bio19,
            test = 'AIC',
            family = binomial(link = 'logit'),
            mustart = 0.5,
            control = glm.control(epsilon = 1e-08, maxit = 50, trace = FALSE
) ),


GBM = list( distribution = 'bernoulli',
            n.trees = 2500,
            interaction.depth = 7,
            n.minobsinnode = 5,
            shrinkage = 0.001,
            bag.fraction = 0.5,
            train.fraction = 1,
            cv.folds = 3,
            keep.data = FALSE,
            verbose = FALSE,
            perf.method = 'cv',
            n.cores = 1),

GAM = list( algo = 'GAM_mgcv',
            type = 's_smoother',
            k = -1,
            interaction.level = 0,
            myFormula = NULL,
            family = binomial(link = 'logit'),
            method = 'GCV.Cp',
            optimizer = c('outer','newton'),
            select = FALSE,
            knots = NULL,
            paraPen = NULL,
            control = list(nthreads = 1, irls.reg = 0, epsilon = 1e-07
, maxit = 200, trace = FALSE, mgcv.tol = 1e-07, mgcv.half = 15
, rank.tol = 1.49011611938477e-08
, nlm = list(ndigit=7, gradtol=1e-06, stepmax=2, steptol=1e-04, iterlim=200, check.analyticals=0)
, optim = list(factr=1e+07)
, newton = list(conv.tol=1e-06, maxNstep=5, maxSstep=2, maxHalf=30, use.svd=0)
, outerPIsteps = 0, idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15
, efs.tol = 0.1, keepData = FALSE, scale.est = fletcher, edge.correct = FALSE
) ),


CTA = list( method = 'class',
            parms = 'default',
            cost = NULL,
            control = list(xval = 5, minbucket = 5, minsplit = 5, cp = 0.001
, maxdepth = 25) ),


ANN = list( NbCV = 5,
            size = NULL,
            decay = NULL,
            rang = 0.1,
            maxit = 200),

SRE = list( quant = 0.025),

FDA = list( method = 'mars',
            add_args = NULL),

MARS = list( type = 'simple',
             interaction.level = 0,
             myFormula = NULL,
             nk = NULL,
             penalty = 2,
             thresh = 0.001,
             nprune = NULL,
             pmethod = 'backward'),

RF = list( do.classif = TRUE,
           ntree = 500,
           mtry = 'default',
           nodesize = 5,
           maxnodes = NULL),

MAXENT.Phillips = list( path_to_maxent.jar = '/Users/b780620/Desktop/devel/gbm/revdep/checks.noindex/biomod2/new/biomod2.Rcheck',
               memory_allocated = 512,
               background_data_dir = 'default',
               maximumbackground = 'default',
               maximumiterations = 200,
               visible = FALSE,
               linear = TRUE,
               quadratic = TRUE,
               product = TRUE,
               threshold = TRUE,
               hinge = TRUE,
               lq2lqptthreshold = 80,
               l2lqthreshold = 10,
               hingethreshold = 15,
               beta_threshold = -1,
               beta_categorical = -1,
               beta_lqp = -1,
               beta_hinge = -1,
               betamultiplier = 1,
               defaultprevalence = 0.5),

 MAXENT.Phillips.2 = 
   list(
     myFormula = NULL,
     regmult = 1,
     regfun = <function>
   )
)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
>   ##' you also can directly print default parameters and then follow the same processus
>   Print_Default_ModelingOptions()

 Defaut modeling options. copy, change what you want paste it as arg to BIOMOD_ModelingOptions


-=-=-=-=-=-=-=-=-=-=-=-=-=-=  'BIOMOD.Model.Options'  -=-=-=-=-=-=-=-=-=-=-=-=-=-=


GLM = list( type = 'quadratic',
            interaction.level = 0,
            myFormula = NULL,
            test = 'AIC',
            family = binomial(link = 'logit'),
            mustart = 0.5,
            control = glm.control(epsilon = 1e-08, maxit = 50, trace = FALSE
) ),


GBM = list( distribution = 'bernoulli',
            n.trees = 2500,
            interaction.depth = 7,
            n.minobsinnode = 5,
            shrinkage = 0.001,
            bag.fraction = 0.5,
            train.fraction = 1,
            cv.folds = 3,
            keep.data = FALSE,
            verbose = FALSE,
            perf.method = 'cv',
            n.cores = 1),

GAM = list( algo = 'GAM_mgcv',
            type = 's_smoother',
            k = -1,
            interaction.level = 0,
            myFormula = NULL,
            family = binomial(link = 'logit'),
            method = 'GCV.Cp',
            optimizer = c('outer','newton'),
            select = FALSE,
            knots = NULL,
            paraPen = NULL,
            control = list(nthreads = 1, irls.reg = 0, epsilon = 1e-07
, maxit = 200, trace = FALSE, mgcv.tol = 1e-07, mgcv.half = 15
, rank.tol = 1.49011611938477e-08
, nlm = list(ndigit=7, gradtol=1e-06, stepmax=2, steptol=1e-04, iterlim=200, check.analyticals=0)
, optim = list(factr=1e+07)
, newton = list(conv.tol=1e-06, maxNstep=5, maxSstep=2, maxHalf=30, use.svd=0)
, outerPIsteps = 0, idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15
, efs.tol = 0.1, keepData = FALSE, scale.est = fletcher, edge.correct = FALSE
) ),


CTA = list( method = 'class',
            parms = 'default',
            cost = NULL,
            control = list(xval = 5, minbucket = 5, minsplit = 5, cp = 0.001
, maxdepth = 25) ),


ANN = list( NbCV = 5,
            size = NULL,
            decay = NULL,
            rang = 0.1,
            maxit = 200),

SRE = list( quant = 0.025),

FDA = list( method = 'mars',
            add_args = NULL),

MARS = list( type = 'simple',
             interaction.level = 0,
             myFormula = NULL,
             nk = NULL,
             penalty = 2,
             thresh = 0.001,
             nprune = NULL,
             pmethod = 'backward'),

RF = list( do.classif = TRUE,
           ntree = 500,
           mtry = 'default',
           nodesize = 5,
           maxnodes = NULL),

MAXENT.Phillips = list( path_to_maxent.jar = '/Users/b780620/Desktop/devel/gbm/revdep/checks.noindex/biomod2/new/biomod2.Rcheck',
               memory_allocated = 512,
               background_data_dir = 'default',
               maximumbackground = 'default',
               maximumiterations = 200,
               visible = FALSE,
               linear = TRUE,
               quadratic = TRUE,
               product = TRUE,
               threshold = TRUE,
               hinge = TRUE,
               lq2lqptthreshold = 80,
               l2lqthreshold = 10,
               hingethreshold = 15,
               beta_threshold = -1,
               beta_categorical = -1,
               beta_lqp = -1,
               beta_hinge = -1,
               betamultiplier = 1,
               defaultprevalence = 0.5),

 MAXENT.Phillips.2 = 
   list(
     myFormula = NULL,
     regmult = 1,
     regfun = <function>
   )
)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_Projection")
> ### * BIOMOD_Projection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_Projection
> ### Title: Project the calibrated models within 'biomod2' into new space or
> ###   time
> ### Aliases: BIOMOD_Projection
> ### Keywords: models regression nonlinear multivariate nonparametric tree
> 
> ### ** Examples
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd",
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio7.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio11.grd",
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio12.grd",
+                              package="biomod2"))
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData,
+                                        models = c('SRE','RF'),
+                                        models.options = myBiomodOption,
+                                        NbRunEval=1,
+                                        DataSplit=70,
+                                        models.eval.meth = c('TSS'),
+                                        do.full.models = FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 1
Models selected : SRE RF 

Total number of model runs : 2 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> # 4.1 Projection on current environemental conditions
> 
> myBiomodProjection <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
+                                           new.env = myExpl,
+                                           proj.name = 'current',
+                                           selected.models = 'all',
+                                           binary.meth = 'TSS',
+                                           compress = FALSE,
+                                           build.clamping.mask = FALSE)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Do Models Projections -=-=-=-=-=-=-=-=-=-=-=-=-=-=

	> Projecting GuloGulo_AllData_RUN1_SRE ...
	> Projecting GuloGulo_AllData_RUN1_RF ...

	> Building TSS binaries
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> ## Not run: 
> ##D # 4.2 Projection on future environemental conditions
> ##D myExplFuture = raster::stack(system.file("external/bioclim/future/bio3.grd",package="biomod2"),
> ##D                      system.file("external/bioclim/future/bio4.grd",package="biomod2"),
> ##D                      system.file("external/bioclim/future/bio7.grd",package="biomod2"),
> ##D                      system.file("external/bioclim/future/bio11.grd",package="biomod2"),
> ##D                      system.file("external/bioclim/future/bio12.grd",package="biomod2"))
> ##D 
> ##D myBiomodProjectionFuture <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
> ##D                                               new.env = myExplFuture,
> ##D                                               proj.name = 'future',
> ##D                                               selected.models = 'all',
> ##D                                               binary.meth = 'TSS',
> ##D                                               compress = FALSE,
> ##D                                               build.clamping.mask = TRUE)
> ##D 
> ##D # print summary and plot projections
> ##D myBiomodProjectionFuture
> ##D plot(myBiomodProjectionFuture)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_RangeSize")
> ### * BIOMOD_RangeSize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_RangeSize
> ### Title: Analysis of the range size changes
> ### Aliases: BIOMOD_RangeSize BIOMOD_RangeSize-methods
> ###   BIOMOD_RangeSize,data.frame,data.frame-method
> ###   BIOMOD_RangeSize,array,array-method
> ###   BIOMOD_RangeSize,RasterStack,RasterStack-method
> ###   BIOMOD_RangeSize,RasterLayer,RasterLayer-method
> ###   BIOMOD_RangeSize,RasterLayer,RasterStack-method
> ### Keywords: IO
> 
> ### ** Examples
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species 
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd", 
+                              package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio7.grd", 
+                              package="biomod2"),  
+                 system.file( "external/bioclim/current/bio11.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio12.grd", 
+                              package="biomod2"))
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
+                                        models = c('CTA','RF'), 
+                                        models.options = myBiomodOption, 
+                                        models.eval.meth ='TSS',
+                                        rescal.all.models=FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 1
Models selected : CTA RF 

Total number of model runs : 2 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_Full 

Model=Classification tree 
	 5 Fold Cross-Validation
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> # 4.1 Projection on current environemental conditions
> 
> myBiomodProjection <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
+                                           new.env = myExpl,
+                                           proj.name = 'current',
+                                           selected.models = 'all',
+                                           binary.meth = 'TSS',
+                                           compress = FALSE,
+                                           build.clamping.mask = FALSE)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Do Models Projections -=-=-=-=-=-=-=-=-=-=-=-=-=-=

	> Projecting GuloGulo_AllData_Full_CTA ...
	> Projecting GuloGulo_AllData_Full_RF ...

	> Building TSS binaries
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 4.2 Projection on future environemental conditions
> 
> myExplFuture = raster::stack(system.file("external/bioclim/future/bio3.grd",package="biomod2"),
+                      system.file("external/bioclim/future/bio4.grd",package="biomod2"),
+                      system.file("external/bioclim/future/bio7.grd",package="biomod2"),
+                      system.file("external/bioclim/future/bio11.grd",package="biomod2"),
+                      system.file("external/bioclim/future/bio12.grd",package="biomod2"))
> 
> myBiomodProjectionFuture <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
+                                               new.env = myExplFuture,
+                                               proj.name = 'future',
+                                               selected.models = 'all',
+                                               binary.meth = 'TSS',
+                                               compress = FALSE,
+                                               build.clamping.mask = TRUE)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Do Models Projections -=-=-=-=-=-=-=-=-=-=-=-=-=-=

	> Building clamping mask

	> Projecting GuloGulo_AllData_Full_CTA ...
	> Projecting GuloGulo_AllData_Full_RF ...

	> Building TSS binaries
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 5. Detect where our species occurances state is forecasted to change
> 
> # load binary projections
> # here is rasters objects ('.grd')
> currentPred <- raster::stack("GuloGulo/proj_current/proj_current_GuloGulo_TSSbin.grd")
> futurePred <- raster::stack("GuloGulo/proj_future/proj_future_GuloGulo_TSSbin.grd")
> 
> 
> # call the Range size function
> myBiomodRangeSize <- BIOMOD_RangeSize(
+   CurrentPred=currentPred,
+   FutureProj=futurePred)
> 
> # see the results
> myBiomodRangeSize$Compt.By.Models
        Loss Stable0 Stable1 Gain PercLoss PercGain SpeciesRangeChange
layer.1  157    1590     535   61   22.688    8.815            -13.873
layer.2  141    1631     531   40   20.982    5.952            -15.030
        CurrentRangeSize FutureRangeSize.NoDisp FutureRangeSize.FullDisp
layer.1              692                    535                      596
layer.2              672                    531                      571
> plot(myBiomodRangeSize$Diff.By.Pixel)
> 
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_cv")
> ### * BIOMOD_cv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_cv
> ### Title: Custom models cross-validation procedure
> ### Aliases: BIOMOD_cv
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # species occurrences
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"))
> ##D head(DataSpecies)
> ##D 
> ##D the name of studied species
> ##D myRespName <- 'GuloGulo'
> ##D 
> ##D # the presence/absences data for our species 
> ##D myResp <- as.numeric(DataSpecies[,myRespName])
> ##D 
> ##D # the XY coordinates of species data
> ##D myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D 
> ##D # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> ##D myExpl = stack( system.file( "external/bioclim/current/bio3.grd", 
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio4.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio7.grd", 
> ##D                              package="biomod2"),  
> ##D                 system.file( "external/bioclim/current/bio11.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio12.grd", 
> ##D                              package="biomod2"))
> ##D 
> ##D # 1. Formatting Data
> ##D myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
> ##D                                      expl.var = myExpl,
> ##D                                      resp.xy = myRespXY,
> ##D                                      resp.name = myRespName)
> ##D 
> ##D # 2. Defining Models Options using default options.
> ##D myBiomodOption <- BIOMOD_ModelingOptions()
> ##D 
> ##D 
> ##D # 3. Creating DataSplitTable
> ##D 
> ##D DataSplitTable <- BIOMOD_cv(myBiomodData, k=5, rep=2, do.full.models=F)
> ##D DataSplitTable.y <- BIOMOD_cv(myBiomodData,stratified.cv=T, stratify="y", k=2)
> ##D colnames(DataSplitTable.y)[1:2] <- c("RUN11","RUN12")
> ##D DataSplitTable <- cbind(DataSplitTable,DataSplitTable.y)
> ##D head(DataSplitTable)
> ##D 
> ##D # 4. Doing Modelisation
> ##D 
> ##D myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
> ##D                                      models = c('RF'), 
> ##D                                      models.options = myBiomodOption, 
> ##D                                      DataSplitTable = DataSplitTable,
> ##D                                      VarImport=0, 
> ##D                                      models.eval.meth = c('ROC'),
> ##D                                      do.full.models=FALSE,
> ##D                                      modeling.id="test")
> ##D 
> ##D ## get cv evaluations
> ##D eval <- get_evaluations(myBiomodModelOut,as.data.frame=T)
> ##D 
> ##D eval$strat <- NA
> ##D eval$strat[grepl("13",eval$Model.name)] <- "Full"
> ##D eval$strat[!(grepl("11",eval$Model.name)|
> ##D              grepl("12",eval$Model.name)|
> ##D              grepl("13",eval$Model.name))] <- "Random"
> ##D eval$strat[grepl("11",eval$Model.name)|grepl("12",eval$Model.name)] <- "Strat"
> ##D 
> ##D boxplot(eval$Testing.data~ eval$strat, ylab="ROC AUC")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_presenceonly")
> ### * BIOMOD_presenceonly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_presenceonly
> ### Title: evaluate models with presences only metrics
> ### Aliases: BIOMOD_presenceonly
> 
> ### ** Examples
> 
> ## Not run: 
> ##D requireNamesapce(PresenceAbsence, 'PresenceAbsence', quietly = TRUE)
> ##D 
> ##D # species occurrences
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"), row.names = 1)
> ##D head(DataSpecies)
> ##D 
> ##D # the name of studied species
> ##D myRespName <- 'GuloGulo'
> ##D 
> ##D # the presence/absences data for our species 
> ##D myResp <- as.numeric(DataSpecies[,myRespName])
> ##D 
> ##D # the XY coordinates of species data
> ##D myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D 
> ##D # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> ##D myExpl = stack( system.file( "external/bioclim/current/bio3.grd", 
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio4.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio7.grd", 
> ##D                              package="biomod2"),  
> ##D                 system.file( "external/bioclim/current/bio11.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio12.grd", 
> ##D                              package="biomod2"))
> ##D 
> ##D # 1. Formatting Data
> ##D myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
> ##D                                      expl.var = myExpl,
> ##D                                      resp.xy = myRespXY,
> ##D                                      resp.name = myRespName)
> ##D 
> ##D # 2. Defining Models Options using default options.
> ##D myBiomodOption <- BIOMOD_ModelingOptions()
> ##D 
> ##D # 3. Doing Modelisation
> ##D 
> ##D myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
> ##D                                      models = c('SRE','CTA','RF'), 
> ##D                                      models.options = myBiomodOption, 
> ##D                                      NbRunEval=1, 
> ##D                                      DataSplit=80, 
> ##D                                      Yweights=NULL, 
> ##D                                      VarImport=3, 
> ##D                                      models.eval.meth = c('TSS','ROC'),
> ##D                                      SaveObj = TRUE,
> ##D                                      rescal.all.models = FALSE,
> ##D                                      do.full.models = FALSE)
> ##D 
> ##D # 4. Doing Ensemble Modelling
> ##D myBiomodEM <- BIOMOD_EnsembleModeling( modeling.output = myBiomodModelOut,
> ##D                                        chosen.models = 'all',
> ##D                                        em.by = 'PA_dataset+repet',
> ##D                                        eval.metric = c('TSS'),
> ##D                                        eval.metric.quality.threshold = c(0.7),
> ##D                                        models.eval.meth = c('TSS','ROC'),
> ##D                                        prob.mean = TRUE,
> ##D                                        prob.cv = FALSE,
> ##D                                        prob.ci = FALSE,
> ##D                                        prob.ci.alpha = 0.05,
> ##D                                        prob.median = FALSE,
> ##D                                        committee.averaging = FALSE,
> ##D                                        prob.mean.weight = TRUE,
> ##D                                        prob.mean.weight.decay = 'proportional' )   
> ##D 
> ##D # evaluate Biomod models with the Boyce index and MPA
> ##D pres.only.eval <- BIOMOD_presenceonly(myBiomodModelOut, myBiomodEM)
> ##D pres.only.eval$eval
> ##D 
> ##D # evaluate Biomod models with the Boyce index and MPA using Background data
> ##D bg.Values <- getValues(myExpl)
> ##D 
> ##D pres.only.eval <- BIOMOD_presenceonly(myBiomodModelOut, myBiomodEM, bg.env = bg.Values)
> ##D pres.only.eval$eval
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("BIOMOD_tuning")
> ### * BIOMOD_tuning
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BIOMOD_tuning
> ### Title: Tune models parameters
> ### Aliases: BIOMOD_tuning
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # species occurrences
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"))
> ##D head(DataSpecies)
> ##D 
> ##D # the name of studied species
> ##D myRespName <- 'GuloGulo'
> ##D 
> ##D # the presence/absences data for our species 
> ##D myResp <- as.numeric(DataSpecies[,myRespName])
> ##D 
> ##D # the XY coordinates of species data
> ##D myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> ##D myExpl = stack( system.file( "external/bioclim/current/bio3.grd", 
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio4.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio7.grd", 
> ##D                              package="biomod2"),  
> ##D                 system.file( "external/bioclim/current/bio11.grd", 
> ##D                              package="biomod2"), 
> ##D                 system.file( "external/bioclim/current/bio12.grd", 
> ##D                              package="biomod2"))
> ##D # 1. Formatting Data
> ##D myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
> ##D                                      expl.var = myExpl,
> ##D                                      resp.xy = myRespXY,
> ##D                                      resp.name = myRespName)
> ##D 
> ##D # 2. Defining Models Options using default options.
> ##D ### Duration for turing all models sequential with default settings 
> ##D ### on 3.4 GHz processor: approx. 45 min tuning all models in parallel
> ##D ### (on 8 cores) using foreach loops runs much faster: approx. 14 min
> ##D 
> ##D #library(doParallel);cl<-makeCluster(8);doParallel::registerDoParallel(cl) 
> ##D 
> ##D 
> ##D time.seq<-system.time(Biomod.tuning <- BIOMOD_tuning(myBiomodData,
> ##D                                                              env.ME = myExpl,
> ##D                                                              n.bg.ME = ncell(myExpl)))
> ##D #stopCluster(cl)
> ##D 
> ##D myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
> ##D                                      models = c('RF','CTA'), 
> ##D                                      models.options = Biomod.tuning$models.options, 
> ##D                                      NbRunEval=1, 
> ##D                                      DataSplit=100, 
> ##D                                      VarImport=0, 
> ##D                                      models.eval.meth = c('ROC'),
> ##D                                      do.full.models=FALSE,
> ##D                                      modeling.id="test")
> ##D 
> ##D 
> ##D #  eval.plot(Biomod.tuning$tune.MAXENT.Phillips at results)
> ##D par(mfrow=c(1,3))
> ##D plot(Biomod.tuning$tune.CTA.rpart)
> ##D plot(Biomod.tuning$tune.CTA.rpart2)
> ##D plot(Biomod.tuning$tune.RF)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("BinaryTransformation-methods")
> ### * BinaryTransformation-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BinaryTransformation
> ### Title: Convert species' probability of occurrence into binary
> ###   presence-absence data using a predefined threshold
> ### Aliases: BinaryTransformation BinaryTransformation,data.frame-method
> ###   BinaryTransformation, data.frame-method
> ###   BinaryTransformation,matrix-method matrix-method
> ###   BinaryTransformation,numeric-method numeric-method
> ###   BinaryTransformation,array-method array-method
> ###   BinaryTransformation,RasterLayer-method RasterLayer-method
> ###   BinaryTransformation,RasterStack-method RasterStack-method
> ###   BinaryTransformation,RasterBrick-method RasterBrick-method
> ### Keywords: models
> 
> ### ** Examples
> 
>   xx <- rnorm(50,10)
>   yy <- BinaryTransformation(xx, 10)
> 
>   cbind(xx,yy)
             xx yy
 [1,]  9.373546  0
 [2,] 10.183643  1
 [3,]  9.164371  0
 [4,] 11.595281  1
 [5,] 10.329508  1
 [6,]  9.179532  0
 [7,] 10.487429  1
 [8,] 10.738325  1
 [9,] 10.575781  1
[10,]  9.694612  0
[11,] 11.511781  1
[12,] 10.389843  1
[13,]  9.378759  0
[14,]  7.785300  0
[15,] 11.124931  1
[16,]  9.955066  0
[17,]  9.983810  0
[18,] 10.943836  1
[19,] 10.821221  1
[20,] 10.593901  1
[21,] 10.918977  1
[22,] 10.782136  1
[23,] 10.074565  1
[24,]  8.010648  0
[25,] 10.619826  1
[26,]  9.943871  0
[27,]  9.844204  0
[28,]  8.529248  0
[29,]  9.521850  0
[30,] 10.417942  1
[31,] 11.358680  1
[32,]  9.897212  0
[33,] 10.387672  1
[34,]  9.946195  0
[35,]  8.622940  0
[36,]  9.585005  0
[37,]  9.605710  0
[38,]  9.940687  0
[39,] 11.100025  1
[40,] 10.763176  1
[41,]  9.835476  0
[42,]  9.746638  0
[43,] 10.696963  1
[44,] 10.556663  1
[45,]  9.311244  0
[46,]  9.292505  0
[47,] 10.364582  1
[48,] 10.768533  1
[49,]  9.887654  0
[50,] 10.881108  1
> 
> 
> 
> 
> cleanEx()
> nameEx("CustomIndexMaker")
> ### * CustomIndexMaker
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CustomIndexMaker
> ### Title: Replace default package Index help file by a custom one.
> ### Aliases: CustomIndexMaker
> ### Keywords: models datasets
> 
> ### ** Examples
> 
> 
> ## Automaticly done at buildinfg package state
> # CustomIndexMaker()
> 
> 
> 
> 
> cleanEx()
> nameEx("DF_to_ARRAY")
> ### * DF_to_ARRAY
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DF_to_ARRAY
> ### Title: Convert a biomod2 data.frame (or list) into array
> ### Aliases: DF_to_ARRAY LIST_to_ARRAY
> ### Keywords: models formula options
> 
> ### ** Examples
> 
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species 
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd", 
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio7.grd", 
+                              package="biomod2"),  
+                 system.file( "external/bioclim/current/bio11.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio12.grd", 
+                              package="biomod2"))
>                              
> # Keep only points where we have info                       
> myExpl <- raster::extract(myExpl, myRespXY)
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                                                      
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
+                                        models = c('SRE','RF'), 
+                                        models.options = myBiomodOption, 
+                                        NbRunEval=1, 
+                                        DataSplit=70, 
+                                        Yweights=NULL, 
+                                        VarImport=0, 
+                                        models.eval.meth = c('ROC'),
+                                        rescal.all.models = FALSE,
+                                        do.full.models = FALSE)


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 1
Models selected : SRE RF 

Total number of model runs : 2 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                        
>                                        
> # 4 Projection on current environemental conditions
> 
> myBiomodProjection <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
+                                           new.env = data.frame(myExpl),
+                                           proj.name = 'current',
+                                           selected.models = 'all')

-=-=-=-=-=-=-=-=-=-=-=-=-=-= Do Models Projections -=-=-=-=-=-=-=-=-=-=-=-=-=-=

	> Building clamping mask

	> Projecting GuloGulo_AllData_RUN1_SRE ...
	> Projecting GuloGulo_AllData_RUN1_RF ...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                           
> 
> 
> # 5. Get projection under data.frame format
> myProjDF <- get_predictions(myBiomodProjection, as.data.frame=TRUE)
> class(myProjDF)
[1] "data.frame"
> dim(myProjDF)
[1] 2488    2
> dimnames(myProjDF)
[[1]]
   [1] "1"    "2"    "3"    "4"    "5"    "6"    "7"    "8"    "9"    "10"  
  [11] "11"   "12"   "13"   "14"   "15"   "16"   "17"   "18"   "19"   "20"  
  [21] "21"   "22"   "23"   "24"   "25"   "26"   "27"   "28"   "29"   "30"  
  [31] "31"   "32"   "33"   "34"   "35"   "36"   "37"   "38"   "39"   "40"  
  [41] "41"   "42"   "43"   "44"   "45"   "46"   "47"   "48"   "49"   "50"  
  [51] "51"   "52"   "53"   "54"   "55"   "56"   "57"   "58"   "59"   "60"  
  [61] "61"   "62"   "63"   "64"   "65"   "66"   "67"   "68"   "69"   "70"  
  [71] "71"   "72"   "73"   "74"   "75"   "76"   "77"   "78"   "79"   "80"  
  [81] "81"   "82"   "83"   "84"   "85"   "86"   "87"   "88"   "89"   "90"  
  [91] "91"   "92"   "93"   "94"   "95"   "96"   "97"   "98"   "99"   "100" 
 [101] "101"  "102"  "103"  "104"  "105"  "106"  "107"  "108"  "109"  "110" 
 [111] "111"  "112"  "113"  "114"  "115"  "116"  "117"  "118"  "119"  "120" 
 [121] "121"  "122"  "123"  "124"  "125"  "126"  "127"  "128"  "129"  "130" 
 [131] "131"  "132"  "133"  "134"  "135"  "136"  "137"  "138"  "139"  "140" 
 [141] "141"  "142"  "143"  "144"  "145"  "146"  "147"  "148"  "149"  "150" 
 [151] "151"  "152"  "153"  "154"  "155"  "156"  "157"  "158"  "159"  "160" 
 [161] "161"  "162"  "163"  "164"  "165"  "166"  "167"  "168"  "169"  "170" 
 [171] "171"  "172"  "173"  "174"  "175"  "176"  "177"  "178"  "179"  "180" 
 [181] "181"  "182"  "183"  "184"  "185"  "186"  "187"  "188"  "189"  "190" 
 [191] "191"  "192"  "193"  "194"  "195"  "196"  "197"  "198"  "199"  "200" 
 [201] "201"  "202"  "203"  "204"  "205"  "206"  "207"  "208"  "209"  "210" 
 [211] "211"  "212"  "213"  "214"  "215"  "216"  "217"  "218"  "219"  "220" 
 [221] "221"  "222"  "223"  "224"  "225"  "226"  "227"  "228"  "229"  "230" 
 [231] "231"  "232"  "233"  "234"  "235"  "236"  "237"  "238"  "239"  "240" 
 [241] "241"  "242"  "243"  "244"  "245"  "246"  "247"  "248"  "249"  "250" 
 [251] "251"  "252"  "253"  "254"  "255"  "256"  "257"  "258"  "259"  "260" 
 [261] "261"  "262"  "263"  "264"  "265"  "266"  "267"  "268"  "269"  "270" 
 [271] "271"  "272"  "273"  "274"  "275"  "276"  "277"  "278"  "279"  "280" 
 [281] "281"  "282"  "283"  "284"  "285"  "286"  "287"  "288"  "289"  "290" 
 [291] "291"  "292"  "293"  "294"  "295"  "296"  "297"  "298"  "299"  "300" 
 [301] "301"  "302"  "303"  "304"  "305"  "306"  "307"  "308"  "309"  "310" 
 [311] "311"  "312"  "313"  "314"  "315"  "316"  "317"  "318"  "319"  "320" 
 [321] "321"  "322"  "323"  "324"  "325"  "326"  "327"  "328"  "329"  "330" 
 [331] "331"  "332"  "333"  "334"  "335"  "336"  "337"  "338"  "339"  "340" 
 [341] "341"  "342"  "343"  "344"  "345"  "346"  "347"  "348"  "349"  "350" 
 [351] "351"  "352"  "353"  "354"  "355"  "356"  "357"  "358"  "359"  "360" 
 [361] "361"  "362"  "363"  "364"  "365"  "366"  "367"  "368"  "369"  "370" 
 [371] "371"  "372"  "373"  "374"  "375"  "376"  "377"  "378"  "379"  "380" 
 [381] "381"  "382"  "383"  "384"  "385"  "386"  "387"  "388"  "389"  "390" 
 [391] "391"  "392"  "393"  "394"  "395"  "396"  "397"  "398"  "399"  "400" 
 [401] "401"  "402"  "403"  "404"  "405"  "406"  "407"  "408"  "409"  "410" 
 [411] "411"  "412"  "413"  "414"  "415"  "416"  "417"  "418"  "419"  "420" 
 [421] "421"  "422"  "423"  "424"  "425"  "426"  "427"  "428"  "429"  "430" 
 [431] "431"  "432"  "433"  "434"  "435"  "436"  "437"  "438"  "439"  "440" 
 [441] "441"  "442"  "443"  "444"  "445"  "446"  "447"  "448"  "449"  "450" 
 [451] "451"  "452"  "453"  "454"  "455"  "456"  "457"  "458"  "459"  "460" 
 [461] "461"  "462"  "463"  "464"  "465"  "466"  "467"  "468"  "469"  "470" 
 [471] "471"  "472"  "473"  "474"  "475"  "476"  "477"  "478"  "479"  "480" 
 [481] "481"  "482"  "483"  "484"  "485"  "486"  "487"  "488"  "489"  "490" 
 [491] "491"  "492"  "493"  "494"  "495"  "496"  "497"  "498"  "499"  "500" 
 [501] "501"  "502"  "503"  "504"  "505"  "506"  "507"  "508"  "509"  "510" 
 [511] "511"  "512"  "513"  "514"  "515"  "516"  "517"  "518"  "519"  "520" 
 [521] "521"  "522"  "523"  "524"  "525"  "526"  "527"  "528"  "529"  "530" 
 [531] "531"  "532"  "533"  "534"  "535"  "536"  "537"  "538"  "539"  "540" 
 [541] "541"  "542"  "543"  "544"  "545"  "546"  "547"  "548"  "549"  "550" 
 [551] "551"  "552"  "553"  "554"  "555"  "556"  "557"  "558"  "559"  "560" 
 [561] "561"  "562"  "563"  "564"  "565"  "566"  "567"  "568"  "569"  "570" 
 [571] "571"  "572"  "573"  "574"  "575"  "576"  "577"  "578"  "579"  "580" 
 [581] "581"  "582"  "583"  "584"  "585"  "586"  "587"  "588"  "589"  "590" 
 [591] "591"  "592"  "593"  "594"  "595"  "596"  "597"  "598"  "599"  "600" 
 [601] "601"  "602"  "603"  "604"  "605"  "606"  "607"  "608"  "609"  "610" 
 [611] "611"  "612"  "613"  "614"  "615"  "616"  "617"  "618"  "619"  "620" 
 [621] "621"  "622"  "623"  "624"  "625"  "626"  "627"  "628"  "629"  "630" 
 [631] "631"  "632"  "633"  "634"  "635"  "636"  "637"  "638"  "639"  "640" 
 [641] "641"  "642"  "643"  "644"  "645"  "646"  "647"  "648"  "649"  "650" 
 [651] "651"  "652"  "653"  "654"  "655"  "656"  "657"  "658"  "659"  "660" 
 [661] "661"  "662"  "663"  "664"  "665"  "666"  "667"  "668"  "669"  "670" 
 [671] "671"  "672"  "673"  "674"  "675"  "676"  "677"  "678"  "679"  "680" 
 [681] "681"  "682"  "683"  "684"  "685"  "686"  "687"  "688"  "689"  "690" 
 [691] "691"  "692"  "693"  "694"  "695"  "696"  "697"  "698"  "699"  "700" 
 [701] "701"  "702"  "703"  "704"  "705"  "706"  "707"  "708"  "709"  "710" 
 [711] "711"  "712"  "713"  "714"  "715"  "716"  "717"  "718"  "719"  "720" 
 [721] "721"  "722"  "723"  "724"  "725"  "726"  "727"  "728"  "729"  "730" 
 [731] "731"  "732"  "733"  "734"  "735"  "736"  "737"  "738"  "739"  "740" 
 [741] "741"  "742"  "743"  "744"  "745"  "746"  "747"  "748"  "749"  "750" 
 [751] "751"  "752"  "753"  "754"  "755"  "756"  "757"  "758"  "759"  "760" 
 [761] "761"  "762"  "763"  "764"  "765"  "766"  "767"  "768"  "769"  "770" 
 [771] "771"  "772"  "773"  "774"  "775"  "776"  "777"  "778"  "779"  "780" 
 [781] "781"  "782"  "783"  "784"  "785"  "786"  "787"  "788"  "789"  "790" 
 [791] "791"  "792"  "793"  "794"  "795"  "796"  "797"  "798"  "799"  "800" 
 [801] "801"  "802"  "803"  "804"  "805"  "806"  "807"  "808"  "809"  "810" 
 [811] "811"  "812"  "813"  "814"  "815"  "816"  "817"  "818"  "819"  "820" 
 [821] "821"  "822"  "823"  "824"  "825"  "826"  "827"  "828"  "829"  "830" 
 [831] "831"  "832"  "833"  "834"  "835"  "836"  "837"  "838"  "839"  "840" 
 [841] "841"  "842"  "843"  "844"  "845"  "846"  "847"  "848"  "849"  "850" 
 [851] "851"  "852"  "853"  "854"  "855"  "856"  "857"  "858"  "859"  "860" 
 [861] "861"  "862"  "863"  "864"  "865"  "866"  "867"  "868"  "869"  "870" 
 [871] "871"  "872"  "873"  "874"  "875"  "876"  "877"  "878"  "879"  "880" 
 [881] "881"  "882"  "883"  "884"  "885"  "886"  "887"  "888"  "889"  "890" 
 [891] "891"  "892"  "893"  "894"  "895"  "896"  "897"  "898"  "899"  "900" 
 [901] "901"  "902"  "903"  "904"  "905"  "906"  "907"  "908"  "909"  "910" 
 [911] "911"  "912"  "913"  "914"  "915"  "916"  "917"  "918"  "919"  "920" 
 [921] "921"  "922"  "923"  "924"  "925"  "926"  "927"  "928"  "929"  "930" 
 [931] "931"  "932"  "933"  "934"  "935"  "936"  "937"  "938"  "939"  "940" 
 [941] "941"  "942"  "943"  "944"  "945"  "946"  "947"  "948"  "949"  "950" 
 [951] "951"  "952"  "953"  "954"  "955"  "956"  "957"  "958"  "959"  "960" 
 [961] "961"  "962"  "963"  "964"  "965"  "966"  "967"  "968"  "969"  "970" 
 [971] "971"  "972"  "973"  "974"  "975"  "976"  "977"  "978"  "979"  "980" 
 [981] "981"  "982"  "983"  "984"  "985"  "986"  "987"  "988"  "989"  "990" 
 [991] "991"  "992"  "993"  "994"  "995"  "996"  "997"  "998"  "999"  "1000"
[1001] "1001" "1002" "1003" "1004" "1005" "1006" "1007" "1008" "1009" "1010"
[1011] "1011" "1012" "1013" "1014" "1015" "1016" "1017" "1018" "1019" "1020"
[1021] "1021" "1022" "1023" "1024" "1025" "1026" "1027" "1028" "1029" "1030"
[1031] "1031" "1032" "1033" "1034" "1035" "1036" "1037" "1038" "1039" "1040"
[1041] "1041" "1042" "1043" "1044" "1045" "1046" "1047" "1048" "1049" "1050"
[1051] "1051" "1052" "1053" "1054" "1055" "1056" "1057" "1058" "1059" "1060"
[1061] "1061" "1062" "1063" "1064" "1065" "1066" "1067" "1068" "1069" "1070"
[1071] "1071" "1072" "1073" "1074" "1075" "1076" "1077" "1078" "1079" "1080"
[1081] "1081" "1082" "1083" "1084" "1085" "1086" "1087" "1088" "1089" "1090"
[1091] "1091" "1092" "1093" "1094" "1095" "1096" "1097" "1098" "1099" "1100"
[1101] "1101" "1102" "1103" "1104" "1105" "1106" "1107" "1108" "1109" "1110"
[1111] "1111" "1112" "1113" "1114" "1115" "1116" "1117" "1118" "1119" "1120"
[1121] "1121" "1122" "1123" "1124" "1125" "1126" "1127" "1128" "1129" "1130"
[1131] "1131" "1132" "1133" "1134" "1135" "1136" "1137" "1138" "1139" "1140"
[1141] "1141" "1142" "1143" "1144" "1145" "1146" "1147" "1148" "1149" "1150"
[1151] "1151" "1152" "1153" "1154" "1155" "1156" "1157" "1158" "1159" "1160"
[1161] "1161" "1162" "1163" "1164" "1165" "1166" "1167" "1168" "1169" "1170"
[1171] "1171" "1172" "1173" "1174" "1175" "1176" "1177" "1178" "1179" "1180"
[1181] "1181" "1182" "1183" "1184" "1185" "1186" "1187" "1188" "1189" "1190"
[1191] "1191" "1192" "1193" "1194" "1195" "1196" "1197" "1198" "1199" "1200"
[1201] "1201" "1202" "1203" "1204" "1205" "1206" "1207" "1208" "1209" "1210"
[1211] "1211" "1212" "1213" "1214" "1215" "1216" "1217" "1218" "1219" "1220"
[1221] "1221" "1222" "1223" "1224" "1225" "1226" "1227" "1228" "1229" "1230"
[1231] "1231" "1232" "1233" "1234" "1235" "1236" "1237" "1238" "1239" "1240"
[1241] "1241" "1242" "1243" "1244" "1245" "1246" "1247" "1248" "1249" "1250"
[1251] "1251" "1252" "1253" "1254" "1255" "1256" "1257" "1258" "1259" "1260"
[1261] "1261" "1262" "1263" "1264" "1265" "1266" "1267" "1268" "1269" "1270"
[1271] "1271" "1272" "1273" "1274" "1275" "1276" "1277" "1278" "1279" "1280"
[1281] "1281" "1282" "1283" "1284" "1285" "1286" "1287" "1288" "1289" "1290"
[1291] "1291" "1292" "1293" "1294" "1295" "1296" "1297" "1298" "1299" "1300"
[1301] "1301" "1302" "1303" "1304" "1305" "1306" "1307" "1308" "1309" "1310"
[1311] "1311" "1312" "1313" "1314" "1315" "1316" "1317" "1318" "1319" "1320"
[1321] "1321" "1322" "1323" "1324" "1325" "1326" "1327" "1328" "1329" "1330"
[1331] "1331" "1332" "1333" "1334" "1335" "1336" "1337" "1338" "1339" "1340"
[1341] "1341" "1342" "1343" "1344" "1345" "1346" "1347" "1348" "1349" "1350"
[1351] "1351" "1352" "1353" "1354" "1355" "1356" "1357" "1358" "1359" "1360"
[1361] "1361" "1362" "1363" "1364" "1365" "1366" "1367" "1368" "1369" "1370"
[1371] "1371" "1372" "1373" "1374" "1375" "1376" "1377" "1378" "1379" "1380"
[1381] "1381" "1382" "1383" "1384" "1385" "1386" "1387" "1388" "1389" "1390"
[1391] "1391" "1392" "1393" "1394" "1395" "1396" "1397" "1398" "1399" "1400"
[1401] "1401" "1402" "1403" "1404" "1405" "1406" "1407" "1408" "1409" "1410"
[1411] "1411" "1412" "1413" "1414" "1415" "1416" "1417" "1418" "1419" "1420"
[1421] "1421" "1422" "1423" "1424" "1425" "1426" "1427" "1428" "1429" "1430"
[1431] "1431" "1432" "1433" "1434" "1435" "1436" "1437" "1438" "1439" "1440"
[1441] "1441" "1442" "1443" "1444" "1445" "1446" "1447" "1448" "1449" "1450"
[1451] "1451" "1452" "1453" "1454" "1455" "1456" "1457" "1458" "1459" "1460"
[1461] "1461" "1462" "1463" "1464" "1465" "1466" "1467" "1468" "1469" "1470"
[1471] "1471" "1472" "1473" "1474" "1475" "1476" "1477" "1478" "1479" "1480"
[1481] "1481" "1482" "1483" "1484" "1485" "1486" "1487" "1488" "1489" "1490"
[1491] "1491" "1492" "1493" "1494" "1495" "1496" "1497" "1498" "1499" "1500"
[1501] "1501" "1502" "1503" "1504" "1505" "1506" "1507" "1508" "1509" "1510"
[1511] "1511" "1512" "1513" "1514" "1515" "1516" "1517" "1518" "1519" "1520"
[1521] "1521" "1522" "1523" "1524" "1525" "1526" "1527" "1528" "1529" "1530"
[1531] "1531" "1532" "1533" "1534" "1535" "1536" "1537" "1538" "1539" "1540"
[1541] "1541" "1542" "1543" "1544" "1545" "1546" "1547" "1548" "1549" "1550"
[1551] "1551" "1552" "1553" "1554" "1555" "1556" "1557" "1558" "1559" "1560"
[1561] "1561" "1562" "1563" "1564" "1565" "1566" "1567" "1568" "1569" "1570"
[1571] "1571" "1572" "1573" "1574" "1575" "1576" "1577" "1578" "1579" "1580"
[1581] "1581" "1582" "1583" "1584" "1585" "1586" "1587" "1588" "1589" "1590"
[1591] "1591" "1592" "1593" "1594" "1595" "1596" "1597" "1598" "1599" "1600"
[1601] "1601" "1602" "1603" "1604" "1605" "1606" "1607" "1608" "1609" "1610"
[1611] "1611" "1612" "1613" "1614" "1615" "1616" "1617" "1618" "1619" "1620"
[1621] "1621" "1622" "1623" "1624" "1625" "1626" "1627" "1628" "1629" "1630"
[1631] "1631" "1632" "1633" "1634" "1635" "1636" "1637" "1638" "1639" "1640"
[1641] "1641" "1642" "1643" "1644" "1645" "1646" "1647" "1648" "1649" "1650"
[1651] "1651" "1652" "1653" "1654" "1655" "1656" "1657" "1658" "1659" "1660"
[1661] "1661" "1662" "1663" "1664" "1665" "1666" "1667" "1668" "1669" "1670"
[1671] "1671" "1672" "1673" "1674" "1675" "1676" "1677" "1678" "1679" "1680"
[1681] "1681" "1682" "1683" "1684" "1685" "1686" "1687" "1688" "1689" "1690"
[1691] "1691" "1692" "1693" "1694" "1695" "1696" "1697" "1698" "1699" "1700"
[1701] "1701" "1702" "1703" "1704" "1705" "1706" "1707" "1708" "1709" "1710"
[1711] "1711" "1712" "1713" "1714" "1715" "1716" "1717" "1718" "1719" "1720"
[1721] "1721" "1722" "1723" "1724" "1725" "1726" "1727" "1728" "1729" "1730"
[1731] "1731" "1732" "1733" "1734" "1735" "1736" "1737" "1738" "1739" "1740"
[1741] "1741" "1742" "1743" "1744" "1745" "1746" "1747" "1748" "1749" "1750"
[1751] "1751" "1752" "1753" "1754" "1755" "1756" "1757" "1758" "1759" "1760"
[1761] "1761" "1762" "1763" "1764" "1765" "1766" "1767" "1768" "1769" "1770"
[1771] "1771" "1772" "1773" "1774" "1775" "1776" "1777" "1778" "1779" "1780"
[1781] "1781" "1782" "1783" "1784" "1785" "1786" "1787" "1788" "1789" "1790"
[1791] "1791" "1792" "1793" "1794" "1795" "1796" "1797" "1798" "1799" "1800"
[1801] "1801" "1802" "1803" "1804" "1805" "1806" "1807" "1808" "1809" "1810"
[1811] "1811" "1812" "1813" "1814" "1815" "1816" "1817" "1818" "1819" "1820"
[1821] "1821" "1822" "1823" "1824" "1825" "1826" "1827" "1828" "1829" "1830"
[1831] "1831" "1832" "1833" "1834" "1835" "1836" "1837" "1838" "1839" "1840"
[1841] "1841" "1842" "1843" "1844" "1845" "1846" "1847" "1848" "1849" "1850"
[1851] "1851" "1852" "1853" "1854" "1855" "1856" "1857" "1858" "1859" "1860"
[1861] "1861" "1862" "1863" "1864" "1865" "1866" "1867" "1868" "1869" "1870"
[1871] "1871" "1872" "1873" "1874" "1875" "1876" "1877" "1878" "1879" "1880"
[1881] "1881" "1882" "1883" "1884" "1885" "1886" "1887" "1888" "1889" "1890"
[1891] "1891" "1892" "1893" "1894" "1895" "1896" "1897" "1898" "1899" "1900"
[1901] "1901" "1902" "1903" "1904" "1905" "1906" "1907" "1908" "1909" "1910"
[1911] "1911" "1912" "1913" "1914" "1915" "1916" "1917" "1918" "1919" "1920"
[1921] "1921" "1922" "1923" "1924" "1925" "1926" "1927" "1928" "1929" "1930"
[1931] "1931" "1932" "1933" "1934" "1935" "1936" "1937" "1938" "1939" "1940"
[1941] "1941" "1942" "1943" "1944" "1945" "1946" "1947" "1948" "1949" "1950"
[1951] "1951" "1952" "1953" "1954" "1955" "1956" "1957" "1958" "1959" "1960"
[1961] "1961" "1962" "1963" "1964" "1965" "1966" "1967" "1968" "1969" "1970"
[1971] "1971" "1972" "1973" "1974" "1975" "1976" "1977" "1978" "1979" "1980"
[1981] "1981" "1982" "1983" "1984" "1985" "1986" "1987" "1988" "1989" "1990"
[1991] "1991" "1992" "1993" "1994" "1995" "1996" "1997" "1998" "1999" "2000"
[2001] "2001" "2002" "2003" "2004" "2005" "2006" "2007" "2008" "2009" "2010"
[2011] "2011" "2012" "2013" "2014" "2015" "2016" "2017" "2018" "2019" "2020"
[2021] "2021" "2022" "2023" "2024" "2025" "2026" "2027" "2028" "2029" "2030"
[2031] "2031" "2032" "2033" "2034" "2035" "2036" "2037" "2038" "2039" "2040"
[2041] "2041" "2042" "2043" "2044" "2045" "2046" "2047" "2048" "2049" "2050"
[2051] "2051" "2052" "2053" "2054" "2055" "2056" "2057" "2058" "2059" "2060"
[2061] "2061" "2062" "2063" "2064" "2065" "2066" "2067" "2068" "2069" "2070"
[2071] "2071" "2072" "2073" "2074" "2075" "2076" "2077" "2078" "2079" "2080"
[2081] "2081" "2082" "2083" "2084" "2085" "2086" "2087" "2088" "2089" "2090"
[2091] "2091" "2092" "2093" "2094" "2095" "2096" "2097" "2098" "2099" "2100"
[2101] "2101" "2102" "2103" "2104" "2105" "2106" "2107" "2108" "2109" "2110"
[2111] "2111" "2112" "2113" "2114" "2115" "2116" "2117" "2118" "2119" "2120"
[2121] "2121" "2122" "2123" "2124" "2125" "2126" "2127" "2128" "2129" "2130"
[2131] "2131" "2132" "2133" "2134" "2135" "2136" "2137" "2138" "2139" "2140"
[2141] "2141" "2142" "2143" "2144" "2145" "2146" "2147" "2148" "2149" "2150"
[2151] "2151" "2152" "2153" "2154" "2155" "2156" "2157" "2158" "2159" "2160"
[2161] "2161" "2162" "2163" "2164" "2165" "2166" "2167" "2168" "2169" "2170"
[2171] "2171" "2172" "2173" "2174" "2175" "2176" "2177" "2178" "2179" "2180"
[2181] "2181" "2182" "2183" "2184" "2185" "2186" "2187" "2188" "2189" "2190"
[2191] "2191" "2192" "2193" "2194" "2195" "2196" "2197" "2198" "2199" "2200"
[2201] "2201" "2202" "2203" "2204" "2205" "2206" "2207" "2208" "2209" "2210"
[2211] "2211" "2212" "2213" "2214" "2215" "2216" "2217" "2218" "2219" "2220"
[2221] "2221" "2222" "2223" "2224" "2225" "2226" "2227" "2228" "2229" "2230"
[2231] "2231" "2232" "2233" "2234" "2235" "2236" "2237" "2238" "2239" "2240"
[2241] "2241" "2242" "2243" "2244" "2245" "2246" "2247" "2248" "2249" "2250"
[2251] "2251" "2252" "2253" "2254" "2255" "2256" "2257" "2258" "2259" "2260"
[2261] "2261" "2262" "2263" "2264" "2265" "2266" "2267" "2268" "2269" "2270"
[2271] "2271" "2272" "2273" "2274" "2275" "2276" "2277" "2278" "2279" "2280"
[2281] "2281" "2282" "2283" "2284" "2285" "2286" "2287" "2288" "2289" "2290"
[2291] "2291" "2292" "2293" "2294" "2295" "2296" "2297" "2298" "2299" "2300"
[2301] "2301" "2302" "2303" "2304" "2305" "2306" "2307" "2308" "2309" "2310"
[2311] "2311" "2312" "2313" "2314" "2315" "2316" "2317" "2318" "2319" "2320"
[2321] "2321" "2322" "2323" "2324" "2325" "2326" "2327" "2328" "2329" "2330"
[2331] "2331" "2332" "2333" "2334" "2335" "2336" "2337" "2338" "2339" "2340"
[2341] "2341" "2342" "2343" "2344" "2345" "2346" "2347" "2348" "2349" "2350"
[2351] "2351" "2352" "2353" "2354" "2355" "2356" "2357" "2358" "2359" "2360"
[2361] "2361" "2362" "2363" "2364" "2365" "2366" "2367" "2368" "2369" "2370"
[2371] "2371" "2372" "2373" "2374" "2375" "2376" "2377" "2378" "2379" "2380"
[2381] "2381" "2382" "2383" "2384" "2385" "2386" "2387" "2388" "2389" "2390"
[2391] "2391" "2392" "2393" "2394" "2395" "2396" "2397" "2398" "2399" "2400"
[2401] "2401" "2402" "2403" "2404" "2405" "2406" "2407" "2408" "2409" "2410"
[2411] "2411" "2412" "2413" "2414" "2415" "2416" "2417" "2418" "2419" "2420"
[2421] "2421" "2422" "2423" "2424" "2425" "2426" "2427" "2428" "2429" "2430"
[2431] "2431" "2432" "2433" "2434" "2435" "2436" "2437" "2438" "2439" "2440"
[2441] "2441" "2442" "2443" "2444" "2445" "2446" "2447" "2448" "2449" "2450"
[2451] "2451" "2452" "2453" "2454" "2455" "2456" "2457" "2458" "2459" "2460"
[2461] "2461" "2462" "2463" "2464" "2465" "2466" "2467" "2468" "2469" "2470"
[2471] "2471" "2472" "2473" "2474" "2475" "2476" "2477" "2478" "2479" "2480"
[2481] "2481" "2482" "2483" "2484" "2485" "2486" "2487" "2488"

[[2]]
[1] "GuloGulo_AllData_RUN1_SRE" "GuloGulo_AllData_RUN1_RF" 

> 
> # 6. Transform data.frame into array
> myProjArray <- DF_to_ARRAY(myProjDF)
> class(myProjArray)
[1] "array"
> dim(myProjArray)
[1] 2488    2    1    1
> dimnames(myProjArray)
[[1]]
NULL

[[2]]
[1] "SRE" "RF" 

[[3]]
[1] "RUN1"

[[4]]
[1] "AllData"

> 
> 
> 
> 
> cleanEx()
> nameEx("FilteringTransformation")
> ### * FilteringTransformation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FilteringTransformation
> ### Title: Convert species' probability of occurrence into binary
> ###   presence-absence data using a predefined threshold
> ### Aliases: FilteringTransformation FilteringTransformation-methods
> ###   FilteringTransformation,data.frame-method
> ###   FilteringTransformation,matrix-method
> ###   FilteringTransformation,numeric-method
> ###   FilteringTransformation,array-method
> ###   FilteringTransformation,RasterBrick-method
> ###   FilteringTransformation,RasterLayer-method
> ###   FilteringTransformation,RasterStack-method
> 
> ### ** Examples
> 
> xx <- rnorm(50,10)
> yy <- FilteringTransformation(xx, 10)
> 
> cbind(xx,yy)
             xx       yy
 [1,]  9.373546  0.00000
 [2,] 10.183643 10.18364
 [3,]  9.164371  0.00000
 [4,] 11.595281 11.59528
 [5,] 10.329508 10.32951
 [6,]  9.179532  0.00000
 [7,] 10.487429 10.48743
 [8,] 10.738325 10.73832
 [9,] 10.575781 10.57578
[10,]  9.694612  0.00000
[11,] 11.511781 11.51178
[12,] 10.389843 10.38984
[13,]  9.378759  0.00000
[14,]  7.785300  0.00000
[15,] 11.124931 11.12493
[16,]  9.955066  0.00000
[17,]  9.983810  0.00000
[18,] 10.943836 10.94384
[19,] 10.821221 10.82122
[20,] 10.593901 10.59390
[21,] 10.918977 10.91898
[22,] 10.782136 10.78214
[23,] 10.074565 10.07456
[24,]  8.010648  0.00000
[25,] 10.619826 10.61983
[26,]  9.943871  0.00000
[27,]  9.844204  0.00000
[28,]  8.529248  0.00000
[29,]  9.521850  0.00000
[30,] 10.417942 10.41794
[31,] 11.358680 11.35868
[32,]  9.897212  0.00000
[33,] 10.387672 10.38767
[34,]  9.946195  0.00000
[35,]  8.622940  0.00000
[36,]  9.585005  0.00000
[37,]  9.605710  0.00000
[38,]  9.940687  0.00000
[39,] 11.100025 11.10003
[40,] 10.763176 10.76318
[41,]  9.835476  0.00000
[42,]  9.746638  0.00000
[43,] 10.696963 10.69696
[44,] 10.556663 10.55666
[45,]  9.311244  0.00000
[46,]  9.292505  0.00000
[47,] 10.364582 10.36458
[48,] 10.768533 10.76853
[49,]  9.887654  0.00000
[50,] 10.881108 10.88111
> 
> 
> 
> cleanEx()
> nameEx("Find.Optim.Stat")
> ### * Find.Optim.Stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Find.Optim.Stat
> ### Title: Calculate the best score according to a given evaluation method
> ### Aliases: Find.Optim.Stat
> ### Keywords: evaluation models options
> 
> ### ** Examples
> 
>   a <- sample(c(0,1),100, replace=TRUE)
> 
>   ##' random drawing
>   b <- runif(100,min=0,max=1000)
>   Find.Optim.Stat(Stat='TSS',
+                   Fit=b,
+                   Obs=a)
    best.stat cutoff sensitivity specificity
TSS 0.1204482    528    54.90196    57.14286
> 
>   ##' biased drawing
>   BiasedDrawing <- function(x, m1=300, sd1=200, m2=700, sd2=200){
+     return(ifelse(x<0.5, rnorm(1,m1,sd1), rnorm(1,m2,sd2)))
+   }
> 
>   c <- sapply(a,BiasedDrawing)
> 
>   Find.Optim.Stat(Stat='TSS',
+                   Fit=c,
+                   Obs=a,
+                   Nb.thresh.test = 100)
    best.stat cutoff sensitivity specificity
TSS  0.757503    444    94.11765    81.63265
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Print_Default_ModelingOptions")
> ### * Print_Default_ModelingOptions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Print_Default_ModelingOptions
> ### Title: Get default values of BIOMOD inner models' options
> ### Aliases: Print_Default_ModelingOptions
> ### Keywords: models options
> 
> ### ** Examples
> 
> # print default models options
> Print_Default_ModelingOptions()

 Defaut modeling options. copy, change what you want paste it as arg to BIOMOD_ModelingOptions


-=-=-=-=-=-=-=-=-=-=-=-=-=-=  'BIOMOD.Model.Options'  -=-=-=-=-=-=-=-=-=-=-=-=-=-=


GLM = list( type = 'quadratic',
            interaction.level = 0,
            myFormula = NULL,
            test = 'AIC',
            family = binomial(link = 'logit'),
            mustart = 0.5,
            control = glm.control(epsilon = 1e-08, maxit = 50, trace = FALSE
) ),


GBM = list( distribution = 'bernoulli',
            n.trees = 2500,
            interaction.depth = 7,
            n.minobsinnode = 5,
            shrinkage = 0.001,
            bag.fraction = 0.5,
            train.fraction = 1,
            cv.folds = 3,
            keep.data = FALSE,
            verbose = FALSE,
            perf.method = 'cv',
            n.cores = 1),

GAM = list( algo = 'GAM_mgcv',
            type = 's_smoother',
            k = -1,
            interaction.level = 0,
            myFormula = NULL,
            family = binomial(link = 'logit'),
            method = 'GCV.Cp',
            optimizer = c('outer','newton'),
            select = FALSE,
            knots = NULL,
            paraPen = NULL,
            control = list(nthreads = 1, irls.reg = 0, epsilon = 1e-07
, maxit = 200, trace = FALSE, mgcv.tol = 1e-07, mgcv.half = 15
, rank.tol = 1.49011611938477e-08
, nlm = list(ndigit=7, gradtol=1e-06, stepmax=2, steptol=1e-04, iterlim=200, check.analyticals=0)
, optim = list(factr=1e+07)
, newton = list(conv.tol=1e-06, maxNstep=5, maxSstep=2, maxHalf=30, use.svd=0)
, outerPIsteps = 0, idLinksBases = TRUE, scalePenalty = TRUE, efs.lspmax = 15
, efs.tol = 0.1, keepData = FALSE, scale.est = fletcher, edge.correct = FALSE
) ),


CTA = list( method = 'class',
            parms = 'default',
            cost = NULL,
            control = list(xval = 5, minbucket = 5, minsplit = 5, cp = 0.001
, maxdepth = 25) ),


ANN = list( NbCV = 5,
            size = NULL,
            decay = NULL,
            rang = 0.1,
            maxit = 200),

SRE = list( quant = 0.025),

FDA = list( method = 'mars',
            add_args = NULL),

MARS = list( type = 'simple',
             interaction.level = 0,
             myFormula = NULL,
             nk = NULL,
             penalty = 2,
             thresh = 0.001,
             nprune = NULL,
             pmethod = 'backward'),

RF = list( do.classif = TRUE,
           ntree = 500,
           mtry = 'default',
           nodesize = 5,
           maxnodes = NULL),

MAXENT.Phillips = list( path_to_maxent.jar = '/Users/b780620/Desktop/devel/gbm/revdep/checks.noindex/biomod2/new/biomod2.Rcheck',
               memory_allocated = 512,
               background_data_dir = 'default',
               maximumbackground = 'default',
               maximumiterations = 200,
               visible = FALSE,
               linear = TRUE,
               quadratic = TRUE,
               product = TRUE,
               threshold = TRUE,
               hinge = TRUE,
               lq2lqptthreshold = 80,
               l2lqthreshold = 10,
               hingethreshold = 15,
               beta_threshold = -1,
               beta_categorical = -1,
               beta_lqp = -1,
               beta_hinge = -1,
               betamultiplier = 1,
               defaultprevalence = 0.5),

 MAXENT.Phillips.2 = 
   list(
     myFormula = NULL,
     regmult = 1,
     regfun = <function>
   )
)
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> 
> 
> cleanEx()
> nameEx("ProbDensFunc")
> ### * ProbDensFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ProbDensFunc
> ### Title: Probability Density Function
> ### Aliases: ProbDensFunc
> ### Keywords: distribution optimize
> 
> ### ** Examples
> 
> ## Not run: 
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"), row.names = 1)
> ##D head(DataSpecies)
> ##D 
> ##D ##' the name of studied species
> ##D myRespName <- 'GuloGulo'
> ##D 
> ##D ##' the presence/absences data for our species
> ##D myResp <- as.numeric(DataSpecies[,myRespName])
> ##D 
> ##D ##' remove all 0 from response vector to work with
> ##D ##' presence only data (Pseudo Absences selections)
> ##D rm_id <- which(myResp==0)
> ##D myResp <- myResp[-rm_id]
> ##D 
> ##D 
> ##D ##' the XY coordinates of species data
> ##D myRespXY <- DataSpecies[-rm_id,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D 
> ##D ##' Environmental variables extracted from BIOCLIM
> ##D myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd",
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio4.grd",
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio7.grd",
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio11.grd",
> ##D                              package="biomod2"),
> ##D                 system.file( "external/bioclim/current/bio12.grd",
> ##D                              package="biomod2"))
> ##D 
> ##D ##' 1. Formatting Data
> ##D myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
> ##D                                      expl.var = myExpl,
> ##D                                      resp.xy = myRespXY,
> ##D                                      resp.name = myRespName,
> ##D                                      PA.nb.rep=3)
> ##D 
> ##D ##' 2. Defining Models Options using default options.
> ##D myBiomodOption <- BIOMOD_ModelingOptions()
> ##D 
> ##D ##' 3. Doing Modelisation
> ##D myBiomodModelOut <- BIOMOD_Modeling( myBiomodData,
> ##D                                      models = c('CTA','RF','GLM','GAM','ANN','MARS'),
> ##D                                      models.options = myBiomodOption,
> ##D                                      NbRunEval=5,
> ##D                                      DataSplit=70,
> ##D                                      Prevalence=0.5,
> ##D                                      models.eval.meth = c('TSS'),
> ##D                                      do.full.models = FALSE,
> ##D                                      rescal.all.models=T,
> ##D                                      modeling.id='test')
> ##D 
> ##D ##' 4. Build ensemble-models that will be taken as reference
> ##D myBiomodEM <- BIOMOD_EnsembleModeling( modeling.output = myBiomodModelOut,
> ##D                                        chosen.models = 'all',
> ##D                                        em.by = 'all',
> ##D                                        eval.metric = c('TSS'),
> ##D                                        eval.metric.quality.threshold = c(0.7),
> ##D                                        prob.mean = TRUE,
> ##D                                        prob.median = TRUE)
> ##D 
> ##D ##' 5. Projection on future environmental conditions
> ##D 
> ##D ###' load future environmental conditions from biomod2 package
> ##D myExpl_fut <- raster::stack( system.file( "external/bioclim/future/bio3.grd",
> ##D                                   package="biomod2"),
> ##D                      system.file( "external/bioclim/future/bio4.grd",
> ##D                                   package="biomod2"),
> ##D                      system.file( "external/bioclim/future/bio7.grd",
> ##D                                   package="biomod2"),
> ##D                      system.file( "external/bioclim/future/bio11.grd",
> ##D                                   package="biomod2"),
> ##D                      system.file( "external/bioclim/future/bio12.grd",
> ##D                                   package="biomod2"))
> ##D 
> ##D myBiomodProjection <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
> ##D                                         new.env = myExpl_fut,
> ##D                                         proj.name = 'future',
> ##D                                         selected.models = 'all',
> ##D                                         binary.meth = 'TSS',
> ##D                                         compress = FALSE,
> ##D                                         build.clamping.mask = TRUE)
> ##D 
> ##D BIOMOD_EnsembleForecasting(projection.output=myBiomodProjection,
> ##D                            EM.output=myBiomodEM,
> ##D                            binary.meth='TSS')
> ##D 
> ##D ##' 6. load binary projections
> ##D consensusBin <- raster::stack('GuloGulo/proj_future/proj_future_GuloGulo_ensemble_TSSbin.grd')
> ##D projectionsBin <- raster::stack('GuloGulo/proj_future/proj_future_GuloGulo_TSSbin.grd')
> ##D 
> ##D ##' 7. build a ref state based on ensemble-models
> ##D ref <- sampleRandom(subset(consensusBin, 1, drop=T), size=5000, sp=T, na.rm=T)
> ##D 
> ##D ##' 8. autoatic creation of groups matrix
> ##D find_groups <- function(diff_by_pix){
> ##D   data.set <- sapply(names(diff_by_pix),biomod2:::.extractModelNamesInfo,info='data.set')
> ##D   run.eval <- sapply(names(diff_by_pix),biomod2:::.extractModelNamesInfo,info='run.eval')
> ##D   models <- sapply(names(diff_by_pix),biomod2:::.extractModelNamesInfo,info='models')
> ##D   return(rbind(data.set,run.eval,models))
> ##D }
> ##D 
> ##D groups <- find_groups(projectionsBin)
> ##D 
> ##D ##' 9. plot ProbDensFunct graphs
> ##D ProbDensFunc(initial = ref,
> ##D              projections = projectionsBin,
> ##D              plothist=TRUE,
> ##D              cvsn=TRUE,
> ##D              groups=groups,
> ##D              resolution=2,
> ##D              filename=NULL,
> ##D              lim=c(0.5,0.8,0.95))
> ##D 
> ##D ###' 3 plots should be produced.. Should be convenient to save it within a device
> ##D ###' supporting multiple plots.
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("SampleMat2")
> ### * SampleMat2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SampleMat2
> ### Title: Sample binary vector
> ### Aliases: SampleMat2
> ### Keywords: formula models options
> 
> ### ** Examples
> 
> a <- sample(c(0,1),100, replace=TRUE)
> SampleMat2(ref=a, ratio=0.7)
$calibration
 [1] 45 51 62 44 57 59 98 94 37 93 99 27 53 47 18 40 31  9  2 70 67 46 77 54 69
[26] 72 58 65 80 17 82 16 10 30 66 88 15 49 35 92 33 96  4 21 73 13  3 84 79 55
[51]  8 89 20 95 50 12 60 78 36 97 52 74  7 38  1  6 85 25 75 22

$evaluation
 [1]   5  11  14  19  23  24  26  28  29  32  34  39  41  42  43  48  56  61  63
[20]  64  68  71  76  81  83  86  87  90  91 100

> 
> 
> 
> 
> cleanEx()
> nameEx("biomod2_model-class")
> ### * biomod2_model-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biomod2_model-class
> ### Title: biomod2 models objects class and functions
> ### Aliases: biomod2_model-class biomod2_model biomod2_ensemble_model-class
> ###   biomod2_ensemble_model show,biomod2_model-method get_formal_model
> ###   get_formal_model,biomod2_model-method get_scaling_model
> ###   get_scaling_model,biomod2_model-method check_data_range get_var_range
> ###   get_var_type ANN_biomod2_model-class ANN_biomod2_model
> ###   predict,ANN_biomod2_model-method CTA_biomod2_model-class
> ###   CTA_biomod2_model predict,CTA_biomod2_model-method
> ###   FDA_biomod2_model-class FDA_biomod2_model
> ###   predict,FDA_biomod2_model-method GAM_biomod2_model-class
> ###   GAM_biomod2_model predict,GAM_biomod2_model-method
> ###   GLM_biomod2_model-class GLM_biomod2_model
> ###   predict,GLM_biomod2_model-method GBM_biomod2_model-class
> ###   GBM_biomod2_model predict,GBM_biomod2_model-method
> ###   MARS_biomod2_model-class MARS_biomod2_model
> ###   predict,MARS_biomod2_model-method MAXENT.Phillips_biomod2_model-class
> ###   MAXENT.Phillips_biomod2_model
> ###   predict,MAXENT.Phillips_biomod2_model-method
> ###   MAXENT.Phillips.2_biomod2_model-class MAXENT.Phillips.2_biomod2_model
> ###   predict,MAXENT.Phillips.2_biomod2_model-method RF_biomod2_model-class
> ###   RF_biomod2_model predict,RF_biomod2_model-method
> ###   SRE_biomod2_model-class SRE_biomod2_model
> ###   predict,SRE_biomod2_model-method EMca_biomod2_model-class
> ###   EMca_biomod2_model predict,EMca_biomod2_model-method
> ###   EMci_biomod2_model-class EMci_biomod2_model
> ###   predict,EMci_biomod2_model-method EMcv_biomod2_model-class
> ###   EMcv_biomod2_model predict,EMcv_biomod2_model-method
> ###   EMmean_biomod2_model-class EMmean_biomod2_model
> ###   predict,EMmean_biomod2_model-method EMmedian_biomod2_model-class
> ###   EMmedian_biomod2_model predict,EMmedian_biomod2_model-method
> ###   EMwmean_biomod2_model-class EMwmean_biomod2_model
> ###   predict,EMwmean_biomod2_model-method
> ### Keywords: models predict
> 
> ### ** Examples
> 
> showClass("ANN_biomod2_model")
Class "ANN_biomod2_model" [package "biomod2"]

Slots:
                                                            
Name:                  model_name                model_class
Class:                  character                  character
                                                            
Name:               model_options                      model
Class:                       list                        ANY
                                                            
Name:               scaling_model                  resp_name
Class:                        ANY                  character
                                                            
Name:              expl_var_names              expl_var_type
Class:                  character                  character
                                                            
Name:              expl_var_range           model_evaluation
Class:                       list                     matrix
                                 
Name:  model_variables_importance
Class:                     matrix

Extends: "biomod2_model"
> 
> 
> 
> cleanEx()
> nameEx("calculate.stat")
> ### * calculate.stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate.stat
> ### Title: Calculate evaluation metrics based on a misclassification table
> ### Aliases: calculate.stat
> ### Keywords: models formula options
> 
> ### ** Examples
> 
>   a <- sample(c(0,1),100, replace=TRUE)
>   b <- sample(c(0,1),100, replace=TRUE)
>   
>   miscTab_aa <- table(a,a)
>   miscTab_ab <- table(a,b)
>   
>   # perfect score
>   calculate.stat( miscTab_aa, stat='TSS')
[1] 1
>   # random score
>   calculate.stat( miscTab_ab, stat='TSS')
[1] -0.03894018
>   
> 
> 
> 
> cleanEx()
> nameEx("evaluate")
> ### * evaluate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate
> ### Title: biomod2 modelling outputs evaluation
> ### Aliases: evaluate
> ### Keywords: evaluation models score
> 
> ### ** Examples
> 
> 
> 
> # species occurrences
> DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
+                                     package="biomod2"), row.names = 1)
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> # the name of studied species
> myRespName <- 'GuloGulo'
> 
> # the presence/absences data for our species 
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> # the XY coordinates of species data
> myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> 
> 
> # Environmental variables extracted from BIOCLIM (bio_3, bio_4, bio_7, bio_11 & bio_12)
> myExpl = raster::stack( system.file( "external/bioclim/current/bio3.grd", 
+                      package="biomod2"),
+                 system.file( "external/bioclim/current/bio4.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio7.grd", 
+                              package="biomod2"),  
+                 system.file( "external/bioclim/current/bio11.grd", 
+                              package="biomod2"), 
+                 system.file( "external/bioclim/current/bio12.grd", 
+                              package="biomod2"))
> 
> # 1. Formatting Data
> myBiomodData <- BIOMOD_FormatingData(resp.var = myResp,
+                                      expl.var = myExpl,
+                                      resp.xy = myRespXY,
+                                      resp.name = myRespName)

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> # 2. Defining Models Options using default options.
> myBiomodOption <- BIOMOD_ModelingOptions()
> 
> # 3. Doing Modelisation
> 
> myBiomodModelOut <- BIOMOD_Modeling( myBiomodData, 
+                                      models = c('SRE','CTA','RF'), 
+                                      models.options = myBiomodOption, 
+                                      NbRunEval=1, 
+                                      DataSplit=80, 
+                                      Yweights=NULL, 
+                                      VarImport=3, 
+                                      models.eval.meth = c('TSS'),
+                                      SaveObj = TRUE,
+                                      rescal.all.models = FALSE,
+                                      do.full.models = FALSE,
+                                      modeling.id='test')


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 1
Models selected : SRE CTA RF 

Total number of model runs : 3 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

Model=Classification tree 
	 5 Fold Cross-Validation
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
	Evaluating Predictor Contributions... 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
>                                      
> # 4. Evaluate model over another dataset (here the full one)
> 
> ## creation of suitable dataset
> data <- cbind(GuloGulo=get_formal_data(myBiomodModelOut,'resp.var'), 
+               get_formal_data(myBiomodModelOut,'expl.var'))
> 
> ## evaluation
> evaluate(myBiomodModelOut, data=data, stat=c('ROC','TSS'))
$GuloGulo_AllData_RUN1_SRE
    Evaluating.data Cutoff Sensitivity Specificity
ROC       0.8668332    500     88.1997    85.16694
TSS       0.7336664    495     88.1997    85.16694

$GuloGulo_AllData_RUN1_CTA
    Evaluating.data Cutoff Sensitivity Specificity
ROC       0.9867407  266.5    96.67171    96.00438
TSS       0.9267609  263.0    96.67171    96.00438

$GuloGulo_AllData_RUN1_RF
    Evaluating.data Cutoff Sensitivity Specificity
ROC       0.9980015    363    99.09228    98.30323
TSS       0.9739551    359    99.09228    98.30323

> 
> 
> 
> 
> cleanEx()
> nameEx("full_shuffling")
> ### * full_shuffling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: full_suffling
> ### Title: data set shuffling tool
> ### Aliases: full_suffling
> ### Keywords: shuffle random importance
> 
> ### ** Examples
> 
> xx <- matrix(rep(1:10,3),10,3)
> full_suffling(xx,c(1,2))
      [,1] [,2] [,3]
 [1,]    7    3    1
 [2,]    5    2    2
 [3,]    6    1    3
 [4,]    4    7    4
 [5,]   10    6    5
 [6,]    9    9    6
 [7,]    2    4    7
 [8,]    1   10    8
 [9,]    3    8    9
[10,]    8    5   10
> 
> 
> 
> cleanEx()
> nameEx("getStatOptimValue")
> ### * getStatOptimValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getStatOptimValue
> ### Title: get the optimal score of evaluation statistical metrics
> ### Aliases: getStatOptimValue
> ### Keywords: models formula options
> 
> ### ** Examples
> 
>   getStatOptimValue('TSS')
[1] 1
>   getStatOptimValue('KAPPA')
[1] 1
>   getStatOptimValue('POFD')
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("level.plot")
> ### * level.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: level.plot
> ### Title: Plot 2-dimensional data for visualizing distribution of species
> ###   or environment
> ### Aliases: level.plot
> ### Keywords: plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # species occurrences
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"), row.names = 1)
> ##D 
> ##D # the name of studied species
> ##D myRespName <- 'GuloGulo'
> ##D 
> ##D # the presence/absences data for our species 
> ##D myResp <- as.numeric(DataSpecies[,myRespName])
> ##D 
> ##D # the XY coordinates of species data
> ##D myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D 
> ##D level.plot(data.in=myResp, XY=myRespXY)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("makeFormula")
> ### * makeFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: makeFormula
> ### Title: Standardized formula maker
> ### Aliases: makeFormula
> ### Keywords: formula models options
> 
> ### ** Examples
> 
> ##' create simulated data
> myResp <- sample(c(0, 1), 20, replace = TRUE)
> myExpl <- 
+   matrix(
+     runif(60), 
+     ncol = 3, 
+     dimnames=list(NULL, c('var1', 'var2', 'var3'))
+   )
> 
> ##' create a formula
> myFormula <- 
+   makeFormula( 
+     respName = 'myResp',
+     explVar = head(myExpl),
+     type = 'quadratic',
+     interaction.level = 0
+   )
>   
> ##' show formula created
> myFormula
myResp ~ 1 + var1 + I(var1^2) + var2 + I(var2^2) + var3 + I(var3^2)
<environment: 0x7fd3fef1a020>
> 
> 
> 
> 
> cleanEx()
> nameEx("models_scores_graph")
> ### * models_scores_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: models_scores_graph
> ### Title: Produce models evaluation bi-dimensional graph
> ### Aliases: models_scores_graph
> ### Keywords: evaluation scores graph
> 
> ### ** Examples
> 
> 
> ## this example is based on BIOMOD_Modeling function example
> example(BIOMOD_Modeling)

BIOMOD> ##' species occurrences
BIOMOD> DataSpecies <- 
BIOMOD+   read.csv(
BIOMOD+     system.file(
BIOMOD+       "external/species/mammals_table.csv",
BIOMOD+       package="biomod2"
BIOMOD+     )
BIOMOD+   )

BIOMOD> head(DataSpecies)
  X X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1 1   -94.5 82.00001                0        0            0                 0
2 2   -91.5 82.00001                0        1            0                 0
3 3   -88.5 82.00001                0        1            0                 0
4 4   -85.5 82.00001                0        1            0                 0
5 5   -82.5 82.00001                0        1            0                 0
6 6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0

BIOMOD> ##' the name of studied species
BIOMOD> myRespName <- 'GuloGulo'

BIOMOD> ##' the presence/absences data for our species
BIOMOD> myResp <- as.numeric(DataSpecies[, myRespName])

BIOMOD> ##' the XY coordinates of species data
BIOMOD> myRespXY <- DataSpecies[, c("X_WGS84", "Y_WGS84")]

BIOMOD> ##' Environmental variables extracted from BIOCLIM (bio_3, 
BIOMOD> ##' bio_4, bio_7, bio_11 & bio_12)
BIOMOD> myExpl <- 
BIOMOD+   raster::stack(
BIOMOD+     system.file("external/bioclim/current/bio3.grd", package = "biomod2"),
BIOMOD+     system.file("external/bioclim/current/bio4.grd", package = "biomod2"),
BIOMOD+     system.file("external/bioclim/current/bio7.grd", package = "biomod2"),
BIOMOD+     system.file("external/bioclim/current/bio11.grd", package = "biomod2"),
BIOMOD+     system.file("external/bioclim/current/bio12.grd", package = "biomod2")
BIOMOD+   )

BIOMOD> ##' 1. Formatting Data
BIOMOD> myBiomodData <- 
BIOMOD+   BIOMOD_FormatingData(
BIOMOD+     resp.var = myResp,
BIOMOD+     expl.var = myExpl,
BIOMOD+     resp.xy = myRespXY,
BIOMOD+     resp.name = myRespName
BIOMOD+   )

-=-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Data Formating -=-=-=-=-=-=-=-=-=-=-=-=-=-=

> No pseudo absences selection !
      ! No data has been set aside for modeling evaluation
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

BIOMOD> ##' 2. Defining Models Options using default options.
BIOMOD> myBiomodOption <- BIOMOD_ModelingOptions()

BIOMOD> ##' 3. Doing Modelisation
BIOMOD> myBiomodModelOut <- 
BIOMOD+   BIOMOD_Modeling(
BIOMOD+     myBiomodData,
BIOMOD+     models = c('SRE','RF'),
BIOMOD+     models.options = myBiomodOption,
BIOMOD+     NbRunEval = 2,
BIOMOD+     DataSplit = 80,
BIOMOD+     VarImport = 0,
BIOMOD+     models.eval.meth = c('TSS','ROC'),
BIOMOD+     do.full.models = FALSE,
BIOMOD+     modeling.id = "test"
BIOMOD+   )


Loading required library...

Checking Models arguments...

Creating suitable Workdir...

	> No weights : all observations will have the same weight


-=-=-=-=-=-=-=-=-=-=-=-=-= GuloGulo Modeling Summary -=-=-=-=-=-=-=-=-=-=-=-=-=

 5  environmental variables ( bio3 bio4 bio7 bio11 bio12 )
Number of evaluation repetitions : 2
Models selected : SRE RF 

Total number of model runs : 4 

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


-=-=-=- Run :  GuloGulo_AllData 


-=-=-=--=-=-=- GuloGulo_AllData_RUN1 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...

-=-=-=--=-=-=- GuloGulo_AllData_RUN2 

Model=Surface Range Envelop
	Evaluating Model stuff...
Model=Breiman and Cutler's random forests for classification and regression
	Evaluating Model stuff...
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Done -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

BIOMOD> ##' print a summary of modeling stuff
BIOMOD> myBiomodModelOut

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= BIOMOD.models.out -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Modeling id : test

Species modeled : GuloGulo

Considered variables : bio3 bio4 bio7 bio11 bio12


Computed Models :  GuloGulo_AllData_RUN1_SRE GuloGulo_AllData_RUN1_RF 
GuloGulo_AllData_RUN2_SRE GuloGulo_AllData_RUN2_RF


Failed Models :  none

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
> 
> ## we will need ggplot2 package to produce our custom version of the graphs
> require(ggplot2)
Loading required package: ggplot2
> 
> ## plot evaluation models score graph
> 
> ### by models
> gg1 <- models_scores_graph( myBiomodModelOut,
+                             by = 'models',
+                             metrics = c('ROC','TSS') )
> ## we see a influence of model selected on models capabilities
> ## e.g. RF are much better than SRE
> 
> ### by cross validation run
> gg2 <- models_scores_graph( myBiomodModelOut,
+                             by = 'cv_run',
+                             metrics = c('ROC','TSS') )
> ## there is no difference in models quality if we focus on 
> ## cross validation sampling
> 
> ### some graphical customisations
> gg1_custom <- 
+   gg1 + 
+   ggtitle("Diff between RF and SRE evaluation scores") + ## add title
+   scale_colour_manual(values=c("green", "blue")) ## change colors
> 
> gg1_custom
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("multiple.plot")
> ### * multiple.plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multiple.plot
> ### Title: Plot and compare prediction maps within BIOMOD
> ### Aliases: multiple.plot
> ### Keywords: plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # species occurrences
> ##D DataSpecies <- read.csv(system.file("external/species/mammals_table.csv",
> ##D                                     package="biomod2"), row.names = 1)
> ##D 
> ##D # the name of studied species
> ##D myRespName <- c("ConnochaetesGnou", "GuloGulo", "PantheraOnca", 
> ##D                 "PteropusGiganteus", "TenrecEcaudatus", "VulpesVulpes")
> ##D 
> ##D # the presence/absences data for our species 
> ##D myResp <- DataSpecies[,myRespName]
> ##D 
> ##D # the XY coordinates of species data
> ##D myRespXY <- DataSpecies[,c("X_WGS84","Y_WGS84")]
> ##D 
> ##D multiple.plot(Data = myResp,
> ##D               coor = myRespCoord )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("randomise_data")
> ### * randomise_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: randomise_data
> ### Title: data set shuffling tool
> ### Aliases: randomise_data
> ### Keywords: suffle random importance
> 
> ### ** Examples
> 
> xx <- data.frame(a=1:10,b=11:20,c=21:30)
> randomise_data(data=xx, variable='b', method='full_rand')
    a  b  c
1   1 15 21
2   2 14 22
3   3 13 23
4   4 18 24
5   5 16 25
6   6 19 26
7   7 11 27
8   8 12 28
9   9 20 29
10 10 17 30
> 
> 
> 
> cleanEx()
> nameEx("response.plot2")
> ### * response.plot2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: response.plot2
> ### Title: Function for for plotting predicted responses from species
> ###   distribution models in 2 or 3 dimensions
> ### Aliases: response.plot2
> ### Keywords: models multivariate nonlinear nonparametric plot regression
> ###   tree
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ##' species occurrences
> ##D DataSpecies <- 
> ##D   read.csv(
> ##D     system.file("external/species/mammals_table.csv", package="biomod2"), 
> ##D     row.names = 1
> ##D   )
> ##D head(DataSpecies)
> ##D ##' the name of studied species
> ##D myRespName <- 'VulpesVulpes'
> ##D     
> ##D ##' the presence/absences data for our species 
> ##D myResp <- as.numeric(DataSpecies[, myRespName])
> ##D     
> ##D ##' the XY coordinates of species data
> ##D myRespXY <- DataSpecies[, c("X_WGS84", "Y_WGS84")]
> ##D 
> ##D myExpl <- 
> ##D   raster::stack(
> ##D     system.file("external/bioclim/current/bio3.grd", package = "biomod2"),
> ##D     system.file("external/bioclim/current/bio4.grd", package = "biomod2"),
> ##D     system.file("external/bioclim/current/bio7.grd", package = "biomod2"),
> ##D     system.file("external/bioclim/current/bio11.grd", package = "biomod2"),
> ##D     system.file("external/bioclim/current/bio12.grd", package = "biomod2")
> ##D   )
> ##D 
> ##D ##' 1. Formatting Data
> ##D myBiomodData <- 
> ##D   BIOMOD_FormatingData(
> ##D     resp.var = myResp,
> ##D     expl.var = myExpl,
> ##D     resp.xy = myRespXY,
> ##D     resp.name = myRespName
> ##D   )
> ##D 
> ##D ##' 2. Defining Models Options using default options.
> ##D myBiomodOption <- BIOMOD_ModelingOptions()
> ##D 
> ##D ##' 3. Doing Modelisation
> ##D myBiomodModelOut <- 
> ##D   BIOMOD_Modeling(
> ##D     myBiomodData,
> ##D     models = c('GLM','RF'),
> ##D     models.options = myBiomodOption,
> ##D     NbRunEval = 2,
> ##D     DataSplit = 80,
> ##D     VarImport = 0,
> ##D     models.eval.meth = c('TSS','ROC'),
> ##D     do.full.models = FALSE,
> ##D     modeling.id = "test"
> ##D   )
> ##D ##' 4. Plot response curves
> ##D ##' 4.1 Load the models for which we want to extract the predicted
> ##D ##' response curves
> ##D myGLMs <- BIOMOD_LoadModels(myBiomodModelOut, models = 'GLM')
> ##D     
> ##D ##' 4.2 plot 2D response plots
> ##D myRespPlot2D <- 
> ##D   response.plot2(
> ##D     models = myGLMs,
> ##D     Data = get_formal_data(myBiomodModelOut, 'expl.var'),
> ##D     show.variables = get_formal_data(myBiomodModelOut,'expl.var.names'),
> ##D     do.bivariate = FALSE,
> ##D     fixed.var.metric = 'median',
> ##D     col = c("blue", "red"),
> ##D     legend = TRUE,
> ##D     data_species = get_formal_data(myBiomodModelOut, 'resp.var')
> ##D   )
> ##D     
> ##D ##' 4.2 plot 3D response plots
> ##D ###' here only for a lone model (i.e "VulpesVulpes_PA1_AllData_GLM")
> ##D myRespPlot3D <- 
> ##D   response.plot2(
> ##D   models = myGLMs[1],
> ##D   Data = get_formal_data(myBiomodModelOut, 'expl.var'), 
> ##D   show.variables = get_formal_data(myBiomodModelOut, 'expl.var.names'),
> ##D   do.bivariate = TRUE,
> ##D   fixed.var.metric = 'median',
> ##D   data_species = get_formal_data(myBiomodModelOut, 'resp.var'),
> ##D   display_title = FALSE
> ##D )
> ##D     
> ##D ##' all the values used to produce this plot are stored into the
> ##D ##' returned object you can redo plots by yourself and customised 
> ##D ##' them
> ##D dim(myRespPlot2D)
> ##D dimnames(myRespPlot2D)
> ##D     
> ##D dim(myRespPlot3D)
> ##D dimnames(myRespPlot3D)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("sample.factor.levels")
> ### * sample.factor.levels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample.factor.levels
> ### Title: Tool to ensure the sampling of all levels of a factorial
> ###   variable
> ### Aliases: sample.factor.levels
> 
> ### ** Examples
> 
> ## example with raster* object ---------- 
> library(raster)
Loading required package: sp
> ## create a factorial raster
> r1 <- raster()
> r1[] <- 1; r1[1] <- 2; r1[2:3] <- 3
> r1 <- as.factor(r1)
> ## create a continuous raster
> r2 <- raster()
> r2[] <- rnorm(ncell(r2))
> ## pull the raster into a RasterStack
> stk <- stack(r1, r2)
> is.factor(stk)
[1]  TRUE FALSE
> 
> ## define a mask for already sampled points
> mask.out <- r1
> mask.out[] <- NA; mask.out[2:3] <- 1
> 
> ## define a list of mask where we want to sample in priority
> mask.in.1 <- mask.in.2 <- r1
> mask.in.1[1:10] <- NA ## only level 1 should be sampled in this mask
> mask.in.2[1] <- NA ## only levels 1 and 3 should be sampled in this mask
> mask.in <- list(mask.in.1 = mask.in.1, 
+                 mask.in.2 = mask.in.2)
> 
> ## test different version of the function
> sample.factor.levels(stk, mask.out = mask.out)
NULL
> sample.factor.levels(stk, mask.in = mask.in)
NULL
> sample.factor.levels(stk, mask.out = mask.out, mask.in = mask.in)
NULL
> 
> 
> 
> 
> cleanEx()

detaching ‘package:raster’, ‘package:sp’

> nameEx("sre")
> ### * sre
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sre
> ### Title: Surface Range Envelope
> ### Aliases: sre
> ### Keywords: models multivariate
> 
> ### ** Examples
> 
> require(raster)
Loading required package: raster
Loading required package: sp
> ##' species occurrences
> DataSpecies <- 
+   read.csv(
+     system.file("external/species/mammals_table.csv", package = "biomod2"), 
+     row.names = 1
+   )
> head(DataSpecies)
  X_WGS84  Y_WGS84 ConnochaetesGnou GuloGulo PantheraOnca PteropusGiganteus
1   -94.5 82.00001                0        0            0                 0
2   -91.5 82.00001                0        1            0                 0
3   -88.5 82.00001                0        1            0                 0
4   -85.5 82.00001                0        1            0                 0
5   -82.5 82.00001                0        1            0                 0
6   -79.5 82.00001                0        1            0                 0
  TenrecEcaudatus VulpesVulpes
1               0            0
2               0            0
3               0            0
4               0            0
5               0            0
6               0            0
> 
> ##' the name of studied species
> myRespName <- 'GuloGulo'
> 
> ##' the presence/absences data for our species 
> myResp <- as.numeric(DataSpecies[,myRespName])
> 
> ##' the XY coordinates of species data
> myRespXY <- DataSpecies[which(myResp==1),c("X_WGS84","Y_WGS84")]
> 
> ##' Environmental variables extracted from BIOCLIM (bio_3, 
> ##' bio_4, bio_7, bio_11 & bio_12)
> myExpl <- 
+   raster::stack(
+     system.file("external/bioclim/current/bio3.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio4.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio7.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio11.grd", package = "biomod2"),
+     system.file("external/bioclim/current/bio12.grd", package = "biomod2")
+   )
> myResp <- 
+   raster::reclassify(
+     subset(myExpl, 1, drop = TRUE), c(-Inf, Inf, 0)
+   )
> myResp[cellFromXY(myResp,myRespXY)] <- 1
> 
> ##' Compute some SRE for several quantile values
> sre.100 <- 
+   sre(
+     Response = myResp, 
+     Explanatory = myExpl, 
+     NewData=myExpl, 
+     Quant = 0
+   )
>   
> sre.095 <- 
+   sre(
+     Response = myResp, 
+     Explanatory = myExpl, 
+     NewData=myExpl, 
+     Quant = 0.025
+   )
> 
> sre.090 <- 
+   sre(
+     Response = myResp, 
+     Explanatory = myExpl, 
+     NewData=myExpl, 
+     Quant = 0.05
+   )
>   
> ##' visualise results
> par(mfrow=c(2,2),mar=c(6, 5, 5, 3))
> plot(myResp, main = paste(myRespName, "original distrib."))
> plot(sre.100, main="full data calibration")
> plot(sre.095, main="95 %")
> plot(sre.090, main="90 %")
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:raster’, ‘package:sp’

> nameEx("variables_importance")
> ### * variables_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: variables_importance
> ### Title: Variables importance calculation
> ### Aliases: variables_importance
> ### Keywords: importance random suffle
> 
> ### ** Examples
> 
> xx <- 
+   data.frame( 
+     a = sample(c(0, 1), 100, replace = TRUE),
+     b = rnorm(100),
+     c = 1:100
+   )
>   
> mod <- glm(a ~ b + c, data = xx)
> 
> variables_importance(
+   model = mod, 
+   data = xx[, c('b', 'c')], 
+   method = "full_rand", 
+   nb_rand = 3
+ )
$mat
     rand1    rand2    rand3
b 0.070017 0.081096 0.077457
c 0.806629 1.000000 0.831643

attr(,"class")
[1] "BIOMOD_variables_importances"
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  26.068 2.105 29.777 0.002 0.007 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
