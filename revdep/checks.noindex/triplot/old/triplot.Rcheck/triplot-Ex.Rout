
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "triplot"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('triplot')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aspect_importance")
> ### * aspect_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aspect_importance
> ### Title: Calculates importance of variable groups (called aspects) for a
> ###   selected observation
> ### Aliases: aspect_importance aspect_importance.explainer
> ###   aspect_importance.default lime predict_aspects
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> 
> model_titanic_glm <- glm(survived == 1 ~
+                          class+gender+age+sibsp+parch+fare+embarked,
+                          data = titanic_imputed,
+                          family = "binomial")
> 
> explain_titanic_glm <- explain(model_titanic_glm,
+                                data = titanic_imputed[,-8],
+                                y = titanic_imputed$survived == 1,
+                                verbose = FALSE)
> 
> aspects <- list(wealth = c("class", "fare"),
+                 family = c("sibsp", "parch"),
+                 personal = c("gender", "age"),
+                 embarked = "embarked")
> 
> predict_aspects(explain_titanic_glm,
+                   new_observation = titanic_imputed[1,],
+                   variable_groups = aspects)
  variable_groups importance
4        personal  -0.138188
2          wealth  -0.116222
5        embarked  -0.022998
3          family   0.003372
> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("aspect_importance_single")
> ### * aspect_importance_single
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aspect_importance_single
> ### Title: Aspects importance for single aspects
> ### Aliases: aspect_importance_single aspect_importance_single.explainer
> ###   aspect_importance_single.default
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> model_titanic_glm <- glm(survived == 1 ~ class + gender + age +
+                          sibsp + parch + fare + embarked,
+                          data = titanic_imputed,
+                          family = "binomial")
> 
> explainer_titanic <- explain(model_titanic_glm,
+                              data = titanic_imputed[,-8],
+                              verbose = FALSE)
> aspect_importance_single(explainer_titanic,
+                          new_observation = titanic_imputed[1,-8])
  variable_groups importance
4           class  -0.137188
2          gender  -0.100708
3             age  -0.061079
6            fare  -0.019090
7           sibsp   0.012908
5        embarked  -0.012865
8           parch  -0.005308
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("calculate_triplot")
> ### * calculate_triplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calculate_triplot
> ### Title: Calculate triplot that sums up automatic aspect/feature
> ###   importance grouping
> ### Aliases: calculate_triplot calculate_triplot.explainer
> ###   calculate_triplot.default print.triplot model_triplot predict_triplot
> 
> ### ** Examples
> 
> 
> library(DALEX)
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> set.seed(123)
> apartments_num <- apartments[,unlist(lapply(apartments, is.numeric))]
> apartments_num_lm_model <- lm(m2.price ~ ., data = apartments_num)
> apartments_num_new_observation <- apartments_num[30, ]
> explainer_apartments <- explain(model = apartments_num_lm_model,
+                                 data = apartments_num[,-1],
+                                 y = apartments_num[, 1],
+                                 verbose = FALSE)
> apartments_tri <- calculate_triplot(x = explainer_apartments,
+                                     new_observation =
+                                       apartments_num_new_observation[-1])
> apartments_tri
Triplot object for model: lm 

Triplot is calculated for single prediction:
   construction.year surface floor no.rooms
30              2002      88     6        3
>                                    
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("cluster_variables")
> ### * cluster_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_variables
> ### Title: Creates a cluster tree from numeric features
> ### Aliases: cluster_variables cluster_variables.default
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> dragons_data <- dragons[,c(2,3,4,7,8)]
> cluster_variables(dragons_data, clust_method = "complete")

Call:
hclust(d = as.dist(1 - abs(cor(x, method = "spearman"))), method = clust_method)

Cluster method   : complete 
Number of objects: 5 

> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("get_sample")
> ### * get_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_sample
> ### Title: Function for getting binary matrix
> ### Aliases: get_sample
> 
> ### ** Examples
> 
>  get_sample(100,6,"binom",3)
       [,1] [,2] [,3] [,4] [,5] [,6]
  [1,]    1    0    0    1    0    0
  [2,]    0    0    1    0    1    0
  [3,]    0    1    1    0    0    0
  [4,]    0    1    0    0    1    1
  [5,]    1    1    0    0    1    0
  [6,]    0    0    0    0    1    0
  [7,]    1    1    0    0    0    1
  [8,]    1    0    0    1    0    0
  [9,]    0    0    0    0    0    1
 [10,]    0    1    0    1    0    1
 [11,]    0    1    0    1    0    0
 [12,]    1    0    0    1    0    1
 [13,]    0    0    0    0    0    1
 [14,]    0    1    1    0    0    1
 [15,]    0    1    0    0    1    1
 [16,]    1    0    0    0    0    1
 [17,]    0    0    1    0    0    1
 [18,]    0    0    1    1    0    1
 [19,]    1    0    0    1    1    0
 [20,]    0    0    0    0    0    1
 [21,]    0    0    0    1    1    1
 [22,]    1    0    0    1    0    0
 [23,]    1    0    0    0    1    1
 [24,]    0    1    1    0    0    1
 [25,]    0    0    1    0    0    0
 [26,]    0    1    0    1    0    1
 [27,]    0    1    0    0    1    0
 [28,]    0    1    1    0    0    0
 [29,]    0    1    0    0    1    0
 [30,]    1    0    0    1    1    1
 [31,]    1    1    1    0    0    0
 [32,]    0    0    0    0    0    1
 [33,]    1    0    0    1    0    0
 [34,]    1    0    1    0    1    1
 [35,]    0    0    1    0    0    1
 [36,]    1    0    0    1    0    0
 [37,]    1    1    0    0    0    1
 [38,]    0    0    1    1    0    0
 [39,]    0    0    1    1    1    0
 [40,]    1    0    0    1    0    0
 [41,]    1    0    0    1    0    0
 [42,]    0    1    0    0    1    0
 [43,]    0    1    1    0    0    0
 [44,]    0    1    1    0    0    0
 [45,]    0    0    1    0    1    1
 [46,]    1    1    0    1    0    0
 [47,]    0    1    0    1    0    0
 [48,]    1    0    0    0    0    0
 [49,]    0    0    0    1    1    0
 [50,]    0    0    0    1    0    1
 [51,]    1    1    1    0    0    0
 [52,]    1    0    0    0    0    1
 [53,]    1    0    1    1    1    0
 [54,]    0    0    0    1    1    0
 [55,]    1    0    0    0    1    0
 [56,]    1    1    0    1    1    0
 [57,]    0    1    0    0    0    0
 [58,]    0    0    0    0    1    1
 [59,]    0    1    0    0    0    1
 [60,]    0    1    0    0    1    1
 [61,]    0    1    0    1    0    0
 [62,]    0    0    0    0    1    0
 [63,]    1    1    0    1    0    0
 [64,]    1    0    1    0    0    0
 [65,]    0    0    0    0    0    1
 [66,]    0    0    1    0    1    0
 [67,]    1    0    0    0    0    1
 [68,]    0    0    0    1    0    1
 [69,]    0    1    0    0    1    0
 [70,]    1    0    0    1    0    1
 [71,]    0    0    0    1    1    0
 [72,]    1    1    0    1    0    0
 [73,]    0    0    0    1    1    0
 [74,]    1    0    0    0    1    1
 [75,]    1    0    0    0    0    1
 [76,]    0    1    0    0    0    0
 [77,]    0    1    1    0    1    0
 [78,]    1    1    0    1    1    0
 [79,]    0    1    1    1    0    0
 [80,]    1    0    0    1    1    1
 [81,]    1    0    1    0    1    1
 [82,]    1    1    0    0    1    0
 [83,]    1    1    1    1    0    0
 [84,]    0    1    0    1    1    1
 [85,]    1    1    0    1    0    1
 [86,]    1    0    1    0    0    1
 [87,]    0    1    0    1    1    0
 [88,]    0    1    0    0    0    0
 [89,]    1    0    0    0    0    1
 [90,]    1    0    0    0    1    1
 [91,]    1    0    1    0    0    1
 [92,]    1    0    0    1    0    0
 [93,]    1    0    0    1    0    0
 [94,]    0    0    0    0    1    1
 [95,]    1    1    1    1    1    0
 [96,]    1    0    1    1    0    0
 [97,]    0    0    1    1    0    1
 [98,]    1    0    0    0    0    0
 [99,]    0    0    1    1    0    0
[100,]    0    1    0    1    0    0
> 
> 
> 
> 
> cleanEx()
> nameEx("group_variables")
> ### * group_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_variables
> ### Title: Helper function that combines clustering variables and creating
> ###   aspect list
> ### Aliases: group_variables
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> dragons_data <- dragons[,c(2,3,4,7,8)]
> group_variables(dragons_data, h = 0.5, clust_method = "complete")
$aspect.group1
[1] "height" "weight"

$aspect.group2
[1] "scars"       "life_length"

$aspect.group3
[1] "number_of_lost_teeth"

> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("hierarchical_importance")
> ### * hierarchical_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hierarchical_importance
> ### Title: Calculates importance of hierarchically grouped aspects
> ### Aliases: hierarchical_importance plot.hierarchical_importance
> 
> ### ** Examples
> 
> library(DALEX)
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> apartments_num <- apartments[,unlist(lapply(apartments, is.numeric))]
> apartments_num_lm_model <- lm(m2.price ~ ., data = apartments_num)
> hi <- hierarchical_importance(x = apartments_num_lm_model,
+  data = apartments_num[,-1],
+  y = apartments_num[,1],
+  type = "model")
> plot(hi, add_last_group = TRUE, absolute_value = TRUE)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("list_variables")
> ### * list_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: list_variables
> ### Title: Cuts tree at custom height and returns a list
> ### Aliases: list_variables
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> dragons_data <- dragons[,c(2,3,4,7,8)]
> cv <- cluster_variables(dragons_data, clust_method = "complete")
> list_variables(cv, h = 0.5)
$aspect.group1
[1] "height" "weight"

$aspect.group2
[1] "scars"       "life_length"

$aspect.group3
[1] "number_of_lost_teeth"

> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("plot.aspect_importance")
> ### * plot.aspect_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.aspect_importance
> ### Title: Function for plotting aspect_importance results
> ### Aliases: plot.aspect_importance
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> 
> model_titanic_glm <- glm(survived == 1 ~
+                          class+gender+age+sibsp+parch+fare+embarked,
+                          data = titanic_imputed,
+                          family = "binomial")
> 
> explain_titanic_glm <- explain(model_titanic_glm,
+                                data = titanic_imputed[,-8],
+                                y = titanic_imputed$survived == 1,
+                                verbose = FALSE)
> 
> aspects <- list(wealth = c("class", "fare"),
+                 family = c("sibsp", "parch"),
+                 personal = c("gender", "age"),
+                 embarked = "embarked")
> 
> titanic_ai <- predict_aspects(explain_titanic_glm,
+                   new_observation = titanic_imputed[1,],
+                   variable_groups = aspects)
> plot(titanic_ai)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("plot.cluster_variables")
> ### * plot.cluster_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.cluster_variables
> ### Title: Plots tree with correlation values
> ### Aliases: plot.cluster_variables
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> dragons_data <- dragons[,c(2,3,4,7,8)]
> cv <- cluster_variables(dragons_data, clust_method = "complete")
> plot(cv, p = 0.7)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("plot.triplot")
> ### * plot.triplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.triplot
> ### Title: Plots triplot
> ### Aliases: plot.triplot
> 
> ### ** Examples
> 
> library(DALEX)
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> set.seed(123)
> apartments_num <- apartments[,unlist(lapply(apartments, is.numeric))]
> apartments_num_lm_model <- lm(m2.price ~ ., data = apartments_num)
> apartments_num_new_observation <- apartments_num[30, ]
> explainer_apartments <- explain(model = apartments_num_lm_model,
+                                 data = apartments_num[,-1],
+                                 y = apartments_num[, 1],
+                                 verbose = FALSE)
> apartments_tri <- calculate_triplot(x = explainer_apartments,
+  new_observation = apartments_num_new_observation[-1])
> plot(apartments_tri)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:DALEX’

> nameEx("print.aspect_importance")
> ### * print.aspect_importance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.aspect_importance
> ### Title: Function for printing aspect_importance results
> ### Aliases: print.aspect_importance
> 
> ### ** Examples
> 
> library("DALEX")
Welcome to DALEX (version: 1.2.1).
Find examples and detailed introduction at: https://pbiecek.github.io/ema/
Additional features will be available after installation of: ggpubr.
Use 'install_dependencies()' to get all suggested dependencies
> 
> model_titanic_glm <- glm(survived == 1 ~
+                          class+gender+age+sibsp+parch+fare+embarked,
+                          data = titanic_imputed,
+                          family = "binomial")
> 
> explain_titanic_glm <- explain(model_titanic_glm,
+                                data = titanic_imputed[,-8],
+                                y = titanic_imputed$survived == 1,
+                                verbose = FALSE)
> 
> aspects <- list(wealth = c("class", "fare"),
+                 family = c("sibsp", "parch"),
+                 personal = c("gender", "age"),
+                 embarked = "embarked")
> 
> titanic_ai <- predict_aspects(explain_titanic_glm,
+                   new_observation = titanic_imputed[1,],
+                   variable_groups = aspects)
> print(titanic_ai)
  variable_groups importance
4        personal  -0.138188
2          wealth  -0.116222
5        embarked  -0.022998
3          family   0.003372
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:DALEX’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.369 0.324 3.751 0.003 0.008 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
